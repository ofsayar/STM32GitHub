
OV7670_Only.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005188  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08005310  08005310  00015310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053a4  080053a4  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  080053a4  080053a4  000153a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053ac  080053ac  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053ac  080053ac  000153ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053b0  080053b0  000153b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080053b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          00004cbc  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004cd4  20004cd4  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000a58c  00000000  00000000  0002008b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001dc7  00000000  00000000  0002a617  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000908  00000000  00000000  0002c3e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000006e1  00000000  00000000  0002cce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002038a  00000000  00000000  0002d3c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000d08f  00000000  00000000  0004d753  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c087e  00000000  00000000  0005a7e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000240c  00000000  00000000  0011b060  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  0011d46c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080052f8 	.word	0x080052f8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	080052f8 	.word	0x080052f8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <OV7670_Init>:
/*
 * @brief Initializes the Camera Module
 * @retval returns number of errors during initialization
 * */
uint8_t OV7670_Init(DCMI_HandleTypeDef *p_hdcmi, DMA_HandleTypeDef *p_hdma_dcmi, I2C_HandleTypeDef *p_hi2c)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b086      	sub	sp, #24
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	60f8      	str	r0, [r7, #12]
 80004cc:	60b9      	str	r1, [r7, #8]
 80004ce:	607a      	str	r2, [r7, #4]
	sp_hdcmi 	 = p_hdcmi;
 80004d0:	4a25      	ldr	r2, [pc, #148]	; (8000568 <OV7670_Init+0xa4>)
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	6013      	str	r3, [r2, #0]
	sp_hdma_dcmi = p_hdma_dcmi;
 80004d6:	4a25      	ldr	r2, [pc, #148]	; (800056c <OV7670_Init+0xa8>)
 80004d8:	68bb      	ldr	r3, [r7, #8]
 80004da:	6013      	str	r3, [r2, #0]
	sp_hi2c		 = p_hi2c;
 80004dc:	4a24      	ldr	r2, [pc, #144]	; (8000570 <OV7670_Init+0xac>)
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	6013      	str	r3, [r2, #0]

	HAL_StatusTypeDef status;
	uint8_t errNum = 0;
 80004e2:	2300      	movs	r3, #0
 80004e4:	75fb      	strb	r3, [r7, #23]
	uint8_t buffer[4]; //re
	// Software Reset
	status = OV7670_Write(0x12, 0x80);
 80004e6:	2180      	movs	r1, #128	; 0x80
 80004e8:	2012      	movs	r0, #18
 80004ea:	f000 fa2b 	bl	8000944 <OV7670_Write>
 80004ee:	4603      	mov	r3, r0
 80004f0:	75bb      	strb	r3, [r7, #22]
	errNum += ( status != HAL_OK );
 80004f2:	7dbb      	ldrb	r3, [r7, #22]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	bf14      	ite	ne
 80004f8:	2301      	movne	r3, #1
 80004fa:	2300      	moveq	r3, #0
 80004fc:	b2db      	uxtb	r3, r3
 80004fe:	461a      	mov	r2, r3
 8000500:	7dfb      	ldrb	r3, [r7, #23]
 8000502:	4413      	add	r3, r2
 8000504:	75fb      	strb	r3, [r7, #23]
	status = OV7670_Read(0x12, buffer); //re
 8000506:	f107 0310 	add.w	r3, r7, #16
 800050a:	4619      	mov	r1, r3
 800050c:	2012      	movs	r0, #18
 800050e:	f000 fa39 	bl	8000984 <OV7670_Read>
 8000512:	4603      	mov	r3, r0
 8000514:	75bb      	strb	r3, [r7, #22]
	errNum += ( status != HAL_OK );		//re
 8000516:	7dbb      	ldrb	r3, [r7, #22]
 8000518:	2b00      	cmp	r3, #0
 800051a:	bf14      	ite	ne
 800051c:	2301      	movne	r3, #1
 800051e:	2300      	moveq	r3, #0
 8000520:	b2db      	uxtb	r3, r3
 8000522:	461a      	mov	r2, r3
 8000524:	7dfb      	ldrb	r3, [r7, #23]
 8000526:	4413      	add	r3, r2
 8000528:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(30);
 800052a:	201e      	movs	r0, #30
 800052c:	f000 fe78 	bl	8001220 <HAL_Delay>

	// Read device ID after reset
	//uint8_t buffer[4];
	status = OV7670_Read(0x0b, buffer);
 8000530:	f107 0310 	add.w	r3, r7, #16
 8000534:	4619      	mov	r1, r3
 8000536:	200b      	movs	r0, #11
 8000538:	f000 fa24 	bl	8000984 <OV7670_Read>
 800053c:	4603      	mov	r3, r0
 800053e:	75bb      	strb	r3, [r7, #22]
	errNum += ( status != HAL_OK );
 8000540:	7dbb      	ldrb	r3, [r7, #22]
 8000542:	2b00      	cmp	r3, #0
 8000544:	bf14      	ite	ne
 8000546:	2301      	movne	r3, #1
 8000548:	2300      	moveq	r3, #0
 800054a:	b2db      	uxtb	r3, r3
 800054c:	461a      	mov	r2, r3
 800054e:	7dfb      	ldrb	r3, [r7, #23]
 8000550:	4413      	add	r3, r2
 8000552:	75fb      	strb	r3, [r7, #23]

	if(buffer[0] != 0x73)
 8000554:	7c3b      	ldrb	r3, [r7, #16]
 8000556:	2b73      	cmp	r3, #115	; 0x73
 8000558:	d001      	beq.n	800055e <OV7670_Init+0x9a>
		return 255;
 800055a:	23ff      	movs	r3, #255	; 0xff
 800055c:	e000      	b.n	8000560 <OV7670_Init+0x9c>

	return errNum;
 800055e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000560:	4618      	mov	r0, r3
 8000562:	3718      	adds	r7, #24
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	20000034 	.word	0x20000034
 800056c:	20000038 	.word	0x20000038
 8000570:	2000003c 	.word	0x2000003c

08000574 <OV7670_Config>:


void OV7670_Config(const uint8_t params[][2])
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	for(int i = 0; params[i][0] != 0xFF; i++)
 800057c:	2300      	movs	r3, #0
 800057e:	60fb      	str	r3, [r7, #12]
 8000580:	e012      	b.n	80005a8 <OV7670_Config+0x34>
	{
		OV7670_Write(params[i][0], params[i][1]);
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	005b      	lsls	r3, r3, #1
 8000586:	687a      	ldr	r2, [r7, #4]
 8000588:	4413      	add	r3, r2
 800058a:	7818      	ldrb	r0, [r3, #0]
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	005b      	lsls	r3, r3, #1
 8000590:	687a      	ldr	r2, [r7, #4]
 8000592:	4413      	add	r3, r2
 8000594:	785b      	ldrb	r3, [r3, #1]
 8000596:	4619      	mov	r1, r3
 8000598:	f000 f9d4 	bl	8000944 <OV7670_Write>
		HAL_Delay(1);
 800059c:	2001      	movs	r0, #1
 800059e:	f000 fe3f 	bl	8001220 <HAL_Delay>
	for(int i = 0; params[i][0] != 0xFF; i++)
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	3301      	adds	r3, #1
 80005a6:	60fb      	str	r3, [r7, #12]
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	005b      	lsls	r3, r3, #1
 80005ac:	687a      	ldr	r2, [r7, #4]
 80005ae:	4413      	add	r3, r2
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	2bff      	cmp	r3, #255	; 0xff
 80005b4:	d1e5      	bne.n	8000582 <OV7670_Config+0xe>
	}
}
 80005b6:	bf00      	nop
 80005b8:	bf00      	nop
 80005ba:	3710      	adds	r7, #16
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}

080005c0 <OV7670_Start>:
 * @param mode Capture_mode enum that is either Continous or Snapshot
 * @param capture_address is the lcd data address
 * @retval None
 * */
void OV7670_Start(Capture_mode mode, uint32_t *capture_address)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	6039      	str	r1, [r7, #0]
 80005ca:	71fb      	strb	r3, [r7, #7]
	capture_mode=mode;
 80005cc:	4a19      	ldr	r2, [pc, #100]	; (8000634 <OV7670_Start+0x74>)
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	7013      	strb	r3, [r2, #0]
	img_address=(uint32_t)capture_address;
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	4a18      	ldr	r2, [pc, #96]	; (8000638 <OV7670_Start+0x78>)
 80005d6:	6013      	str	r3, [r2, #0]

	if(capture_mode == SNAPSHOT)
 80005d8:	4b16      	ldr	r3, [pc, #88]	; (8000634 <OV7670_Start+0x74>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d112      	bne.n	8000606 <OV7670_Start+0x46>
		HAL_DCMI_Start_DMA(sp_hdcmi, DCMI_MODE_SNAPSHOT, img_address, img_width * img_height/2);
 80005e0:	4b16      	ldr	r3, [pc, #88]	; (800063c <OV7670_Start+0x7c>)
 80005e2:	6818      	ldr	r0, [r3, #0]
 80005e4:	4b14      	ldr	r3, [pc, #80]	; (8000638 <OV7670_Start+0x78>)
 80005e6:	6819      	ldr	r1, [r3, #0]
 80005e8:	4b15      	ldr	r3, [pc, #84]	; (8000640 <OV7670_Start+0x80>)
 80005ea:	881b      	ldrh	r3, [r3, #0]
 80005ec:	461a      	mov	r2, r3
 80005ee:	4b15      	ldr	r3, [pc, #84]	; (8000644 <OV7670_Start+0x84>)
 80005f0:	881b      	ldrh	r3, [r3, #0]
 80005f2:	fb02 f303 	mul.w	r3, r2, r3
 80005f6:	0fda      	lsrs	r2, r3, #31
 80005f8:	4413      	add	r3, r2
 80005fa:	105b      	asrs	r3, r3, #1
 80005fc:	460a      	mov	r2, r1
 80005fe:	2102      	movs	r1, #2
 8000600:	f000 ff44 	bl	800148c <HAL_DCMI_Start_DMA>
	else
		HAL_DCMI_Start_DMA(sp_hdcmi, DCMI_MODE_CONTINUOUS, img_address, img_width * img_height/2);
}
 8000604:	e011      	b.n	800062a <OV7670_Start+0x6a>
		HAL_DCMI_Start_DMA(sp_hdcmi, DCMI_MODE_CONTINUOUS, img_address, img_width * img_height/2);
 8000606:	4b0d      	ldr	r3, [pc, #52]	; (800063c <OV7670_Start+0x7c>)
 8000608:	6818      	ldr	r0, [r3, #0]
 800060a:	4b0b      	ldr	r3, [pc, #44]	; (8000638 <OV7670_Start+0x78>)
 800060c:	6819      	ldr	r1, [r3, #0]
 800060e:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <OV7670_Start+0x80>)
 8000610:	881b      	ldrh	r3, [r3, #0]
 8000612:	461a      	mov	r2, r3
 8000614:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <OV7670_Start+0x84>)
 8000616:	881b      	ldrh	r3, [r3, #0]
 8000618:	fb02 f303 	mul.w	r3, r2, r3
 800061c:	0fda      	lsrs	r2, r3, #31
 800061e:	4413      	add	r3, r2
 8000620:	105b      	asrs	r3, r3, #1
 8000622:	460a      	mov	r2, r1
 8000624:	2100      	movs	r1, #0
 8000626:	f000 ff31 	bl	800148c <HAL_DCMI_Start_DMA>
}
 800062a:	bf00      	nop
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	20000040 	.word	0x20000040
 8000638:	20000044 	.word	0x20000044
 800063c:	20000034 	.word	0x20000034
 8000640:	20000000 	.word	0x20000000
 8000644:	20000002 	.word	0x20000002

08000648 <OV7670_SetFrameRate>:
 * @param mul the number to multiply with XCLK input.
 * Notes: 	(XCLK / div ) * mul
 * @retval None
 * */
void OV7670_SetFrameRate(uint8_t div, PLL_mul mul)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	460a      	mov	r2, r1
 8000652:	71fb      	strb	r3, [r7, #7]
 8000654:	4613      	mov	r3, r2
 8000656:	71bb      	strb	r3, [r7, #6]
	OV7670_Write(REG_CLKRC, 0x80 | div);
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800065e:	b2db      	uxtb	r3, r3
 8000660:	4619      	mov	r1, r3
 8000662:	2011      	movs	r0, #17
 8000664:	f000 f96e 	bl	8000944 <OV7670_Write>
	HAL_Delay(1);
 8000668:	2001      	movs	r0, #1
 800066a:	f000 fdd9 	bl	8001220 <HAL_Delay>
	OV7670_Write(REG_DBLV, 0x0A | mul);
 800066e:	79bb      	ldrb	r3, [r7, #6]
 8000670:	f043 030a 	orr.w	r3, r3, #10
 8000674:	b2db      	uxtb	r3, r3
 8000676:	4619      	mov	r1, r3
 8000678:	206b      	movs	r0, #107	; 0x6b
 800067a:	f000 f963 	bl	8000944 <OV7670_Write>
	HAL_Delay(1);
 800067e:	2001      	movs	r0, #1
 8000680:	f000 fdce 	bl	8001220 <HAL_Delay>
}
 8000684:	bf00      	nop
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}

0800068c <OV7670_SetColorFormat>:


void OV7670_SetColorFormat(Camera_format format)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	71fb      	strb	r3, [r7, #7]
	uint8_t temp[2];

	OV7670_Read(REG_COM7, &temp[0]);
 8000696:	f107 030c 	add.w	r3, r7, #12
 800069a:	4619      	mov	r1, r3
 800069c:	2012      	movs	r0, #18
 800069e:	f000 f971 	bl	8000984 <OV7670_Read>
	temp[0]&=0b11111010;
 80006a2:	7b3b      	ldrb	r3, [r7, #12]
 80006a4:	f023 0305 	bic.w	r3, r3, #5
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	733b      	strb	r3, [r7, #12]
	OV7670_Read(REG_COM15, &temp[1]);
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	3301      	adds	r3, #1
 80006b2:	4619      	mov	r1, r3
 80006b4:	2040      	movs	r0, #64	; 0x40
 80006b6:	f000 f965 	bl	8000984 <OV7670_Read>
	temp[1]&=0b00001111;
 80006ba:	7b7b      	ldrb	r3, [r7, #13]
 80006bc:	f003 030f 	and.w	r3, r3, #15
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	737b      	strb	r3, [r7, #13]
	HAL_Delay(10);
 80006c4:	200a      	movs	r0, #10
 80006c6:	f000 fdab 	bl	8001220 <HAL_Delay>

	switch(format)
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d002      	beq.n	80006d6 <OV7670_SetColorFormat+0x4a>
 80006d0:	2b01      	cmp	r3, #1
 80006d2:	d00e      	beq.n	80006f2 <OV7670_SetColorFormat+0x66>
			OV7670_Write(REG_COM7, temp[0] | 0x04);//RGB
			OV7670_Write(REG_COM15, temp[1] | 0x10);//RGB565
			img_format=RGB565;
			break;
	}
}
 80006d4:	e021      	b.n	800071a <OV7670_SetColorFormat+0x8e>
			OV7670_Write(REG_COM7, temp[0] | 0x00);
 80006d6:	7b3b      	ldrb	r3, [r7, #12]
 80006d8:	4619      	mov	r1, r3
 80006da:	2012      	movs	r0, #18
 80006dc:	f000 f932 	bl	8000944 <OV7670_Write>
			OV7670_Write(REG_COM15, temp[1] | 0x00);
 80006e0:	7b7b      	ldrb	r3, [r7, #13]
 80006e2:	4619      	mov	r1, r3
 80006e4:	2040      	movs	r0, #64	; 0x40
 80006e6:	f000 f92d 	bl	8000944 <OV7670_Write>
			img_format=YUV422;
 80006ea:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <OV7670_SetColorFormat+0x98>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	701a      	strb	r2, [r3, #0]
			break;
 80006f0:	e013      	b.n	800071a <OV7670_SetColorFormat+0x8e>
			OV7670_Write(REG_COM7, temp[0] | 0x04);//RGB
 80006f2:	7b3b      	ldrb	r3, [r7, #12]
 80006f4:	f043 0304 	orr.w	r3, r3, #4
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	4619      	mov	r1, r3
 80006fc:	2012      	movs	r0, #18
 80006fe:	f000 f921 	bl	8000944 <OV7670_Write>
			OV7670_Write(REG_COM15, temp[1] | 0x10);//RGB565
 8000702:	7b7b      	ldrb	r3, [r7, #13]
 8000704:	f043 0310 	orr.w	r3, r3, #16
 8000708:	b2db      	uxtb	r3, r3
 800070a:	4619      	mov	r1, r3
 800070c:	2040      	movs	r0, #64	; 0x40
 800070e:	f000 f919 	bl	8000944 <OV7670_Write>
			img_format=RGB565;
 8000712:	4b04      	ldr	r3, [pc, #16]	; (8000724 <OV7670_SetColorFormat+0x98>)
 8000714:	2201      	movs	r2, #1
 8000716:	701a      	strb	r2, [r3, #0]
			break;
 8000718:	bf00      	nop
}
 800071a:	bf00      	nop
 800071c:	3710      	adds	r7, #16
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20000004 	.word	0x20000004

08000728 <OV7670_SetFrameControl>:


void OV7670_SetFrameControl(uint16_t hstart, uint16_t hstop, uint16_t vstart, uint16_t vstop)
{
 8000728:	b590      	push	{r4, r7, lr}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	4604      	mov	r4, r0
 8000730:	4608      	mov	r0, r1
 8000732:	4611      	mov	r1, r2
 8000734:	461a      	mov	r2, r3
 8000736:	4623      	mov	r3, r4
 8000738:	80fb      	strh	r3, [r7, #6]
 800073a:	4603      	mov	r3, r0
 800073c:	80bb      	strh	r3, [r7, #4]
 800073e:	460b      	mov	r3, r1
 8000740:	807b      	strh	r3, [r7, #2]
 8000742:	4613      	mov	r3, r2
 8000744:	803b      	strh	r3, [r7, #0]
	OV7670_Write(REG_HSTART, (hstart >> 3) & 0xff);
 8000746:	88fb      	ldrh	r3, [r7, #6]
 8000748:	08db      	lsrs	r3, r3, #3
 800074a:	b29b      	uxth	r3, r3
 800074c:	b2db      	uxtb	r3, r3
 800074e:	4619      	mov	r1, r3
 8000750:	2017      	movs	r0, #23
 8000752:	f000 f8f7 	bl	8000944 <OV7670_Write>
	OV7670_Write(REG_HSTOP, (hstop >> 3) & 0xff);
 8000756:	88bb      	ldrh	r3, [r7, #4]
 8000758:	08db      	lsrs	r3, r3, #3
 800075a:	b29b      	uxth	r3, r3
 800075c:	b2db      	uxtb	r3, r3
 800075e:	4619      	mov	r1, r3
 8000760:	2018      	movs	r0, #24
 8000762:	f000 f8ef 	bl	8000944 <OV7670_Write>
	OV7670_Write(REG_HREF, ((hstop & 0x7) << 3) | (hstart & 0x7));
 8000766:	88bb      	ldrh	r3, [r7, #4]
 8000768:	00db      	lsls	r3, r3, #3
 800076a:	b25b      	sxtb	r3, r3
 800076c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000770:	b25a      	sxtb	r2, r3
 8000772:	88fb      	ldrh	r3, [r7, #6]
 8000774:	b25b      	sxtb	r3, r3
 8000776:	f003 0307 	and.w	r3, r3, #7
 800077a:	b25b      	sxtb	r3, r3
 800077c:	4313      	orrs	r3, r2
 800077e:	b25b      	sxtb	r3, r3
 8000780:	b2db      	uxtb	r3, r3
 8000782:	4619      	mov	r1, r3
 8000784:	2032      	movs	r0, #50	; 0x32
 8000786:	f000 f8dd 	bl	8000944 <OV7670_Write>

	OV7670_Write(REG_VSTART, (vstart >> 2) & 0xff);
 800078a:	887b      	ldrh	r3, [r7, #2]
 800078c:	089b      	lsrs	r3, r3, #2
 800078e:	b29b      	uxth	r3, r3
 8000790:	b2db      	uxtb	r3, r3
 8000792:	4619      	mov	r1, r3
 8000794:	2019      	movs	r0, #25
 8000796:	f000 f8d5 	bl	8000944 <OV7670_Write>
	OV7670_Write(REG_VSTOP, (vstop >> 2) & 0xff);
 800079a:	883b      	ldrh	r3, [r7, #0]
 800079c:	089b      	lsrs	r3, r3, #2
 800079e:	b29b      	uxth	r3, r3
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	4619      	mov	r1, r3
 80007a4:	201a      	movs	r0, #26
 80007a6:	f000 f8cd 	bl	8000944 <OV7670_Write>
	OV7670_Write(REG_VREF,((vstop & 0x3) << 2) | (vstart & 0x3));
 80007aa:	883b      	ldrh	r3, [r7, #0]
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	b25b      	sxtb	r3, r3
 80007b0:	f003 030c 	and.w	r3, r3, #12
 80007b4:	b25a      	sxtb	r2, r3
 80007b6:	887b      	ldrh	r3, [r7, #2]
 80007b8:	b25b      	sxtb	r3, r3
 80007ba:	f003 0303 	and.w	r3, r3, #3
 80007be:	b25b      	sxtb	r3, r3
 80007c0:	4313      	orrs	r3, r2
 80007c2:	b25b      	sxtb	r3, r3
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	4619      	mov	r1, r3
 80007c8:	2003      	movs	r0, #3
 80007ca:	f000 f8bb 	bl	8000944 <OV7670_Write>
}
 80007ce:	bf00      	nop
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd90      	pop	{r4, r7, pc}
	...

080007d8 <OV7670_SetResolution>:

void OV7670_SetResolution(Camera_resolution resolution)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	71fb      	strb	r3, [r7, #7]

	switch(resolution)
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	2b05      	cmp	r3, #5
 80007e6:	d87a      	bhi.n	80008de <OV7670_SetResolution+0x106>
 80007e8:	a201      	add	r2, pc, #4	; (adr r2, 80007f0 <OV7670_SetResolution+0x18>)
 80007ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007ee:	bf00      	nop
 80007f0:	08000809 	.word	0x08000809
 80007f4:	0800082d 	.word	0x0800082d
 80007f8:	0800084f 	.word	0x0800084f
 80007fc:	08000871 	.word	0x08000871
 8000800:	08000897 	.word	0x08000897
 8000804:	080008bb 	.word	0x080008bb
	{
		case QVGA:	//OK
			OV7670_Config(RES_QVGA);
 8000808:	4837      	ldr	r0, [pc, #220]	; (80008e8 <OV7670_SetResolution+0x110>)
 800080a:	f7ff feb3 	bl	8000574 <OV7670_Config>
			OV7670_SetFrameControl(168,24,12,492);
 800080e:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
 8000812:	220c      	movs	r2, #12
 8000814:	2118      	movs	r1, #24
 8000816:	20a8      	movs	r0, #168	; 0xa8
 8000818:	f7ff ff86 	bl	8000728 <OV7670_SetFrameControl>
			img_width=320;
 800081c:	4b33      	ldr	r3, [pc, #204]	; (80008ec <OV7670_SetResolution+0x114>)
 800081e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000822:	801a      	strh	r2, [r3, #0]
			img_height=240;
 8000824:	4b32      	ldr	r3, [pc, #200]	; (80008f0 <OV7670_SetResolution+0x118>)
 8000826:	22f0      	movs	r2, #240	; 0xf0
 8000828:	801a      	strh	r2, [r3, #0]
			break;
 800082a:	e058      	b.n	80008de <OV7670_SetResolution+0x106>
		case QQVGA:	//OK
			OV7670_Config(RES_QQVGA);
 800082c:	4831      	ldr	r0, [pc, #196]	; (80008f4 <OV7670_SetResolution+0x11c>)
 800082e:	f7ff fea1 	bl	8000574 <OV7670_Config>
			OV7670_SetFrameControl(174,30,12,492);
 8000832:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
 8000836:	220c      	movs	r2, #12
 8000838:	211e      	movs	r1, #30
 800083a:	20ae      	movs	r0, #174	; 0xae
 800083c:	f7ff ff74 	bl	8000728 <OV7670_SetFrameControl>
			img_width=160;
 8000840:	4b2a      	ldr	r3, [pc, #168]	; (80008ec <OV7670_SetResolution+0x114>)
 8000842:	22a0      	movs	r2, #160	; 0xa0
 8000844:	801a      	strh	r2, [r3, #0]
			img_height=120;
 8000846:	4b2a      	ldr	r3, [pc, #168]	; (80008f0 <OV7670_SetResolution+0x118>)
 8000848:	2278      	movs	r2, #120	; 0x78
 800084a:	801a      	strh	r2, [r3, #0]
			break;
 800084c:	e047      	b.n	80008de <OV7670_SetResolution+0x106>
		case QQQVGA:	//OK
			OV7670_Config(RES_QQQVGA);
 800084e:	482a      	ldr	r0, [pc, #168]	; (80008f8 <OV7670_SetResolution+0x120>)
 8000850:	f7ff fe90 	bl	8000574 <OV7670_Config>
			OV7670_SetFrameControl(196,52,12,492);//(196+640)%784=52
 8000854:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
 8000858:	220c      	movs	r2, #12
 800085a:	2134      	movs	r1, #52	; 0x34
 800085c:	20c4      	movs	r0, #196	; 0xc4
 800085e:	f7ff ff63 	bl	8000728 <OV7670_SetFrameControl>
			img_width=80;
 8000862:	4b22      	ldr	r3, [pc, #136]	; (80008ec <OV7670_SetResolution+0x114>)
 8000864:	2250      	movs	r2, #80	; 0x50
 8000866:	801a      	strh	r2, [r3, #0]
			img_height=60;
 8000868:	4b21      	ldr	r3, [pc, #132]	; (80008f0 <OV7670_SetResolution+0x118>)
 800086a:	223c      	movs	r2, #60	; 0x3c
 800086c:	801a      	strh	r2, [r3, #0]
			break;
 800086e:	e036      	b.n	80008de <OV7670_SetResolution+0x106>
		case CIF:	//OK
			OV7670_Config(RES_CIF);
 8000870:	4822      	ldr	r0, [pc, #136]	; (80008fc <OV7670_SetResolution+0x124>)
 8000872:	f7ff fe7f 	bl	8000574 <OV7670_Config>
			OV7670_SetFrameControl(174,94,12,489); //for vstop=492 image moves out
 8000876:	f240 13e9 	movw	r3, #489	; 0x1e9
 800087a:	220c      	movs	r2, #12
 800087c:	215e      	movs	r1, #94	; 0x5e
 800087e:	20ae      	movs	r0, #174	; 0xae
 8000880:	f7ff ff52 	bl	8000728 <OV7670_SetFrameControl>
			img_width=352;
 8000884:	4b19      	ldr	r3, [pc, #100]	; (80008ec <OV7670_SetResolution+0x114>)
 8000886:	f44f 72b0 	mov.w	r2, #352	; 0x160
 800088a:	801a      	strh	r2, [r3, #0]
			img_height=288;
 800088c:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <OV7670_SetResolution+0x118>)
 800088e:	f44f 7290 	mov.w	r2, #288	; 0x120
 8000892:	801a      	strh	r2, [r3, #0]
			break;
 8000894:	e023      	b.n	80008de <OV7670_SetResolution+0x106>
		case QCIF:	//OK
			OV7670_Config(RES_QCIF);
 8000896:	481a      	ldr	r0, [pc, #104]	; (8000900 <OV7670_SetResolution+0x128>)
 8000898:	f7ff fe6c 	bl	8000574 <OV7670_Config>
			OV7670_SetFrameControl(454,22,12,492); //for hstart=454, htop=24 incorect last vertical line
 800089c:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
 80008a0:	220c      	movs	r2, #12
 80008a2:	2116      	movs	r1, #22
 80008a4:	f44f 70e3 	mov.w	r0, #454	; 0x1c6
 80008a8:	f7ff ff3e 	bl	8000728 <OV7670_SetFrameControl>
			img_width=176;
 80008ac:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <OV7670_SetResolution+0x114>)
 80008ae:	22b0      	movs	r2, #176	; 0xb0
 80008b0:	801a      	strh	r2, [r3, #0]
			img_height=144;
 80008b2:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <OV7670_SetResolution+0x118>)
 80008b4:	2290      	movs	r2, #144	; 0x90
 80008b6:	801a      	strh	r2, [r3, #0]
			break;
 80008b8:	e011      	b.n	80008de <OV7670_SetResolution+0x106>
		case QQCIF: //OK
			OV7670_Config(RES_QQCIF);
 80008ba:	4812      	ldr	r0, [pc, #72]	; (8000904 <OV7670_SetResolution+0x12c>)
 80008bc:	f7ff fe5a 	bl	8000574 <OV7670_Config>
			OV7670_SetFrameControl(474,42,12,492); //for hstart=454, htop=24 incorrect first line, incorrect colors
 80008c0:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
 80008c4:	220c      	movs	r2, #12
 80008c6:	212a      	movs	r1, #42	; 0x2a
 80008c8:	f44f 70ed 	mov.w	r0, #474	; 0x1da
 80008cc:	f7ff ff2c 	bl	8000728 <OV7670_SetFrameControl>
			img_width=88;
 80008d0:	4b06      	ldr	r3, [pc, #24]	; (80008ec <OV7670_SetResolution+0x114>)
 80008d2:	2258      	movs	r2, #88	; 0x58
 80008d4:	801a      	strh	r2, [r3, #0]
			img_height=72;
 80008d6:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <OV7670_SetResolution+0x118>)
 80008d8:	2248      	movs	r2, #72	; 0x48
 80008da:	801a      	strh	r2, [r3, #0]
			break;
 80008dc:	bf00      	nop
	}
}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	08005310 	.word	0x08005310
 80008ec:	20000000 	.word	0x20000000
 80008f0:	20000002 	.word	0x20000002
 80008f4:	08005320 	.word	0x08005320
 80008f8:	08005330 	.word	0x08005330
 80008fc:	08005340 	.word	0x08005340
 8000900:	08005350 	.word	0x08005350
 8000904:	08005360 	.word	0x08005360

08000908 <OV7670_UpdateSettings>:


void OV7670_UpdateSettings(Camera_settings OV7670)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	80b8      	strh	r0, [r7, #4]
	OV7670_Config(defaults);
 8000910:	480b      	ldr	r0, [pc, #44]	; (8000940 <OV7670_UpdateSettings+0x38>)
 8000912:	f7ff fe2f 	bl	8000574 <OV7670_Config>
	HAL_Delay(10);
 8000916:	200a      	movs	r0, #10
 8000918:	f000 fc82 	bl	8001220 <HAL_Delay>

	OV7670_SetResolution(OV7670.resolution);
 800091c:	793b      	ldrb	r3, [r7, #4]
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff ff5a 	bl	80007d8 <OV7670_SetResolution>

	if(OV7670.format)
 8000924:	797b      	ldrb	r3, [r7, #5]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d003      	beq.n	8000932 <OV7670_UpdateSettings+0x2a>
		OV7670_SetColorFormat(RGB565);
 800092a:	2001      	movs	r0, #1
 800092c:	f7ff feae 	bl	800068c <OV7670_SetColorFormat>
	else
		OV7670_SetColorFormat(YUV422);

}
 8000930:	e002      	b.n	8000938 <OV7670_UpdateSettings+0x30>
		OV7670_SetColorFormat(YUV422);
 8000932:	2000      	movs	r0, #0
 8000934:	f7ff feaa 	bl	800068c <OV7670_SetColorFormat>
}
 8000938:	bf00      	nop
 800093a:	3708      	adds	r7, #8
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	08005370 	.word	0x08005370

08000944 <OV7670_Write>:
/*************************************************************************************************/
								/*** Low-Level Function Defines ***/
/*************************************************************************************************/

HAL_StatusTypeDef OV7670_Write(uint8_t regAddr, uint8_t data)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b088      	sub	sp, #32
 8000948:	af04      	add	r7, sp, #16
 800094a:	4603      	mov	r3, r0
 800094c:	460a      	mov	r2, r1
 800094e:	71fb      	strb	r3, [r7, #7]
 8000950:	4613      	mov	r3, r2
 8000952:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef ret;
  do {
	  ret = HAL_I2C_Mem_Write(sp_hi2c, OV7670_SLAVE_ADDR, regAddr, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8000954:	4b0a      	ldr	r3, [pc, #40]	; (8000980 <OV7670_Write+0x3c>)
 8000956:	6818      	ldr	r0, [r3, #0]
 8000958:	79fb      	ldrb	r3, [r7, #7]
 800095a:	b29a      	uxth	r2, r3
 800095c:	f04f 33ff 	mov.w	r3, #4294967295
 8000960:	9302      	str	r3, [sp, #8]
 8000962:	2301      	movs	r3, #1
 8000964:	9301      	str	r3, [sp, #4]
 8000966:	1dbb      	adds	r3, r7, #6
 8000968:	9300      	str	r3, [sp, #0]
 800096a:	2301      	movs	r3, #1
 800096c:	2142      	movs	r1, #66	; 0x42
 800096e:	f003 faed 	bl	8003f4c <HAL_I2C_Mem_Write>
 8000972:	4603      	mov	r3, r0
 8000974:	73fb      	strb	r3, [r7, #15]

  } while (ret != HAL_OK && 0);

  return ret;
 8000976:	7bfb      	ldrb	r3, [r7, #15]
}
 8000978:	4618      	mov	r0, r3
 800097a:	3710      	adds	r7, #16
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	2000003c 	.word	0x2000003c

08000984 <OV7670_Read>:


HAL_StatusTypeDef OV7670_Read(uint8_t regAddr, uint8_t *data)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af02      	add	r7, sp, #8
 800098a:	4603      	mov	r3, r0
 800098c:	6039      	str	r1, [r7, #0]
 800098e:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef ret;
  do {
	  ret = HAL_I2C_Master_Transmit(sp_hi2c, OV7670_SLAVE_ADDR, &regAddr, 1, 100);
 8000990:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <OV7670_Read+0x48>)
 8000992:	6818      	ldr	r0, [r3, #0]
 8000994:	1dfa      	adds	r2, r7, #7
 8000996:	2364      	movs	r3, #100	; 0x64
 8000998:	9300      	str	r3, [sp, #0]
 800099a:	2301      	movs	r3, #1
 800099c:	2142      	movs	r1, #66	; 0x42
 800099e:	f002 ffb1 	bl	8003904 <HAL_I2C_Master_Transmit>
 80009a2:	4603      	mov	r3, r0
 80009a4:	73fb      	strb	r3, [r7, #15]
	  ret |= HAL_I2C_Master_Receive(sp_hi2c, OV7670_SLAVE_ADDR, data, 1, 100);
 80009a6:	4b09      	ldr	r3, [pc, #36]	; (80009cc <OV7670_Read+0x48>)
 80009a8:	6818      	ldr	r0, [r3, #0]
 80009aa:	2364      	movs	r3, #100	; 0x64
 80009ac:	9300      	str	r3, [sp, #0]
 80009ae:	2301      	movs	r3, #1
 80009b0:	683a      	ldr	r2, [r7, #0]
 80009b2:	2142      	movs	r1, #66	; 0x42
 80009b4:	f003 f8a4 	bl	8003b00 <HAL_I2C_Master_Receive>
 80009b8:	4603      	mov	r3, r0
 80009ba:	461a      	mov	r2, r3
 80009bc:	7bfb      	ldrb	r3, [r7, #15]
 80009be:	4313      	orrs	r3, r2
 80009c0:	73fb      	strb	r3, [r7, #15]
  } while (ret != HAL_OK && 0);

  return ret;
 80009c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	3710      	adds	r7, #16
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	2000003c 	.word	0x2000003c

080009d0 <HAL_DCMI_FrameEventCallback>:
								/*** Callback Function Defines ***/
/*************************************************************************************************/


void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
	static int i = 0;

	if(i < 30)
 80009d8:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <HAL_DCMI_FrameEventCallback+0x44>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2b1d      	cmp	r3, #29
 80009de:	dc08      	bgt.n	80009f2 <HAL_DCMI_FrameEventCallback+0x22>
		fpsCounter[i] = HAL_GetTick();
 80009e0:	f000 fc12 	bl	8001208 <HAL_GetTick>
 80009e4:	4602      	mov	r2, r0
 80009e6:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <HAL_DCMI_FrameEventCallback+0x44>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	b291      	uxth	r1, r2
 80009ec:	4a0a      	ldr	r2, [pc, #40]	; (8000a18 <HAL_DCMI_FrameEventCallback+0x48>)
 80009ee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	frameCounter++;
 80009f2:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <HAL_DCMI_FrameEventCallback+0x4c>)
 80009f4:	881b      	ldrh	r3, [r3, #0]
 80009f6:	b29b      	uxth	r3, r3
 80009f8:	3301      	adds	r3, #1
 80009fa:	b29a      	uxth	r2, r3
 80009fc:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <HAL_DCMI_FrameEventCallback+0x4c>)
 80009fe:	801a      	strh	r2, [r3, #0]

	i++;
 8000a00:	4b04      	ldr	r3, [pc, #16]	; (8000a14 <HAL_DCMI_FrameEventCallback+0x44>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	3301      	adds	r3, #1
 8000a06:	4a03      	ldr	r2, [pc, #12]	; (8000a14 <HAL_DCMI_FrameEventCallback+0x44>)
 8000a08:	6013      	str	r3, [r2, #0]

//	if(capture_mode==CONTINUOUS)
//		HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, img_address, img_width * img_height/2);
}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20000048 	.word	0x20000048
 8000a18:	200001bc 	.word	0x200001bc
 8000a1c:	2000017c 	.word	0x2000017c

08000a20 <HAL_DCMI_LineEventCallback>:


void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]

	if(frameCounter < 30)
 8000a28:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <HAL_DCMI_LineEventCallback+0x30>)
 8000a2a:	881b      	ldrh	r3, [r3, #0]
 8000a2c:	b29b      	uxth	r3, r3
 8000a2e:	2b1d      	cmp	r3, #29
 8000a30:	d80a      	bhi.n	8000a48 <HAL_DCMI_LineEventCallback+0x28>
		lineCounter[frameCounter] = HAL_GetTick();
 8000a32:	f000 fbe9 	bl	8001208 <HAL_GetTick>
 8000a36:	4601      	mov	r1, r0
 8000a38:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <HAL_DCMI_LineEventCallback+0x30>)
 8000a3a:	881b      	ldrh	r3, [r3, #0]
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	461a      	mov	r2, r3
 8000a40:	b289      	uxth	r1, r1
 8000a42:	4b04      	ldr	r3, [pc, #16]	; (8000a54 <HAL_DCMI_LineEventCallback+0x34>)
 8000a44:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

}
 8000a48:	bf00      	nop
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	2000017c 	.word	0x2000017c
 8000a54:	20000140 	.word	0x20000140

08000a58 <HAL_DCMI_VsyncEventCallback>:

void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]

	if(frameCounter < 30)
 8000a60:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <HAL_DCMI_VsyncEventCallback+0x30>)
 8000a62:	881b      	ldrh	r3, [r3, #0]
 8000a64:	b29b      	uxth	r3, r3
 8000a66:	2b1d      	cmp	r3, #29
 8000a68:	d80a      	bhi.n	8000a80 <HAL_DCMI_VsyncEventCallback+0x28>
		vCounter[frameCounter] = HAL_GetTick();
 8000a6a:	f000 fbcd 	bl	8001208 <HAL_GetTick>
 8000a6e:	4601      	mov	r1, r0
 8000a70:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <HAL_DCMI_VsyncEventCallback+0x30>)
 8000a72:	881b      	ldrh	r3, [r3, #0]
 8000a74:	b29b      	uxth	r3, r3
 8000a76:	461a      	mov	r2, r3
 8000a78:	b289      	uxth	r1, r1
 8000a7a:	4b04      	ldr	r3, [pc, #16]	; (8000a8c <HAL_DCMI_VsyncEventCallback+0x34>)
 8000a7c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
}
 8000a80:	bf00      	nop
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	2000017c 	.word	0x2000017c
 8000a8c:	20000180 	.word	0x20000180

08000a90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8000a94:	f000 fb52 	bl	800113c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a98:	f000 f828 	bl	8000aec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a9c:	f000 f910 	bl	8000cc0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000aa0:	f000 f8ee 	bl	8000c80 <MX_DMA_Init>
  MX_I2C1_Init();
 8000aa4:	f000 f8be 	bl	8000c24 <MX_I2C1_Init>
  MX_DCMI_Init();
 8000aa8:	f000 f894 	bl	8000bd4 <MX_DCMI_Init>
  /* USER CODE BEGIN 2 */
  //  ILI9341_Init(ILI9341_WIDTH, ILI9341_HEIGHT);
  //  uint16_t* p_lcdData;
  //  p_lcdData = ILI9341_GetDrawAddress();

    OV7670_Init(&hdcmi, &hdma_dcmi, &hi2c1);
 8000aac:	4a0a      	ldr	r2, [pc, #40]	; (8000ad8 <main+0x48>)
 8000aae:	490b      	ldr	r1, [pc, #44]	; (8000adc <main+0x4c>)
 8000ab0:	480b      	ldr	r0, [pc, #44]	; (8000ae0 <main+0x50>)
 8000ab2:	f7ff fd07 	bl	80004c4 <OV7670_Init>

    OV7670_UpdateSettings(OV7670_settings);
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <main+0x54>)
 8000ab8:	6818      	ldr	r0, [r3, #0]
 8000aba:	f7ff ff25 	bl	8000908 <OV7670_UpdateSettings>

    OV7670_SetFrameRate(XCLK_DIV(2), PLL_x6);		// (8MHz / 2) * 6
 8000abe:	2180      	movs	r1, #128	; 0x80
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	f7ff fdc1 	bl	8000648 <OV7670_SetFrameRate>
    HAL_Delay(10);
 8000ac6:	200a      	movs	r0, #10
 8000ac8:	f000 fbaa 	bl	8001220 <HAL_Delay>

    OV7670_Start(CONTINUOUS, image_data);
 8000acc:	4906      	ldr	r1, [pc, #24]	; (8000ae8 <main+0x58>)
 8000ace:	2000      	movs	r0, #0
 8000ad0:	f7ff fd76 	bl	80005c0 <OV7670_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <main+0x44>
 8000ad6:	bf00      	nop
 8000ad8:	200000ec 	.word	0x200000ec
 8000adc:	2000008c 	.word	0x2000008c
 8000ae0:	2000004c 	.word	0x2000004c
 8000ae4:	20000008 	.word	0x20000008
 8000ae8:	200001d0 	.word	0x200001d0

08000aec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b094      	sub	sp, #80	; 0x50
 8000af0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000af2:	f107 0320 	add.w	r3, r7, #32
 8000af6:	2230      	movs	r2, #48	; 0x30
 8000af8:	2100      	movs	r1, #0
 8000afa:	4618      	mov	r0, r3
 8000afc:	f004 fbd0 	bl	80052a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b00:	f107 030c 	add.w	r3, r7, #12
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b10:	2300      	movs	r3, #0
 8000b12:	60bb      	str	r3, [r7, #8]
 8000b14:	4b2d      	ldr	r3, [pc, #180]	; (8000bcc <SystemClock_Config+0xe0>)
 8000b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b18:	4a2c      	ldr	r2, [pc, #176]	; (8000bcc <SystemClock_Config+0xe0>)
 8000b1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b20:	4b2a      	ldr	r3, [pc, #168]	; (8000bcc <SystemClock_Config+0xe0>)
 8000b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b28:	60bb      	str	r3, [r7, #8]
 8000b2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	4b27      	ldr	r3, [pc, #156]	; (8000bd0 <SystemClock_Config+0xe4>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a26      	ldr	r2, [pc, #152]	; (8000bd0 <SystemClock_Config+0xe4>)
 8000b36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b3a:	6013      	str	r3, [r2, #0]
 8000b3c:	4b24      	ldr	r3, [pc, #144]	; (8000bd0 <SystemClock_Config+0xe4>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b44:	607b      	str	r3, [r7, #4]
 8000b46:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000b48:	2303      	movs	r3, #3
 8000b4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b52:	2301      	movs	r3, #1
 8000b54:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b56:	2310      	movs	r3, #16
 8000b58:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b64:	2308      	movs	r3, #8
 8000b66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b68:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000b6c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b72:	2307      	movs	r3, #7
 8000b74:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b76:	f107 0320 	add.w	r3, r7, #32
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f003 fea4 	bl	80048c8 <HAL_RCC_OscConfig>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000b86:	f000 f905 	bl	8000d94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b8a:	230f      	movs	r3, #15
 8000b8c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b92:	2300      	movs	r3, #0
 8000b94:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b96:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b9a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ba0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ba2:	f107 030c 	add.w	r3, r7, #12
 8000ba6:	2105      	movs	r1, #5
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f004 f905 	bl	8004db8 <HAL_RCC_ClockConfig>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000bb4:	f000 f8ee 	bl	8000d94 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2100      	movs	r1, #0
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	f004 f9e1 	bl	8004f84 <HAL_RCC_MCOConfig>
}
 8000bc2:	bf00      	nop
 8000bc4:	3750      	adds	r7, #80	; 0x50
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	40007000 	.word	0x40007000

08000bd4 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000bd8:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <MX_DCMI_Init+0x48>)
 8000bda:	4a11      	ldr	r2, [pc, #68]	; (8000c20 <MX_DCMI_Init+0x4c>)
 8000bdc:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000bde:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <MX_DCMI_Init+0x48>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000be4:	4b0d      	ldr	r3, [pc, #52]	; (8000c1c <MX_DCMI_Init+0x48>)
 8000be6:	2220      	movs	r2, #32
 8000be8:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8000bea:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <MX_DCMI_Init+0x48>)
 8000bec:	2280      	movs	r2, #128	; 0x80
 8000bee:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000bf0:	4b0a      	ldr	r3, [pc, #40]	; (8000c1c <MX_DCMI_Init+0x48>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000bf6:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <MX_DCMI_Init+0x48>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000bfc:	4b07      	ldr	r3, [pc, #28]	; (8000c1c <MX_DCMI_Init+0x48>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000c02:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <MX_DCMI_Init+0x48>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	621a      	str	r2, [r3, #32]
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000c08:	4804      	ldr	r0, [pc, #16]	; (8000c1c <MX_DCMI_Init+0x48>)
 8000c0a:	f000 fe13 	bl	8001834 <HAL_DCMI_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_DCMI_Init+0x44>
  {
    Error_Handler();
 8000c14:	f000 f8be 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	2000004c 	.word	0x2000004c
 8000c20:	50050000 	.word	0x50050000

08000c24 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c28:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <MX_I2C1_Init+0x50>)
 8000c2a:	4a13      	ldr	r2, [pc, #76]	; (8000c78 <MX_I2C1_Init+0x54>)
 8000c2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c2e:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <MX_I2C1_Init+0x50>)
 8000c30:	4a12      	ldr	r2, [pc, #72]	; (8000c7c <MX_I2C1_Init+0x58>)
 8000c32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c34:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <MX_I2C1_Init+0x50>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <MX_I2C1_Init+0x50>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c40:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <MX_I2C1_Init+0x50>)
 8000c42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c46:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c48:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <MX_I2C1_Init+0x50>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c4e:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <MX_I2C1_Init+0x50>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c54:	4b07      	ldr	r3, [pc, #28]	; (8000c74 <MX_I2C1_Init+0x50>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c5a:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <MX_I2C1_Init+0x50>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c60:	4804      	ldr	r0, [pc, #16]	; (8000c74 <MX_I2C1_Init+0x50>)
 8000c62:	f002 fd0b 	bl	800367c <HAL_I2C_Init>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c6c:	f000 f892 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	200000ec 	.word	0x200000ec
 8000c78:	40005400 	.word	0x40005400
 8000c7c:	000186a0 	.word	0x000186a0

08000c80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <MX_DMA_Init+0x3c>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a0b      	ldr	r2, [pc, #44]	; (8000cbc <MX_DMA_Init+0x3c>)
 8000c90:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <MX_DMA_Init+0x3c>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2105      	movs	r1, #5
 8000ca6:	2039      	movs	r0, #57	; 0x39
 8000ca8:	f000 fbb9 	bl	800141e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000cac:	2039      	movs	r0, #57	; 0x39
 8000cae:	f000 fbd2 	bl	8001456 <HAL_NVIC_EnableIRQ>

}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40023800 	.word	0x40023800

08000cc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08a      	sub	sp, #40	; 0x28
 8000cc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	60da      	str	r2, [r3, #12]
 8000cd4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	4b2c      	ldr	r3, [pc, #176]	; (8000d8c <MX_GPIO_Init+0xcc>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a2b      	ldr	r2, [pc, #172]	; (8000d8c <MX_GPIO_Init+0xcc>)
 8000ce0:	f043 0310 	orr.w	r3, r3, #16
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b29      	ldr	r3, [pc, #164]	; (8000d8c <MX_GPIO_Init+0xcc>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0310 	and.w	r3, r3, #16
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	4b25      	ldr	r3, [pc, #148]	; (8000d8c <MX_GPIO_Init+0xcc>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a24      	ldr	r2, [pc, #144]	; (8000d8c <MX_GPIO_Init+0xcc>)
 8000cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b22      	ldr	r3, [pc, #136]	; (8000d8c <MX_GPIO_Init+0xcc>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60bb      	str	r3, [r7, #8]
 8000d12:	4b1e      	ldr	r3, [pc, #120]	; (8000d8c <MX_GPIO_Init+0xcc>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	4a1d      	ldr	r2, [pc, #116]	; (8000d8c <MX_GPIO_Init+0xcc>)
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1e:	4b1b      	ldr	r3, [pc, #108]	; (8000d8c <MX_GPIO_Init+0xcc>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	60bb      	str	r3, [r7, #8]
 8000d28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	607b      	str	r3, [r7, #4]
 8000d2e:	4b17      	ldr	r3, [pc, #92]	; (8000d8c <MX_GPIO_Init+0xcc>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a16      	ldr	r2, [pc, #88]	; (8000d8c <MX_GPIO_Init+0xcc>)
 8000d34:	f043 0304 	orr.w	r3, r3, #4
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b14      	ldr	r3, [pc, #80]	; (8000d8c <MX_GPIO_Init+0xcc>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0304 	and.w	r3, r3, #4
 8000d42:	607b      	str	r3, [r7, #4]
 8000d44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	603b      	str	r3, [r7, #0]
 8000d4a:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <MX_GPIO_Init+0xcc>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	4a0f      	ldr	r2, [pc, #60]	; (8000d8c <MX_GPIO_Init+0xcc>)
 8000d50:	f043 0302 	orr.w	r3, r3, #2
 8000d54:	6313      	str	r3, [r2, #48]	; 0x30
 8000d56:	4b0d      	ldr	r3, [pc, #52]	; (8000d8c <MX_GPIO_Init+0xcc>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	f003 0302 	and.w	r3, r3, #2
 8000d5e:	603b      	str	r3, [r7, #0]
 8000d60:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d70:	2300      	movs	r3, #0
 8000d72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000d74:	2300      	movs	r3, #0
 8000d76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4804      	ldr	r0, [pc, #16]	; (8000d90 <MX_GPIO_Init+0xd0>)
 8000d80:	f002 fae0 	bl	8003344 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d84:	bf00      	nop
 8000d86:	3728      	adds	r7, #40	; 0x28
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	40020000 	.word	0x40020000

08000d94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d98:	b672      	cpsid	i
}
 8000d9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <Error_Handler+0x8>
	...

08000da0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	607b      	str	r3, [r7, #4]
 8000daa:	4b10      	ldr	r3, [pc, #64]	; (8000dec <HAL_MspInit+0x4c>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dae:	4a0f      	ldr	r2, [pc, #60]	; (8000dec <HAL_MspInit+0x4c>)
 8000db0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000db4:	6453      	str	r3, [r2, #68]	; 0x44
 8000db6:	4b0d      	ldr	r3, [pc, #52]	; (8000dec <HAL_MspInit+0x4c>)
 8000db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	603b      	str	r3, [r7, #0]
 8000dc6:	4b09      	ldr	r3, [pc, #36]	; (8000dec <HAL_MspInit+0x4c>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dca:	4a08      	ldr	r2, [pc, #32]	; (8000dec <HAL_MspInit+0x4c>)
 8000dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd2:	4b06      	ldr	r3, [pc, #24]	; (8000dec <HAL_MspInit+0x4c>)
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dda:	603b      	str	r3, [r7, #0]
 8000ddc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	40023800 	.word	0x40023800

08000df0 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b08c      	sub	sp, #48	; 0x30
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df8:	f107 031c 	add.w	r3, r7, #28
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a62      	ldr	r2, [pc, #392]	; (8000f98 <HAL_DCMI_MspInit+0x1a8>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	f040 80be 	bne.w	8000f90 <HAL_DCMI_MspInit+0x1a0>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000e14:	2300      	movs	r3, #0
 8000e16:	61bb      	str	r3, [r7, #24]
 8000e18:	4b60      	ldr	r3, [pc, #384]	; (8000f9c <HAL_DCMI_MspInit+0x1ac>)
 8000e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e1c:	4a5f      	ldr	r2, [pc, #380]	; (8000f9c <HAL_DCMI_MspInit+0x1ac>)
 8000e1e:	f043 0301 	orr.w	r3, r3, #1
 8000e22:	6353      	str	r3, [r2, #52]	; 0x34
 8000e24:	4b5d      	ldr	r3, [pc, #372]	; (8000f9c <HAL_DCMI_MspInit+0x1ac>)
 8000e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e28:	f003 0301 	and.w	r3, r3, #1
 8000e2c:	61bb      	str	r3, [r7, #24]
 8000e2e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]
 8000e34:	4b59      	ldr	r3, [pc, #356]	; (8000f9c <HAL_DCMI_MspInit+0x1ac>)
 8000e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e38:	4a58      	ldr	r2, [pc, #352]	; (8000f9c <HAL_DCMI_MspInit+0x1ac>)
 8000e3a:	f043 0310 	orr.w	r3, r3, #16
 8000e3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e40:	4b56      	ldr	r3, [pc, #344]	; (8000f9c <HAL_DCMI_MspInit+0x1ac>)
 8000e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e44:	f003 0310 	and.w	r3, r3, #16
 8000e48:	617b      	str	r3, [r7, #20]
 8000e4a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	613b      	str	r3, [r7, #16]
 8000e50:	4b52      	ldr	r3, [pc, #328]	; (8000f9c <HAL_DCMI_MspInit+0x1ac>)
 8000e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e54:	4a51      	ldr	r2, [pc, #324]	; (8000f9c <HAL_DCMI_MspInit+0x1ac>)
 8000e56:	f043 0301 	orr.w	r3, r3, #1
 8000e5a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5c:	4b4f      	ldr	r3, [pc, #316]	; (8000f9c <HAL_DCMI_MspInit+0x1ac>)
 8000e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e60:	f003 0301 	and.w	r3, r3, #1
 8000e64:	613b      	str	r3, [r7, #16]
 8000e66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	4b4b      	ldr	r3, [pc, #300]	; (8000f9c <HAL_DCMI_MspInit+0x1ac>)
 8000e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e70:	4a4a      	ldr	r2, [pc, #296]	; (8000f9c <HAL_DCMI_MspInit+0x1ac>)
 8000e72:	f043 0304 	orr.w	r3, r3, #4
 8000e76:	6313      	str	r3, [r2, #48]	; 0x30
 8000e78:	4b48      	ldr	r3, [pc, #288]	; (8000f9c <HAL_DCMI_MspInit+0x1ac>)
 8000e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7c:	f003 0304 	and.w	r3, r3, #4
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e84:	2300      	movs	r3, #0
 8000e86:	60bb      	str	r3, [r7, #8]
 8000e88:	4b44      	ldr	r3, [pc, #272]	; (8000f9c <HAL_DCMI_MspInit+0x1ac>)
 8000e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8c:	4a43      	ldr	r2, [pc, #268]	; (8000f9c <HAL_DCMI_MspInit+0x1ac>)
 8000e8e:	f043 0302 	orr.w	r3, r3, #2
 8000e92:	6313      	str	r3, [r2, #48]	; 0x30
 8000e94:	4b41      	ldr	r3, [pc, #260]	; (8000f9c <HAL_DCMI_MspInit+0x1ac>)
 8000e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e98:	f003 0302 	and.w	r3, r3, #2
 8000e9c:	60bb      	str	r3, [r7, #8]
 8000e9e:	68bb      	ldr	r3, [r7, #8]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PB6     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000ea0:	2370      	movs	r3, #112	; 0x70
 8000ea2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eac:	2303      	movs	r3, #3
 8000eae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000eb0:	230d      	movs	r3, #13
 8000eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000eb4:	f107 031c 	add.w	r3, r7, #28
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4839      	ldr	r0, [pc, #228]	; (8000fa0 <HAL_DCMI_MspInit+0x1b0>)
 8000ebc:	f002 fa42 	bl	8003344 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000ec0:	2350      	movs	r3, #80	; 0x50
 8000ec2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ecc:	2303      	movs	r3, #3
 8000ece:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000ed0:	230d      	movs	r3, #13
 8000ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed4:	f107 031c 	add.w	r3, r7, #28
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4832      	ldr	r0, [pc, #200]	; (8000fa4 <HAL_DCMI_MspInit+0x1b4>)
 8000edc:	f002 fa32 	bl	8003344 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000ee0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000ee4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000eea:	2302      	movs	r3, #2
 8000eec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000ef2:	230d      	movs	r3, #13
 8000ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ef6:	f107 031c 	add.w	r3, r7, #28
 8000efa:	4619      	mov	r1, r3
 8000efc:	482a      	ldr	r0, [pc, #168]	; (8000fa8 <HAL_DCMI_MspInit+0x1b8>)
 8000efe:	f002 fa21 	bl	8003344 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f02:	23c0      	movs	r3, #192	; 0xc0
 8000f04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f06:	2302      	movs	r3, #2
 8000f08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000f12:	230d      	movs	r3, #13
 8000f14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f16:	f107 031c 	add.w	r3, r7, #28
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4823      	ldr	r0, [pc, #140]	; (8000fac <HAL_DCMI_MspInit+0x1bc>)
 8000f1e:	f002 fa11 	bl	8003344 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 8000f22:	4b23      	ldr	r3, [pc, #140]	; (8000fb0 <HAL_DCMI_MspInit+0x1c0>)
 8000f24:	4a23      	ldr	r2, [pc, #140]	; (8000fb4 <HAL_DCMI_MspInit+0x1c4>)
 8000f26:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 8000f28:	4b21      	ldr	r3, [pc, #132]	; (8000fb0 <HAL_DCMI_MspInit+0x1c0>)
 8000f2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000f2e:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f30:	4b1f      	ldr	r3, [pc, #124]	; (8000fb0 <HAL_DCMI_MspInit+0x1c0>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f36:	4b1e      	ldr	r3, [pc, #120]	; (8000fb0 <HAL_DCMI_MspInit+0x1c0>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_DISABLE;
 8000f3c:	4b1c      	ldr	r3, [pc, #112]	; (8000fb0 <HAL_DCMI_MspInit+0x1c0>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f42:	4b1b      	ldr	r3, [pc, #108]	; (8000fb0 <HAL_DCMI_MspInit+0x1c0>)
 8000f44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f48:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f4a:	4b19      	ldr	r3, [pc, #100]	; (8000fb0 <HAL_DCMI_MspInit+0x1c0>)
 8000f4c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f50:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 8000f52:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <HAL_DCMI_MspInit+0x1c0>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 8000f58:	4b15      	ldr	r3, [pc, #84]	; (8000fb0 <HAL_DCMI_MspInit+0x1c0>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f5e:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <HAL_DCMI_MspInit+0x1c0>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8000f64:	4812      	ldr	r0, [pc, #72]	; (8000fb0 <HAL_DCMI_MspInit+0x1c0>)
 8000f66:	f000 fcd3 	bl	8001910 <HAL_DMA_Init>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <HAL_DCMI_MspInit+0x184>
    {
      Error_Handler();
 8000f70:	f7ff ff10 	bl	8000d94 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4a0e      	ldr	r2, [pc, #56]	; (8000fb0 <HAL_DCMI_MspInit+0x1c0>)
 8000f78:	639a      	str	r2, [r3, #56]	; 0x38
 8000f7a:	4a0d      	ldr	r2, [pc, #52]	; (8000fb0 <HAL_DCMI_MspInit+0x1c0>)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 5, 0);
 8000f80:	2200      	movs	r2, #0
 8000f82:	2105      	movs	r1, #5
 8000f84:	204e      	movs	r0, #78	; 0x4e
 8000f86:	f000 fa4a 	bl	800141e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8000f8a:	204e      	movs	r0, #78	; 0x4e
 8000f8c:	f000 fa63 	bl	8001456 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8000f90:	bf00      	nop
 8000f92:	3730      	adds	r7, #48	; 0x30
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	50050000 	.word	0x50050000
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	40020000 	.word	0x40020000
 8000fa8:	40020800 	.word	0x40020800
 8000fac:	40020400 	.word	0x40020400
 8000fb0:	2000008c 	.word	0x2000008c
 8000fb4:	40026428 	.word	0x40026428

08000fb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08a      	sub	sp, #40	; 0x28
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a19      	ldr	r2, [pc, #100]	; (800103c <HAL_I2C_MspInit+0x84>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d12c      	bne.n	8001034 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	613b      	str	r3, [r7, #16]
 8000fde:	4b18      	ldr	r3, [pc, #96]	; (8001040 <HAL_I2C_MspInit+0x88>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a17      	ldr	r2, [pc, #92]	; (8001040 <HAL_I2C_MspInit+0x88>)
 8000fe4:	f043 0302 	orr.w	r3, r3, #2
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b15      	ldr	r3, [pc, #84]	; (8001040 <HAL_I2C_MspInit+0x88>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0302 	and.w	r3, r3, #2
 8000ff2:	613b      	str	r3, [r7, #16]
 8000ff4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ff6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ffa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ffc:	2312      	movs	r3, #18
 8000ffe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001000:	2301      	movs	r3, #1
 8001002:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001004:	2303      	movs	r3, #3
 8001006:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001008:	2304      	movs	r3, #4
 800100a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	4619      	mov	r1, r3
 8001012:	480c      	ldr	r0, [pc, #48]	; (8001044 <HAL_I2C_MspInit+0x8c>)
 8001014:	f002 f996 	bl	8003344 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001018:	2300      	movs	r3, #0
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	4b08      	ldr	r3, [pc, #32]	; (8001040 <HAL_I2C_MspInit+0x88>)
 800101e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001020:	4a07      	ldr	r2, [pc, #28]	; (8001040 <HAL_I2C_MspInit+0x88>)
 8001022:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001026:	6413      	str	r3, [r2, #64]	; 0x40
 8001028:	4b05      	ldr	r3, [pc, #20]	; (8001040 <HAL_I2C_MspInit+0x88>)
 800102a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001034:	bf00      	nop
 8001036:	3728      	adds	r7, #40	; 0x28
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40005400 	.word	0x40005400
 8001040:	40023800 	.word	0x40023800
 8001044:	40020400 	.word	0x40020400

08001048 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800104c:	e7fe      	b.n	800104c <NMI_Handler+0x4>

0800104e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800104e:	b480      	push	{r7}
 8001050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001052:	e7fe      	b.n	8001052 <HardFault_Handler+0x4>

08001054 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001058:	e7fe      	b.n	8001058 <MemManage_Handler+0x4>

0800105a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800105e:	e7fe      	b.n	800105e <BusFault_Handler+0x4>

08001060 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001064:	e7fe      	b.n	8001064 <UsageFault_Handler+0x4>

08001066 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001094:	f000 f8a4 	bl	80011e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}

0800109c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 80010a0:	4802      	ldr	r0, [pc, #8]	; (80010ac <DMA2_Stream1_IRQHandler+0x10>)
 80010a2:	f000 fd5d 	bl	8001b60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	2000008c 	.word	0x2000008c

080010b0 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 80010b4:	4802      	ldr	r0, [pc, #8]	; (80010c0 <DCMI_IRQHandler+0x10>)
 80010b6:	f000 fa89 	bl	80015cc <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	2000004c 	.word	0x2000004c

080010c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010c8:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <SystemInit+0x20>)
 80010ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ce:	4a05      	ldr	r2, [pc, #20]	; (80010e4 <SystemInit+0x20>)
 80010d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80010e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001120 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010ec:	480d      	ldr	r0, [pc, #52]	; (8001124 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010ee:	490e      	ldr	r1, [pc, #56]	; (8001128 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010f0:	4a0e      	ldr	r2, [pc, #56]	; (800112c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010f4:	e002      	b.n	80010fc <LoopCopyDataInit>

080010f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010fa:	3304      	adds	r3, #4

080010fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001100:	d3f9      	bcc.n	80010f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001102:	4a0b      	ldr	r2, [pc, #44]	; (8001130 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001104:	4c0b      	ldr	r4, [pc, #44]	; (8001134 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001106:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001108:	e001      	b.n	800110e <LoopFillZerobss>

0800110a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800110a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800110c:	3204      	adds	r2, #4

0800110e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800110e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001110:	d3fb      	bcc.n	800110a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001112:	f7ff ffd7 	bl	80010c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001116:	f004 f8cb 	bl	80052b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800111a:	f7ff fcb9 	bl	8000a90 <main>
  bx  lr    
 800111e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001120:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001124:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001128:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 800112c:	080053b4 	.word	0x080053b4
  ldr r2, =_sbss
 8001130:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001134:	20004cd4 	.word	0x20004cd4

08001138 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001138:	e7fe      	b.n	8001138 <ADC_IRQHandler>
	...

0800113c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001140:	4b0e      	ldr	r3, [pc, #56]	; (800117c <HAL_Init+0x40>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a0d      	ldr	r2, [pc, #52]	; (800117c <HAL_Init+0x40>)
 8001146:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800114a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800114c:	4b0b      	ldr	r3, [pc, #44]	; (800117c <HAL_Init+0x40>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a0a      	ldr	r2, [pc, #40]	; (800117c <HAL_Init+0x40>)
 8001152:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001156:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001158:	4b08      	ldr	r3, [pc, #32]	; (800117c <HAL_Init+0x40>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a07      	ldr	r2, [pc, #28]	; (800117c <HAL_Init+0x40>)
 800115e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001162:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001164:	2003      	movs	r0, #3
 8001166:	f000 f94f 	bl	8001408 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800116a:	200f      	movs	r0, #15
 800116c:	f000 f808 	bl	8001180 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001170:	f7ff fe16 	bl	8000da0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40023c00 	.word	0x40023c00

08001180 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001188:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <HAL_InitTick+0x54>)
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <HAL_InitTick+0x58>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	4619      	mov	r1, r3
 8001192:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001196:	fbb3 f3f1 	udiv	r3, r3, r1
 800119a:	fbb2 f3f3 	udiv	r3, r2, r3
 800119e:	4618      	mov	r0, r3
 80011a0:	f000 f967 	bl	8001472 <HAL_SYSTICK_Config>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e00e      	b.n	80011cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2b0f      	cmp	r3, #15
 80011b2:	d80a      	bhi.n	80011ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011b4:	2200      	movs	r2, #0
 80011b6:	6879      	ldr	r1, [r7, #4]
 80011b8:	f04f 30ff 	mov.w	r0, #4294967295
 80011bc:	f000 f92f 	bl	800141e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011c0:	4a06      	ldr	r2, [pc, #24]	; (80011dc <HAL_InitTick+0x5c>)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011c6:	2300      	movs	r3, #0
 80011c8:	e000      	b.n	80011cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	2000000c 	.word	0x2000000c
 80011d8:	20000014 	.word	0x20000014
 80011dc:	20000010 	.word	0x20000010

080011e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <HAL_IncTick+0x20>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	461a      	mov	r2, r3
 80011ea:	4b06      	ldr	r3, [pc, #24]	; (8001204 <HAL_IncTick+0x24>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4413      	add	r3, r2
 80011f0:	4a04      	ldr	r2, [pc, #16]	; (8001204 <HAL_IncTick+0x24>)
 80011f2:	6013      	str	r3, [r2, #0]
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	20000014 	.word	0x20000014
 8001204:	20004cd0 	.word	0x20004cd0

08001208 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  return uwTick;
 800120c:	4b03      	ldr	r3, [pc, #12]	; (800121c <HAL_GetTick+0x14>)
 800120e:	681b      	ldr	r3, [r3, #0]
}
 8001210:	4618      	mov	r0, r3
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	20004cd0 	.word	0x20004cd0

08001220 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001228:	f7ff ffee 	bl	8001208 <HAL_GetTick>
 800122c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001238:	d005      	beq.n	8001246 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800123a:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <HAL_Delay+0x44>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	461a      	mov	r2, r3
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	4413      	add	r3, r2
 8001244:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001246:	bf00      	nop
 8001248:	f7ff ffde 	bl	8001208 <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	429a      	cmp	r2, r3
 8001256:	d8f7      	bhi.n	8001248 <HAL_Delay+0x28>
  {
  }
}
 8001258:	bf00      	nop
 800125a:	bf00      	nop
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20000014 	.word	0x20000014

08001268 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f003 0307 	and.w	r3, r3, #7
 8001276:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001278:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <__NVIC_SetPriorityGrouping+0x44>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800127e:	68ba      	ldr	r2, [r7, #8]
 8001280:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001284:	4013      	ands	r3, r2
 8001286:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001290:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001298:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800129a:	4a04      	ldr	r2, [pc, #16]	; (80012ac <__NVIC_SetPriorityGrouping+0x44>)
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	60d3      	str	r3, [r2, #12]
}
 80012a0:	bf00      	nop
 80012a2:	3714      	adds	r7, #20
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012b4:	4b04      	ldr	r3, [pc, #16]	; (80012c8 <__NVIC_GetPriorityGrouping+0x18>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	0a1b      	lsrs	r3, r3, #8
 80012ba:	f003 0307 	and.w	r3, r3, #7
}
 80012be:	4618      	mov	r0, r3
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	db0b      	blt.n	80012f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	f003 021f 	and.w	r2, r3, #31
 80012e4:	4907      	ldr	r1, [pc, #28]	; (8001304 <__NVIC_EnableIRQ+0x38>)
 80012e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ea:	095b      	lsrs	r3, r3, #5
 80012ec:	2001      	movs	r0, #1
 80012ee:	fa00 f202 	lsl.w	r2, r0, r2
 80012f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	e000e100 	.word	0xe000e100

08001308 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	6039      	str	r1, [r7, #0]
 8001312:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001318:	2b00      	cmp	r3, #0
 800131a:	db0a      	blt.n	8001332 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	b2da      	uxtb	r2, r3
 8001320:	490c      	ldr	r1, [pc, #48]	; (8001354 <__NVIC_SetPriority+0x4c>)
 8001322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001326:	0112      	lsls	r2, r2, #4
 8001328:	b2d2      	uxtb	r2, r2
 800132a:	440b      	add	r3, r1
 800132c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001330:	e00a      	b.n	8001348 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	b2da      	uxtb	r2, r3
 8001336:	4908      	ldr	r1, [pc, #32]	; (8001358 <__NVIC_SetPriority+0x50>)
 8001338:	79fb      	ldrb	r3, [r7, #7]
 800133a:	f003 030f 	and.w	r3, r3, #15
 800133e:	3b04      	subs	r3, #4
 8001340:	0112      	lsls	r2, r2, #4
 8001342:	b2d2      	uxtb	r2, r2
 8001344:	440b      	add	r3, r1
 8001346:	761a      	strb	r2, [r3, #24]
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	e000e100 	.word	0xe000e100
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800135c:	b480      	push	{r7}
 800135e:	b089      	sub	sp, #36	; 0x24
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f003 0307 	and.w	r3, r3, #7
 800136e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	f1c3 0307 	rsb	r3, r3, #7
 8001376:	2b04      	cmp	r3, #4
 8001378:	bf28      	it	cs
 800137a:	2304      	movcs	r3, #4
 800137c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	3304      	adds	r3, #4
 8001382:	2b06      	cmp	r3, #6
 8001384:	d902      	bls.n	800138c <NVIC_EncodePriority+0x30>
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3b03      	subs	r3, #3
 800138a:	e000      	b.n	800138e <NVIC_EncodePriority+0x32>
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001390:	f04f 32ff 	mov.w	r2, #4294967295
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43da      	mvns	r2, r3
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	401a      	ands	r2, r3
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013a4:	f04f 31ff 	mov.w	r1, #4294967295
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	fa01 f303 	lsl.w	r3, r1, r3
 80013ae:	43d9      	mvns	r1, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b4:	4313      	orrs	r3, r2
         );
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3724      	adds	r7, #36	; 0x24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
	...

080013c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3b01      	subs	r3, #1
 80013d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013d4:	d301      	bcc.n	80013da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013d6:	2301      	movs	r3, #1
 80013d8:	e00f      	b.n	80013fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013da:	4a0a      	ldr	r2, [pc, #40]	; (8001404 <SysTick_Config+0x40>)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3b01      	subs	r3, #1
 80013e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013e2:	210f      	movs	r1, #15
 80013e4:	f04f 30ff 	mov.w	r0, #4294967295
 80013e8:	f7ff ff8e 	bl	8001308 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013ec:	4b05      	ldr	r3, [pc, #20]	; (8001404 <SysTick_Config+0x40>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013f2:	4b04      	ldr	r3, [pc, #16]	; (8001404 <SysTick_Config+0x40>)
 80013f4:	2207      	movs	r2, #7
 80013f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	e000e010 	.word	0xe000e010

08001408 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f7ff ff29 	bl	8001268 <__NVIC_SetPriorityGrouping>
}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800141e:	b580      	push	{r7, lr}
 8001420:	b086      	sub	sp, #24
 8001422:	af00      	add	r7, sp, #0
 8001424:	4603      	mov	r3, r0
 8001426:	60b9      	str	r1, [r7, #8]
 8001428:	607a      	str	r2, [r7, #4]
 800142a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001430:	f7ff ff3e 	bl	80012b0 <__NVIC_GetPriorityGrouping>
 8001434:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	68b9      	ldr	r1, [r7, #8]
 800143a:	6978      	ldr	r0, [r7, #20]
 800143c:	f7ff ff8e 	bl	800135c <NVIC_EncodePriority>
 8001440:	4602      	mov	r2, r0
 8001442:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001446:	4611      	mov	r1, r2
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff ff5d 	bl	8001308 <__NVIC_SetPriority>
}
 800144e:	bf00      	nop
 8001450:	3718      	adds	r7, #24
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b082      	sub	sp, #8
 800145a:	af00      	add	r7, sp, #0
 800145c:	4603      	mov	r3, r0
 800145e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff ff31 	bl	80012cc <__NVIC_EnableIRQ>
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b082      	sub	sp, #8
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7ff ffa2 	bl	80013c4 <SysTick_Config>
 8001480:	4603      	mov	r3, r0
}
 8001482:	4618      	mov	r0, r3
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
	...

0800148c <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b088      	sub	sp, #32
 8001490:	af02      	add	r7, sp, #8
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	607a      	str	r2, [r7, #4]
 8001498:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0U;
 800149a:	2300      	movs	r3, #0
 800149c:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d101      	bne.n	80014ac <HAL_DCMI_Start_DMA+0x20>
 80014a8:	2302      	movs	r3, #2
 80014aa:	e086      	b.n	80015ba <HAL_DCMI_Start_DMA+0x12e>
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	2201      	movs	r2, #1
 80014b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	2202      	movs	r2, #2
 80014b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  
  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80014ca:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f022 0202 	bic.w	r2, r2, #2
 80014da:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	6819      	ldr	r1, [r3, #0]
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	68ba      	ldr	r2, [r7, #8]
 80014e8:	430a      	orrs	r2, r1
 80014ea:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014f0:	4a34      	ldr	r2, [pc, #208]	; (80015c4 <HAL_DCMI_Start_DMA+0x138>)
 80014f2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014f8:	4a33      	ldr	r2, [pc, #204]	; (80015c8 <HAL_DCMI_Start_DMA+0x13c>)
 80014fa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001500:	2200      	movs	r2, #0
 8001502:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Reset transfer counters value */ 
  hdcmi->XferCount = 0U;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2200      	movs	r2, #0
 8001508:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi->XferTransferNumber = 0U;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	2200      	movs	r2, #0
 800150e:	631a      	str	r2, [r3, #48]	; 0x30

  if(Length <= 0xFFFFU)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001516:	d20a      	bcs.n	800152e <HAL_DCMI_Start_DMA+0xa2>
  {
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	3328      	adds	r3, #40	; 0x28
 8001522:	4619      	mov	r1, r3
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	f000 faa0 	bl	8001a6c <HAL_DMA_Start_IT>
 800152c:	e038      	b.n	80015a0 <HAL_DCMI_Start_DMA+0x114>
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001532:	4a24      	ldr	r2, [pc, #144]	; (80015c4 <HAL_DCMI_Start_DMA+0x138>)
 8001534:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1U;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	2201      	movs	r2, #1
 800153a:	629a      	str	r2, [r3, #40]	; 0x28
    hdcmi->XferSize = Length;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	683a      	ldr	r2, [r7, #0]
 8001540:	62da      	str	r2, [r3, #44]	; 0x2c
    hdcmi->pBuffPtr = pData;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	635a      	str	r2, [r3, #52]	; 0x34

    /* Get the number of buffer */
    while(hdcmi->XferSize > 0xFFFFU)
 8001548:	e009      	b.n	800155e <HAL_DCMI_Start_DMA+0xd2>
    {
      hdcmi->XferSize = (hdcmi->XferSize/2U);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800154e:	085a      	lsrs	r2, r3, #1
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	62da      	str	r2, [r3, #44]	; 0x2c
      hdcmi->XferCount = hdcmi->XferCount*2U;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001558:	005a      	lsls	r2, r3, #1
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	629a      	str	r2, [r3, #40]	; 0x28
    while(hdcmi->XferSize > 0xFFFFU)
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001562:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001566:	d2f0      	bcs.n	800154a <HAL_DCMI_Start_DMA+0xbe>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156c:	1e9a      	subs	r2, r3, #2
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	629a      	str	r2, [r3, #40]	; 0x28
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	631a      	str	r2, [r3, #48]	; 0x30

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U*hdcmi->XferSize));
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	4413      	add	r3, r2
 8001584:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	3328      	adds	r3, #40	; 0x28
 8001590:	4619      	mov	r1, r3
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	f000 fd4a 	bl	8002034 <HAL_DMAEx_MultiBufferStart_IT>
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f042 0201 	orr.w	r2, r2, #1
 80015ae:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2200      	movs	r2, #0
 80015b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Return function status */
  return HAL_OK;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3718      	adds	r7, #24
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	080016dd 	.word	0x080016dd
 80015c8:	08001807 	.word	0x08001807

080015cc <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	691b      	ldr	r3, [r3, #16]
 80015da:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f003 0304 	and.w	r3, r3, #4
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d016      	beq.n	8001614 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2204      	movs	r2, #4
 80015ec:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015f2:	f043 0202 	orr.w	r2, r3, #2
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2204      	movs	r2, #4
 80015fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001606:	4a2f      	ldr	r2, [pc, #188]	; (80016c4 <HAL_DCMI_IRQHandler+0xf8>)
 8001608:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800160e:	4618      	mov	r0, r3
 8001610:	f000 fa84 	bl	8001b1c <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d016      	beq.n	800164c <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2202      	movs	r2, #2
 8001624:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800162a:	f043 0201 	orr.w	r2, r3, #1
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2204      	movs	r2, #4
 8001636:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800163e:	4a21      	ldr	r2, [pc, #132]	; (80016c4 <HAL_DCMI_IRQHandler+0xf8>)
 8001640:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001646:	4618      	mov	r0, r3
 8001648:	f000 fa68 	bl	8001b1c <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f003 0310 	and.w	r3, r3, #16
 8001652:	2b00      	cmp	r3, #0
 8001654:	d006      	beq.n	8001664 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2210      	movs	r2, #16
 800165c:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else  
    HAL_DCMI_LineEventCallback(hdcmi);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f7ff f9de 	bl	8000a20 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */     
  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f003 0308 	and.w	r3, r3, #8
 800166a:	2b00      	cmp	r3, #0
 800166c:	d006      	beq.n	800167c <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2208      	movs	r2, #8
 8001674:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else  
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f7ff f9ee 	bl	8000a58 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */ 
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	2b00      	cmp	r3, #0
 8001684:	d019      	beq.n	80016ba <HAL_DCMI_IRQHandler+0xee>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0302 	and.w	r3, r3, #2
 8001690:	2b02      	cmp	r3, #2
 8001692:	d107      	bne.n	80016a4 <HAL_DCMI_IRQHandler+0xd8>
    { 
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	68da      	ldr	r2, [r3, #12]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f022 021e 	bic.w	r2, r2, #30
 80016a2:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	68da      	ldr	r2, [r3, #12]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f022 0201 	bic.w	r2, r2, #1
 80016b2:	60da      	str	r2, [r3, #12]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else  
    HAL_DCMI_FrameEventCallback(hdcmi);
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f7ff f98b 	bl	80009d0 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */      
  }
}
 80016ba:	bf00      	nop
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	08001807 	.word	0x08001807

080016c8 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80016e4:	2300      	movs	r3, #0
 80016e6:	60fb      	str	r3, [r7, #12]
 
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ec:	60bb      	str	r3, [r7, #8]
  
  if(hdcmi->XferCount != 0U)
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d043      	beq.n	800177e <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001702:	60fb      	str	r3, [r7, #12]
    if(((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001708:	f003 0301 	and.w	r3, r3, #1
 800170c:	2b00      	cmp	r3, #0
 800170e:	d118      	bne.n	8001742 <DCMI_DMAXferCplt+0x66>
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d015      	beq.n	8001742 <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY0);
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001728:	00da      	lsls	r2, r3, #3
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	4413      	add	r3, r2
 800172e:	2200      	movs	r2, #0
 8001730:	4619      	mov	r1, r3
 8001732:	f001 fdc7 	bl	80032c4 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173a:	1e5a      	subs	r2, r3, #1
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	629a      	str	r2, [r3, #40]	; 0x28
 8001740:	e044      	b.n	80017cc <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d13c      	bne.n	80017cc <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	691b      	ldr	r3, [r3, #16]
 800175a:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY1);
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001764:	00da      	lsls	r2, r3, #3
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	4413      	add	r3, r2
 800176a:	2201      	movs	r2, #1
 800176c:	4619      	mov	r1, r3
 800176e:	f001 fda9 	bl	80032c4 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001776:	1e5a      	subs	r2, r3, #1
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	629a      	str	r2, [r3, #40]	; 0x28
 800177c:	e026      	b.n	80017cc <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0U)
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d006      	beq.n	800179c <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	68ba      	ldr	r2, [r7, #8]
 8001796:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001798:	60da      	str	r2, [r3, #12]
 800179a:	e017      	b.n	80017cc <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d10f      	bne.n	80017cc <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017b0:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4U*hdcmi->XferSize));
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b6:	0099      	lsls	r1, r3, #2
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	440a      	add	r2, r1
 80017c2:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	629a      	str	r2, [r3, #40]	; 0x28
  }
  
  /* Check if the frame is transferred */
  if(hdcmi->XferCount == hdcmi->XferTransferNumber)
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d112      	bne.n	80017fe <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	68da      	ldr	r2, [r3, #12]
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f042 0201 	orr.w	r2, r2, #1
 80017e6:	60da      	str	r2, [r3, #12]
    
    /* When snapshot mode, set dcmi state to ready */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d103      	bne.n	80017fe <DCMI_DMAXferCplt+0x122>
    {  
      hdcmi->State= HAL_DCMI_STATE_READY;
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	2201      	movs	r2, #1
 80017fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }
}
 80017fe:	bf00      	nop
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b084      	sub	sp, #16
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001812:	60fb      	str	r3, [r7, #12]
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800181a:	2b02      	cmp	r3, #2
 800181c:	d003      	beq.n	8001826 <DCMI_DMAError+0x20>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2201      	movs	r2, #1
 8001822:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
  HAL_DCMI_ErrorCallback(hdcmi);
 8001826:	68f8      	ldr	r0, [r7, #12]
 8001828:	f7ff ff4e 	bl	80016c8 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */   

}
 800182c:	bf00      	nop
 800182e:	3710      	adds	r7, #16
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e05f      	b.n	8001906 <HAL_DCMI_Init+0xd2>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800184c:	b2db      	uxtb	r3, r3
 800184e:	2b00      	cmp	r3, #0
 8001850:	d109      	bne.n	8001866 <HAL_DCMI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f7ff fac8 	bl	8000df0 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
    HAL_DCMI_MspInit(hdcmi);
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f7ff fac5 	bl	8000df0 <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2202      	movs	r2, #2
 800186a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	6812      	ldr	r2, [r2, #0]
 8001878:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800187c:	f023 0308 	bic.w	r3, r3, #8
 8001880:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6819      	ldr	r1, [r3, #0]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685a      	ldr	r2, [r3, #4]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	695b      	ldr	r3, [r3, #20]
 8001890:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001896:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	691b      	ldr	r3, [r3, #16]
 800189c:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80018a2:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80018ae:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	430a      	orrs	r2, r1
 80018b6:	601a      	str	r2, [r3, #0]
                                     | hdcmi->Init.ByteSelectMode |\
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
                                     hdcmi->Init.LineSelectStart
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	2b10      	cmp	r3, #16
 80018be:	d112      	bne.n	80018e6 <HAL_DCMI_Init+0xb2>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	7f1b      	ldrb	r3, [r3, #28]
 80018c4:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	7f5b      	ldrb	r3, [r3, #29]
 80018ca:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80018cc:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	7f9b      	ldrb	r3, [r3, #30]
 80018d2:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 80018d4:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	7fdb      	ldrb	r3, [r3, #31]
 80018dc:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 80018e2:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80018e4:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	68da      	ldr	r2, [r3, #12]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f042 021e 	orr.w	r2, r2, #30
 80018f4:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  return HAL_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
	...

08001910 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800191c:	f7ff fc74 	bl	8001208 <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d101      	bne.n	800192c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e099      	b.n	8001a60 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2202      	movs	r2, #2
 8001930:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f022 0201 	bic.w	r2, r2, #1
 800194a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800194c:	e00f      	b.n	800196e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800194e:	f7ff fc5b 	bl	8001208 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b05      	cmp	r3, #5
 800195a:	d908      	bls.n	800196e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2220      	movs	r2, #32
 8001960:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2203      	movs	r2, #3
 8001966:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e078      	b.n	8001a60 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1e8      	bne.n	800194e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001984:	697a      	ldr	r2, [r7, #20]
 8001986:	4b38      	ldr	r3, [pc, #224]	; (8001a68 <HAL_DMA_Init+0x158>)
 8001988:	4013      	ands	r3, r2
 800198a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685a      	ldr	r2, [r3, #4]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800199a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	691b      	ldr	r3, [r3, #16]
 80019a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a1b      	ldr	r3, [r3, #32]
 80019b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019ba:	697a      	ldr	r2, [r7, #20]
 80019bc:	4313      	orrs	r3, r2
 80019be:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c4:	2b04      	cmp	r3, #4
 80019c6:	d107      	bne.n	80019d8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d0:	4313      	orrs	r3, r2
 80019d2:	697a      	ldr	r2, [r7, #20]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	697a      	ldr	r2, [r7, #20]
 80019de:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	f023 0307 	bic.w	r3, r3, #7
 80019ee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f4:	697a      	ldr	r2, [r7, #20]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fe:	2b04      	cmp	r3, #4
 8001a00:	d117      	bne.n	8001a32 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a06:	697a      	ldr	r2, [r7, #20]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d00e      	beq.n	8001a32 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f000 fa91 	bl	8001f3c <DMA_CheckFifoParam>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d008      	beq.n	8001a32 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2240      	movs	r2, #64	; 0x40
 8001a24:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e016      	b.n	8001a60 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	697a      	ldr	r2, [r7, #20]
 8001a38:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f000 fa48 	bl	8001ed0 <DMA_CalcBaseAndBitshift>
 8001a40:	4603      	mov	r3, r0
 8001a42:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a48:	223f      	movs	r2, #63	; 0x3f
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3718      	adds	r7, #24
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	f010803f 	.word	0xf010803f

08001a6c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
 8001a78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a82:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d101      	bne.n	8001a92 <HAL_DMA_Start_IT+0x26>
 8001a8e:	2302      	movs	r3, #2
 8001a90:	e040      	b.n	8001b14 <HAL_DMA_Start_IT+0xa8>
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2201      	movs	r2, #1
 8001a96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d12f      	bne.n	8001b06 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2202      	movs	r2, #2
 8001aaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	68b9      	ldr	r1, [r7, #8]
 8001aba:	68f8      	ldr	r0, [r7, #12]
 8001abc:	f000 f9da 	bl	8001e74 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ac4:	223f      	movs	r2, #63	; 0x3f
 8001ac6:	409a      	lsls	r2, r3
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f042 0216 	orr.w	r2, r2, #22
 8001ada:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d007      	beq.n	8001af4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f042 0208 	orr.w	r2, r2, #8
 8001af2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f042 0201 	orr.w	r2, r2, #1
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	e005      	b.n	8001b12 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b12:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3718      	adds	r7, #24
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d004      	beq.n	8001b3a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2280      	movs	r2, #128	; 0x80
 8001b34:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e00c      	b.n	8001b54 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2205      	movs	r2, #5
 8001b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f022 0201 	bic.w	r2, r2, #1
 8001b50:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001b6c:	4b8e      	ldr	r3, [pc, #568]	; (8001da8 <HAL_DMA_IRQHandler+0x248>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a8e      	ldr	r2, [pc, #568]	; (8001dac <HAL_DMA_IRQHandler+0x24c>)
 8001b72:	fba2 2303 	umull	r2, r3, r2, r3
 8001b76:	0a9b      	lsrs	r3, r3, #10
 8001b78:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b7e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b8a:	2208      	movs	r2, #8
 8001b8c:	409a      	lsls	r2, r3
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	4013      	ands	r3, r2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d01a      	beq.n	8001bcc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0304 	and.w	r3, r3, #4
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d013      	beq.n	8001bcc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f022 0204 	bic.w	r2, r2, #4
 8001bb2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bb8:	2208      	movs	r2, #8
 8001bba:	409a      	lsls	r2, r3
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bc4:	f043 0201 	orr.w	r2, r3, #1
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	409a      	lsls	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d012      	beq.n	8001c02 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d00b      	beq.n	8001c02 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bee:	2201      	movs	r2, #1
 8001bf0:	409a      	lsls	r2, r3
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bfa:	f043 0202 	orr.w	r2, r3, #2
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c06:	2204      	movs	r2, #4
 8001c08:	409a      	lsls	r2, r3
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d012      	beq.n	8001c38 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d00b      	beq.n	8001c38 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c24:	2204      	movs	r2, #4
 8001c26:	409a      	lsls	r2, r3
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c30:	f043 0204 	orr.w	r2, r3, #4
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c3c:	2210      	movs	r2, #16
 8001c3e:	409a      	lsls	r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	4013      	ands	r3, r2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d043      	beq.n	8001cd0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0308 	and.w	r3, r3, #8
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d03c      	beq.n	8001cd0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c5a:	2210      	movs	r2, #16
 8001c5c:	409a      	lsls	r2, r3
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d018      	beq.n	8001ca2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d108      	bne.n	8001c90 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d024      	beq.n	8001cd0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	4798      	blx	r3
 8001c8e:	e01f      	b.n	8001cd0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d01b      	beq.n	8001cd0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	4798      	blx	r3
 8001ca0:	e016      	b.n	8001cd0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d107      	bne.n	8001cc0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f022 0208 	bic.w	r2, r2, #8
 8001cbe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d003      	beq.n	8001cd0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd4:	2220      	movs	r2, #32
 8001cd6:	409a      	lsls	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f000 808f 	beq.w	8001e00 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0310 	and.w	r3, r3, #16
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	f000 8087 	beq.w	8001e00 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf6:	2220      	movs	r2, #32
 8001cf8:	409a      	lsls	r2, r3
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b05      	cmp	r3, #5
 8001d08:	d136      	bne.n	8001d78 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f022 0216 	bic.w	r2, r2, #22
 8001d18:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	695a      	ldr	r2, [r3, #20]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d28:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d103      	bne.n	8001d3a <HAL_DMA_IRQHandler+0x1da>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d007      	beq.n	8001d4a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f022 0208 	bic.w	r2, r2, #8
 8001d48:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d4e:	223f      	movs	r2, #63	; 0x3f
 8001d50:	409a      	lsls	r2, r3
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d07e      	beq.n	8001e6c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	4798      	blx	r3
        }
        return;
 8001d76:	e079      	b.n	8001e6c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d01d      	beq.n	8001dc2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d10d      	bne.n	8001db0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d031      	beq.n	8001e00 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	4798      	blx	r3
 8001da4:	e02c      	b.n	8001e00 <HAL_DMA_IRQHandler+0x2a0>
 8001da6:	bf00      	nop
 8001da8:	2000000c 	.word	0x2000000c
 8001dac:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d023      	beq.n	8001e00 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	4798      	blx	r3
 8001dc0:	e01e      	b.n	8001e00 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d10f      	bne.n	8001df0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f022 0210 	bic.w	r2, r2, #16
 8001dde:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d003      	beq.n	8001e00 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d032      	beq.n	8001e6e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d022      	beq.n	8001e5a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2205      	movs	r2, #5
 8001e18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f022 0201 	bic.w	r2, r2, #1
 8001e2a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	60bb      	str	r3, [r7, #8]
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d307      	bcc.n	8001e48 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1f2      	bne.n	8001e2c <HAL_DMA_IRQHandler+0x2cc>
 8001e46:	e000      	b.n	8001e4a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001e48:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d005      	beq.n	8001e6e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	4798      	blx	r3
 8001e6a:	e000      	b.n	8001e6e <HAL_DMA_IRQHandler+0x30e>
        return;
 8001e6c:	bf00      	nop
    }
  }
}
 8001e6e:	3718      	adds	r7, #24
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
 8001e80:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e90:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	2b40      	cmp	r3, #64	; 0x40
 8001ea0:	d108      	bne.n	8001eb4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68ba      	ldr	r2, [r7, #8]
 8001eb0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001eb2:	e007      	b.n	8001ec4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68ba      	ldr	r2, [r7, #8]
 8001eba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	60da      	str	r2, [r3, #12]
}
 8001ec4:	bf00      	nop
 8001ec6:	3714      	adds	r7, #20
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	3b10      	subs	r3, #16
 8001ee0:	4a14      	ldr	r2, [pc, #80]	; (8001f34 <DMA_CalcBaseAndBitshift+0x64>)
 8001ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee6:	091b      	lsrs	r3, r3, #4
 8001ee8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001eea:	4a13      	ldr	r2, [pc, #76]	; (8001f38 <DMA_CalcBaseAndBitshift+0x68>)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	4413      	add	r3, r2
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2b03      	cmp	r3, #3
 8001efc:	d909      	bls.n	8001f12 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f06:	f023 0303 	bic.w	r3, r3, #3
 8001f0a:	1d1a      	adds	r2, r3, #4
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	659a      	str	r2, [r3, #88]	; 0x58
 8001f10:	e007      	b.n	8001f22 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f1a:	f023 0303 	bic.w	r3, r3, #3
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3714      	adds	r7, #20
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	aaaaaaab 	.word	0xaaaaaaab
 8001f38:	0800539c 	.word	0x0800539c

08001f3c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f44:	2300      	movs	r3, #0
 8001f46:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d11f      	bne.n	8001f96 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	2b03      	cmp	r3, #3
 8001f5a:	d856      	bhi.n	800200a <DMA_CheckFifoParam+0xce>
 8001f5c:	a201      	add	r2, pc, #4	; (adr r2, 8001f64 <DMA_CheckFifoParam+0x28>)
 8001f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f62:	bf00      	nop
 8001f64:	08001f75 	.word	0x08001f75
 8001f68:	08001f87 	.word	0x08001f87
 8001f6c:	08001f75 	.word	0x08001f75
 8001f70:	0800200b 	.word	0x0800200b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d046      	beq.n	800200e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f84:	e043      	b.n	800200e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f8a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f8e:	d140      	bne.n	8002012 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f94:	e03d      	b.n	8002012 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f9e:	d121      	bne.n	8001fe4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	2b03      	cmp	r3, #3
 8001fa4:	d837      	bhi.n	8002016 <DMA_CheckFifoParam+0xda>
 8001fa6:	a201      	add	r2, pc, #4	; (adr r2, 8001fac <DMA_CheckFifoParam+0x70>)
 8001fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fac:	08001fbd 	.word	0x08001fbd
 8001fb0:	08001fc3 	.word	0x08001fc3
 8001fb4:	08001fbd 	.word	0x08001fbd
 8001fb8:	08001fd5 	.word	0x08001fd5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	73fb      	strb	r3, [r7, #15]
      break;
 8001fc0:	e030      	b.n	8002024 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d025      	beq.n	800201a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fd2:	e022      	b.n	800201a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001fdc:	d11f      	bne.n	800201e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001fe2:	e01c      	b.n	800201e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d903      	bls.n	8001ff2 <DMA_CheckFifoParam+0xb6>
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	2b03      	cmp	r3, #3
 8001fee:	d003      	beq.n	8001ff8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ff0:	e018      	b.n	8002024 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	73fb      	strb	r3, [r7, #15]
      break;
 8001ff6:	e015      	b.n	8002024 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d00e      	beq.n	8002022 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	73fb      	strb	r3, [r7, #15]
      break;
 8002008:	e00b      	b.n	8002022 <DMA_CheckFifoParam+0xe6>
      break;
 800200a:	bf00      	nop
 800200c:	e00a      	b.n	8002024 <DMA_CheckFifoParam+0xe8>
      break;
 800200e:	bf00      	nop
 8002010:	e008      	b.n	8002024 <DMA_CheckFifoParam+0xe8>
      break;
 8002012:	bf00      	nop
 8002014:	e006      	b.n	8002024 <DMA_CheckFifoParam+0xe8>
      break;
 8002016:	bf00      	nop
 8002018:	e004      	b.n	8002024 <DMA_CheckFifoParam+0xe8>
      break;
 800201a:	bf00      	nop
 800201c:	e002      	b.n	8002024 <DMA_CheckFifoParam+0xe8>
      break;   
 800201e:	bf00      	nop
 8002020:	e000      	b.n	8002024 <DMA_CheckFifoParam+0xe8>
      break;
 8002022:	bf00      	nop
    }
  } 
  
  return status; 
 8002024:	7bfb      	ldrb	r3, [r7, #15]
}
 8002026:	4618      	mov	r0, r3
 8002028:	3714      	adds	r7, #20
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop

08002034 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
 8002040:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002042:	2300      	movs	r3, #0
 8002044:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	2b80      	cmp	r3, #128	; 0x80
 800204c:	d106      	bne.n	800205c <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002054:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	f001 b911 	b.w	800327e <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002060:	2b00      	cmp	r3, #0
 8002062:	d007      	beq.n	8002074 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002068:	2b00      	cmp	r3, #0
 800206a:	d003      	beq.n	8002074 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002070:	2b00      	cmp	r3, #0
 8002072:	d105      	bne.n	8002080 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2240      	movs	r2, #64	; 0x40
 8002078:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	f001 b8ff 	b.w	800327e <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002086:	2b01      	cmp	r3, #1
 8002088:	d102      	bne.n	8002090 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 800208a:	2302      	movs	r3, #2
 800208c:	f001 b8f7 	b.w	800327e <HAL_DMAEx_MultiBufferStart_IT+0x124a>
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	f041 80e5 	bne.w	8003270 <HAL_DMAEx_MultiBufferStart_IT+0x123c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2202      	movs	r2, #2
 80020aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2200      	movs	r2, #0
 80020b2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80020c2:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	683a      	ldr	r2, [r7, #0]
 80020ca:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 80020cc:	6a3b      	ldr	r3, [r7, #32]
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	68b9      	ldr	r1, [r7, #8]
 80020d2:	68f8      	ldr	r0, [r7, #12]
 80020d4:	f001 f910 	bl	80032f8 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	461a      	mov	r2, r3
 80020de:	4b8d      	ldr	r3, [pc, #564]	; (8002314 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d960      	bls.n	80021a6 <HAL_DMAEx_MultiBufferStart_IT+0x172>
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a8b      	ldr	r2, [pc, #556]	; (8002318 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d057      	beq.n	800219e <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a8a      	ldr	r2, [pc, #552]	; (800231c <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d050      	beq.n	800219a <HAL_DMAEx_MultiBufferStart_IT+0x166>
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a88      	ldr	r2, [pc, #544]	; (8002320 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d049      	beq.n	8002196 <HAL_DMAEx_MultiBufferStart_IT+0x162>
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a87      	ldr	r2, [pc, #540]	; (8002324 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d042      	beq.n	8002192 <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a85      	ldr	r2, [pc, #532]	; (8002328 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d03a      	beq.n	800218c <HAL_DMAEx_MultiBufferStart_IT+0x158>
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a84      	ldr	r2, [pc, #528]	; (800232c <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d032      	beq.n	8002186 <HAL_DMAEx_MultiBufferStart_IT+0x152>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a82      	ldr	r2, [pc, #520]	; (8002330 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d02a      	beq.n	8002180 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a81      	ldr	r2, [pc, #516]	; (8002334 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d022      	beq.n	800217a <HAL_DMAEx_MultiBufferStart_IT+0x146>
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a7f      	ldr	r2, [pc, #508]	; (8002338 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d01a      	beq.n	8002174 <HAL_DMAEx_MultiBufferStart_IT+0x140>
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a7e      	ldr	r2, [pc, #504]	; (800233c <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d012      	beq.n	800216e <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a7c      	ldr	r2, [pc, #496]	; (8002340 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d00a      	beq.n	8002168 <HAL_DMAEx_MultiBufferStart_IT+0x134>
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a7b      	ldr	r2, [pc, #492]	; (8002344 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d102      	bne.n	8002162 <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 800215c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002160:	e01e      	b.n	80021a0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002162:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002166:	e01b      	b.n	80021a0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002168:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800216c:	e018      	b.n	80021a0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800216e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002172:	e015      	b.n	80021a0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002174:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002178:	e012      	b.n	80021a0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800217a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800217e:	e00f      	b.n	80021a0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002180:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002184:	e00c      	b.n	80021a0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002186:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800218a:	e009      	b.n	80021a0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800218c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002190:	e006      	b.n	80021a0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002192:	2320      	movs	r3, #32
 8002194:	e004      	b.n	80021a0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002196:	2320      	movs	r3, #32
 8002198:	e002      	b.n	80021a0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800219a:	2320      	movs	r3, #32
 800219c:	e000      	b.n	80021a0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800219e:	2320      	movs	r3, #32
 80021a0:	4a69      	ldr	r2, [pc, #420]	; (8002348 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 80021a2:	60d3      	str	r3, [r2, #12]
 80021a4:	e14f      	b.n	8002446 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	461a      	mov	r2, r3
 80021ac:	4b67      	ldr	r3, [pc, #412]	; (800234c <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d960      	bls.n	8002274 <HAL_DMAEx_MultiBufferStart_IT+0x240>
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a58      	ldr	r2, [pc, #352]	; (8002318 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d057      	beq.n	800226c <HAL_DMAEx_MultiBufferStart_IT+0x238>
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a56      	ldr	r2, [pc, #344]	; (800231c <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d050      	beq.n	8002268 <HAL_DMAEx_MultiBufferStart_IT+0x234>
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a55      	ldr	r2, [pc, #340]	; (8002320 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d049      	beq.n	8002264 <HAL_DMAEx_MultiBufferStart_IT+0x230>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a53      	ldr	r2, [pc, #332]	; (8002324 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d042      	beq.n	8002260 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a52      	ldr	r2, [pc, #328]	; (8002328 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d03a      	beq.n	800225a <HAL_DMAEx_MultiBufferStart_IT+0x226>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a50      	ldr	r2, [pc, #320]	; (800232c <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d032      	beq.n	8002254 <HAL_DMAEx_MultiBufferStart_IT+0x220>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a4f      	ldr	r2, [pc, #316]	; (8002330 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d02a      	beq.n	800224e <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a4d      	ldr	r2, [pc, #308]	; (8002334 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d022      	beq.n	8002248 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a4c      	ldr	r2, [pc, #304]	; (8002338 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d01a      	beq.n	8002242 <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a4a      	ldr	r2, [pc, #296]	; (800233c <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d012      	beq.n	800223c <HAL_DMAEx_MultiBufferStart_IT+0x208>
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a49      	ldr	r2, [pc, #292]	; (8002340 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d00a      	beq.n	8002236 <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a47      	ldr	r2, [pc, #284]	; (8002344 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d102      	bne.n	8002230 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 800222a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800222e:	e01e      	b.n	800226e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002230:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002234:	e01b      	b.n	800226e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002236:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800223a:	e018      	b.n	800226e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800223c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002240:	e015      	b.n	800226e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002242:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002246:	e012      	b.n	800226e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002248:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800224c:	e00f      	b.n	800226e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800224e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002252:	e00c      	b.n	800226e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002254:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002258:	e009      	b.n	800226e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800225a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800225e:	e006      	b.n	800226e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002260:	2320      	movs	r3, #32
 8002262:	e004      	b.n	800226e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002264:	2320      	movs	r3, #32
 8002266:	e002      	b.n	800226e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002268:	2320      	movs	r3, #32
 800226a:	e000      	b.n	800226e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800226c:	2320      	movs	r3, #32
 800226e:	4a36      	ldr	r2, [pc, #216]	; (8002348 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8002270:	6093      	str	r3, [r2, #8]
 8002272:	e0e8      	b.n	8002446 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	461a      	mov	r2, r3
 800227a:	4b35      	ldr	r3, [pc, #212]	; (8002350 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 800227c:	429a      	cmp	r2, r3
 800227e:	f240 8082 	bls.w	8002386 <HAL_DMAEx_MultiBufferStart_IT+0x352>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a24      	ldr	r2, [pc, #144]	; (8002318 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d078      	beq.n	800237e <HAL_DMAEx_MultiBufferStart_IT+0x34a>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a22      	ldr	r2, [pc, #136]	; (800231c <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d071      	beq.n	800237a <HAL_DMAEx_MultiBufferStart_IT+0x346>
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a21      	ldr	r2, [pc, #132]	; (8002320 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d06a      	beq.n	8002376 <HAL_DMAEx_MultiBufferStart_IT+0x342>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a1f      	ldr	r2, [pc, #124]	; (8002324 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d063      	beq.n	8002372 <HAL_DMAEx_MultiBufferStart_IT+0x33e>
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a1e      	ldr	r2, [pc, #120]	; (8002328 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d05b      	beq.n	800236c <HAL_DMAEx_MultiBufferStart_IT+0x338>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a1c      	ldr	r2, [pc, #112]	; (800232c <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d053      	beq.n	8002366 <HAL_DMAEx_MultiBufferStart_IT+0x332>
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a1b      	ldr	r2, [pc, #108]	; (8002330 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d04b      	beq.n	8002360 <HAL_DMAEx_MultiBufferStart_IT+0x32c>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a19      	ldr	r2, [pc, #100]	; (8002334 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d043      	beq.n	800235a <HAL_DMAEx_MultiBufferStart_IT+0x326>
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a18      	ldr	r2, [pc, #96]	; (8002338 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d03b      	beq.n	8002354 <HAL_DMAEx_MultiBufferStart_IT+0x320>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a16      	ldr	r2, [pc, #88]	; (800233c <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d012      	beq.n	800230c <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a15      	ldr	r2, [pc, #84]	; (8002340 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d00a      	beq.n	8002306 <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a13      	ldr	r2, [pc, #76]	; (8002344 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d102      	bne.n	8002300 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 80022fa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80022fe:	e03f      	b.n	8002380 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002300:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002304:	e03c      	b.n	8002380 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002306:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800230a:	e039      	b.n	8002380 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800230c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002310:	e036      	b.n	8002380 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002312:	bf00      	nop
 8002314:	40026458 	.word	0x40026458
 8002318:	40026010 	.word	0x40026010
 800231c:	40026410 	.word	0x40026410
 8002320:	40026070 	.word	0x40026070
 8002324:	40026470 	.word	0x40026470
 8002328:	40026028 	.word	0x40026028
 800232c:	40026428 	.word	0x40026428
 8002330:	40026088 	.word	0x40026088
 8002334:	40026488 	.word	0x40026488
 8002338:	40026040 	.word	0x40026040
 800233c:	40026440 	.word	0x40026440
 8002340:	400260a0 	.word	0x400260a0
 8002344:	400264a0 	.word	0x400264a0
 8002348:	40026400 	.word	0x40026400
 800234c:	400260b8 	.word	0x400260b8
 8002350:	40026058 	.word	0x40026058
 8002354:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002358:	e012      	b.n	8002380 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800235a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800235e:	e00f      	b.n	8002380 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002360:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002364:	e00c      	b.n	8002380 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002366:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800236a:	e009      	b.n	8002380 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800236c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002370:	e006      	b.n	8002380 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002372:	2320      	movs	r3, #32
 8002374:	e004      	b.n	8002380 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002376:	2320      	movs	r3, #32
 8002378:	e002      	b.n	8002380 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800237a:	2320      	movs	r3, #32
 800237c:	e000      	b.n	8002380 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800237e:	2320      	movs	r3, #32
 8002380:	4a8c      	ldr	r2, [pc, #560]	; (80025b4 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8002382:	60d3      	str	r3, [r2, #12]
 8002384:	e05f      	b.n	8002446 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a8b      	ldr	r2, [pc, #556]	; (80025b8 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d057      	beq.n	8002440 <HAL_DMAEx_MultiBufferStart_IT+0x40c>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a89      	ldr	r2, [pc, #548]	; (80025bc <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d050      	beq.n	800243c <HAL_DMAEx_MultiBufferStart_IT+0x408>
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a88      	ldr	r2, [pc, #544]	; (80025c0 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d049      	beq.n	8002438 <HAL_DMAEx_MultiBufferStart_IT+0x404>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a86      	ldr	r2, [pc, #536]	; (80025c4 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d042      	beq.n	8002434 <HAL_DMAEx_MultiBufferStart_IT+0x400>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a85      	ldr	r2, [pc, #532]	; (80025c8 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d03a      	beq.n	800242e <HAL_DMAEx_MultiBufferStart_IT+0x3fa>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a83      	ldr	r2, [pc, #524]	; (80025cc <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d032      	beq.n	8002428 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a82      	ldr	r2, [pc, #520]	; (80025d0 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d02a      	beq.n	8002422 <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a80      	ldr	r2, [pc, #512]	; (80025d4 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d022      	beq.n	800241c <HAL_DMAEx_MultiBufferStart_IT+0x3e8>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a7f      	ldr	r2, [pc, #508]	; (80025d8 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d01a      	beq.n	8002416 <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a7d      	ldr	r2, [pc, #500]	; (80025dc <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d012      	beq.n	8002410 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a7c      	ldr	r2, [pc, #496]	; (80025e0 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d00a      	beq.n	800240a <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a7a      	ldr	r2, [pc, #488]	; (80025e4 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d102      	bne.n	8002404 <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
 80023fe:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002402:	e01e      	b.n	8002442 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002404:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002408:	e01b      	b.n	8002442 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800240a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800240e:	e018      	b.n	8002442 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002410:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002414:	e015      	b.n	8002442 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002416:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800241a:	e012      	b.n	8002442 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800241c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002420:	e00f      	b.n	8002442 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002422:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002426:	e00c      	b.n	8002442 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002428:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800242c:	e009      	b.n	8002442 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800242e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002432:	e006      	b.n	8002442 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002434:	2320      	movs	r3, #32
 8002436:	e004      	b.n	8002442 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002438:	2320      	movs	r3, #32
 800243a:	e002      	b.n	8002442 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800243c:	2320      	movs	r3, #32
 800243e:	e000      	b.n	8002442 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002440:	2320      	movs	r3, #32
 8002442:	4a5c      	ldr	r2, [pc, #368]	; (80025b4 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8002444:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	461a      	mov	r2, r3
 800244c:	4b66      	ldr	r3, [pc, #408]	; (80025e8 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 800244e:	429a      	cmp	r2, r3
 8002450:	d960      	bls.n	8002514 <HAL_DMAEx_MultiBufferStart_IT+0x4e0>
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a58      	ldr	r2, [pc, #352]	; (80025b8 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d057      	beq.n	800250c <HAL_DMAEx_MultiBufferStart_IT+0x4d8>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a56      	ldr	r2, [pc, #344]	; (80025bc <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d050      	beq.n	8002508 <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a55      	ldr	r2, [pc, #340]	; (80025c0 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d049      	beq.n	8002504 <HAL_DMAEx_MultiBufferStart_IT+0x4d0>
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a53      	ldr	r2, [pc, #332]	; (80025c4 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d042      	beq.n	8002500 <HAL_DMAEx_MultiBufferStart_IT+0x4cc>
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a52      	ldr	r2, [pc, #328]	; (80025c8 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d03a      	beq.n	80024fa <HAL_DMAEx_MultiBufferStart_IT+0x4c6>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a50      	ldr	r2, [pc, #320]	; (80025cc <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d032      	beq.n	80024f4 <HAL_DMAEx_MultiBufferStart_IT+0x4c0>
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a4f      	ldr	r2, [pc, #316]	; (80025d0 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d02a      	beq.n	80024ee <HAL_DMAEx_MultiBufferStart_IT+0x4ba>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a4d      	ldr	r2, [pc, #308]	; (80025d4 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d022      	beq.n	80024e8 <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a4c      	ldr	r2, [pc, #304]	; (80025d8 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d01a      	beq.n	80024e2 <HAL_DMAEx_MultiBufferStart_IT+0x4ae>
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a4a      	ldr	r2, [pc, #296]	; (80025dc <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d012      	beq.n	80024dc <HAL_DMAEx_MultiBufferStart_IT+0x4a8>
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a49      	ldr	r2, [pc, #292]	; (80025e0 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d00a      	beq.n	80024d6 <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a47      	ldr	r2, [pc, #284]	; (80025e4 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d102      	bne.n	80024d0 <HAL_DMAEx_MultiBufferStart_IT+0x49c>
 80024ca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80024ce:	e01e      	b.n	800250e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80024d0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80024d4:	e01b      	b.n	800250e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80024d6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80024da:	e018      	b.n	800250e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80024dc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80024e0:	e015      	b.n	800250e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80024e2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80024e6:	e012      	b.n	800250e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80024e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024ec:	e00f      	b.n	800250e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80024ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024f2:	e00c      	b.n	800250e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80024f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024f8:	e009      	b.n	800250e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80024fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024fe:	e006      	b.n	800250e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002500:	2310      	movs	r3, #16
 8002502:	e004      	b.n	800250e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002504:	2310      	movs	r3, #16
 8002506:	e002      	b.n	800250e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002508:	2310      	movs	r3, #16
 800250a:	e000      	b.n	800250e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800250c:	2310      	movs	r3, #16
 800250e:	4a37      	ldr	r2, [pc, #220]	; (80025ec <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8002510:	60d3      	str	r3, [r2, #12]
 8002512:	e14f      	b.n	80027b4 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	461a      	mov	r2, r3
 800251a:	4b35      	ldr	r3, [pc, #212]	; (80025f0 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 800251c:	429a      	cmp	r2, r3
 800251e:	f240 8082 	bls.w	8002626 <HAL_DMAEx_MultiBufferStart_IT+0x5f2>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a24      	ldr	r2, [pc, #144]	; (80025b8 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d078      	beq.n	800261e <HAL_DMAEx_MultiBufferStart_IT+0x5ea>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a22      	ldr	r2, [pc, #136]	; (80025bc <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d071      	beq.n	800261a <HAL_DMAEx_MultiBufferStart_IT+0x5e6>
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a21      	ldr	r2, [pc, #132]	; (80025c0 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d06a      	beq.n	8002616 <HAL_DMAEx_MultiBufferStart_IT+0x5e2>
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a1f      	ldr	r2, [pc, #124]	; (80025c4 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d063      	beq.n	8002612 <HAL_DMAEx_MultiBufferStart_IT+0x5de>
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a1e      	ldr	r2, [pc, #120]	; (80025c8 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d05b      	beq.n	800260c <HAL_DMAEx_MultiBufferStart_IT+0x5d8>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a1c      	ldr	r2, [pc, #112]	; (80025cc <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d053      	beq.n	8002606 <HAL_DMAEx_MultiBufferStart_IT+0x5d2>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a1b      	ldr	r2, [pc, #108]	; (80025d0 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d04b      	beq.n	8002600 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a19      	ldr	r2, [pc, #100]	; (80025d4 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d043      	beq.n	80025fa <HAL_DMAEx_MultiBufferStart_IT+0x5c6>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a18      	ldr	r2, [pc, #96]	; (80025d8 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d03b      	beq.n	80025f4 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a16      	ldr	r2, [pc, #88]	; (80025dc <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d012      	beq.n	80025ac <HAL_DMAEx_MultiBufferStart_IT+0x578>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a15      	ldr	r2, [pc, #84]	; (80025e0 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d00a      	beq.n	80025a6 <HAL_DMAEx_MultiBufferStart_IT+0x572>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a13      	ldr	r2, [pc, #76]	; (80025e4 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d102      	bne.n	80025a0 <HAL_DMAEx_MultiBufferStart_IT+0x56c>
 800259a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800259e:	e03f      	b.n	8002620 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80025a0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80025a4:	e03c      	b.n	8002620 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80025a6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80025aa:	e039      	b.n	8002620 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80025ac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80025b0:	e036      	b.n	8002620 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80025b2:	bf00      	nop
 80025b4:	40026000 	.word	0x40026000
 80025b8:	40026010 	.word	0x40026010
 80025bc:	40026410 	.word	0x40026410
 80025c0:	40026070 	.word	0x40026070
 80025c4:	40026470 	.word	0x40026470
 80025c8:	40026028 	.word	0x40026028
 80025cc:	40026428 	.word	0x40026428
 80025d0:	40026088 	.word	0x40026088
 80025d4:	40026488 	.word	0x40026488
 80025d8:	40026040 	.word	0x40026040
 80025dc:	40026440 	.word	0x40026440
 80025e0:	400260a0 	.word	0x400260a0
 80025e4:	400264a0 	.word	0x400264a0
 80025e8:	40026458 	.word	0x40026458
 80025ec:	40026400 	.word	0x40026400
 80025f0:	400260b8 	.word	0x400260b8
 80025f4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80025f8:	e012      	b.n	8002620 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80025fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025fe:	e00f      	b.n	8002620 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002600:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002604:	e00c      	b.n	8002620 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002606:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800260a:	e009      	b.n	8002620 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800260c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002610:	e006      	b.n	8002620 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002612:	2310      	movs	r3, #16
 8002614:	e004      	b.n	8002620 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002616:	2310      	movs	r3, #16
 8002618:	e002      	b.n	8002620 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800261a:	2310      	movs	r3, #16
 800261c:	e000      	b.n	8002620 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800261e:	2310      	movs	r3, #16
 8002620:	4a8c      	ldr	r2, [pc, #560]	; (8002854 <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 8002622:	6093      	str	r3, [r2, #8]
 8002624:	e0c6      	b.n	80027b4 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	461a      	mov	r2, r3
 800262c:	4b8a      	ldr	r3, [pc, #552]	; (8002858 <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 800262e:	429a      	cmp	r2, r3
 8002630:	d960      	bls.n	80026f4 <HAL_DMAEx_MultiBufferStart_IT+0x6c0>
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a89      	ldr	r2, [pc, #548]	; (800285c <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d057      	beq.n	80026ec <HAL_DMAEx_MultiBufferStart_IT+0x6b8>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a87      	ldr	r2, [pc, #540]	; (8002860 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d050      	beq.n	80026e8 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a86      	ldr	r2, [pc, #536]	; (8002864 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d049      	beq.n	80026e4 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a84      	ldr	r2, [pc, #528]	; (8002868 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d042      	beq.n	80026e0 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a83      	ldr	r2, [pc, #524]	; (800286c <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d03a      	beq.n	80026da <HAL_DMAEx_MultiBufferStart_IT+0x6a6>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a81      	ldr	r2, [pc, #516]	; (8002870 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d032      	beq.n	80026d4 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a80      	ldr	r2, [pc, #512]	; (8002874 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d02a      	beq.n	80026ce <HAL_DMAEx_MultiBufferStart_IT+0x69a>
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a7e      	ldr	r2, [pc, #504]	; (8002878 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d022      	beq.n	80026c8 <HAL_DMAEx_MultiBufferStart_IT+0x694>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a7d      	ldr	r2, [pc, #500]	; (800287c <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d01a      	beq.n	80026c2 <HAL_DMAEx_MultiBufferStart_IT+0x68e>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a7b      	ldr	r2, [pc, #492]	; (8002880 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d012      	beq.n	80026bc <HAL_DMAEx_MultiBufferStart_IT+0x688>
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a7a      	ldr	r2, [pc, #488]	; (8002884 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d00a      	beq.n	80026b6 <HAL_DMAEx_MultiBufferStart_IT+0x682>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a78      	ldr	r2, [pc, #480]	; (8002888 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d102      	bne.n	80026b0 <HAL_DMAEx_MultiBufferStart_IT+0x67c>
 80026aa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80026ae:	e01e      	b.n	80026ee <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80026b0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80026b4:	e01b      	b.n	80026ee <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80026b6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80026ba:	e018      	b.n	80026ee <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80026bc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80026c0:	e015      	b.n	80026ee <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80026c2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80026c6:	e012      	b.n	80026ee <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80026c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026cc:	e00f      	b.n	80026ee <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80026ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026d2:	e00c      	b.n	80026ee <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80026d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026d8:	e009      	b.n	80026ee <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80026da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026de:	e006      	b.n	80026ee <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80026e0:	2310      	movs	r3, #16
 80026e2:	e004      	b.n	80026ee <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80026e4:	2310      	movs	r3, #16
 80026e6:	e002      	b.n	80026ee <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80026e8:	2310      	movs	r3, #16
 80026ea:	e000      	b.n	80026ee <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80026ec:	2310      	movs	r3, #16
 80026ee:	4a67      	ldr	r2, [pc, #412]	; (800288c <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 80026f0:	60d3      	str	r3, [r2, #12]
 80026f2:	e05f      	b.n	80027b4 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a58      	ldr	r2, [pc, #352]	; (800285c <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d057      	beq.n	80027ae <HAL_DMAEx_MultiBufferStart_IT+0x77a>
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a57      	ldr	r2, [pc, #348]	; (8002860 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d050      	beq.n	80027aa <HAL_DMAEx_MultiBufferStart_IT+0x776>
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a55      	ldr	r2, [pc, #340]	; (8002864 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d049      	beq.n	80027a6 <HAL_DMAEx_MultiBufferStart_IT+0x772>
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a54      	ldr	r2, [pc, #336]	; (8002868 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d042      	beq.n	80027a2 <HAL_DMAEx_MultiBufferStart_IT+0x76e>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a52      	ldr	r2, [pc, #328]	; (800286c <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d03a      	beq.n	800279c <HAL_DMAEx_MultiBufferStart_IT+0x768>
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a51      	ldr	r2, [pc, #324]	; (8002870 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d032      	beq.n	8002796 <HAL_DMAEx_MultiBufferStart_IT+0x762>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a4f      	ldr	r2, [pc, #316]	; (8002874 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d02a      	beq.n	8002790 <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a4e      	ldr	r2, [pc, #312]	; (8002878 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d022      	beq.n	800278a <HAL_DMAEx_MultiBufferStart_IT+0x756>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a4c      	ldr	r2, [pc, #304]	; (800287c <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d01a      	beq.n	8002784 <HAL_DMAEx_MultiBufferStart_IT+0x750>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a4b      	ldr	r2, [pc, #300]	; (8002880 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d012      	beq.n	800277e <HAL_DMAEx_MultiBufferStart_IT+0x74a>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a49      	ldr	r2, [pc, #292]	; (8002884 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d00a      	beq.n	8002778 <HAL_DMAEx_MultiBufferStart_IT+0x744>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a48      	ldr	r2, [pc, #288]	; (8002888 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d102      	bne.n	8002772 <HAL_DMAEx_MultiBufferStart_IT+0x73e>
 800276c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002770:	e01e      	b.n	80027b0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002772:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002776:	e01b      	b.n	80027b0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002778:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800277c:	e018      	b.n	80027b0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800277e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002782:	e015      	b.n	80027b0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002784:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002788:	e012      	b.n	80027b0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800278a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800278e:	e00f      	b.n	80027b0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002790:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002794:	e00c      	b.n	80027b0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002796:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800279a:	e009      	b.n	80027b0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800279c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027a0:	e006      	b.n	80027b0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80027a2:	2310      	movs	r3, #16
 80027a4:	e004      	b.n	80027b0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80027a6:	2310      	movs	r3, #16
 80027a8:	e002      	b.n	80027b0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80027aa:	2310      	movs	r3, #16
 80027ac:	e000      	b.n	80027b0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80027ae:	2310      	movs	r3, #16
 80027b0:	4a36      	ldr	r2, [pc, #216]	; (800288c <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 80027b2:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	461a      	mov	r2, r3
 80027ba:	4b35      	ldr	r3, [pc, #212]	; (8002890 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 80027bc:	429a      	cmp	r2, r3
 80027be:	f240 8082 	bls.w	80028c6 <HAL_DMAEx_MultiBufferStart_IT+0x892>
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a25      	ldr	r2, [pc, #148]	; (800285c <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d078      	beq.n	80028be <HAL_DMAEx_MultiBufferStart_IT+0x88a>
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a23      	ldr	r2, [pc, #140]	; (8002860 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d071      	beq.n	80028ba <HAL_DMAEx_MultiBufferStart_IT+0x886>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a22      	ldr	r2, [pc, #136]	; (8002864 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d06a      	beq.n	80028b6 <HAL_DMAEx_MultiBufferStart_IT+0x882>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a20      	ldr	r2, [pc, #128]	; (8002868 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d063      	beq.n	80028b2 <HAL_DMAEx_MultiBufferStart_IT+0x87e>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a1f      	ldr	r2, [pc, #124]	; (800286c <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d05b      	beq.n	80028ac <HAL_DMAEx_MultiBufferStart_IT+0x878>
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a1d      	ldr	r2, [pc, #116]	; (8002870 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d053      	beq.n	80028a6 <HAL_DMAEx_MultiBufferStart_IT+0x872>
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a1c      	ldr	r2, [pc, #112]	; (8002874 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d04b      	beq.n	80028a0 <HAL_DMAEx_MultiBufferStart_IT+0x86c>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a1a      	ldr	r2, [pc, #104]	; (8002878 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d043      	beq.n	800289a <HAL_DMAEx_MultiBufferStart_IT+0x866>
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a19      	ldr	r2, [pc, #100]	; (800287c <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d03b      	beq.n	8002894 <HAL_DMAEx_MultiBufferStart_IT+0x860>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a17      	ldr	r2, [pc, #92]	; (8002880 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d012      	beq.n	800284c <HAL_DMAEx_MultiBufferStart_IT+0x818>
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a16      	ldr	r2, [pc, #88]	; (8002884 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d00a      	beq.n	8002846 <HAL_DMAEx_MultiBufferStart_IT+0x812>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a14      	ldr	r2, [pc, #80]	; (8002888 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d102      	bne.n	8002840 <HAL_DMAEx_MultiBufferStart_IT+0x80c>
 800283a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800283e:	e03f      	b.n	80028c0 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002840:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002844:	e03c      	b.n	80028c0 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002846:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800284a:	e039      	b.n	80028c0 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800284c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002850:	e036      	b.n	80028c0 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002852:	bf00      	nop
 8002854:	40026400 	.word	0x40026400
 8002858:	40026058 	.word	0x40026058
 800285c:	40026010 	.word	0x40026010
 8002860:	40026410 	.word	0x40026410
 8002864:	40026070 	.word	0x40026070
 8002868:	40026470 	.word	0x40026470
 800286c:	40026028 	.word	0x40026028
 8002870:	40026428 	.word	0x40026428
 8002874:	40026088 	.word	0x40026088
 8002878:	40026488 	.word	0x40026488
 800287c:	40026040 	.word	0x40026040
 8002880:	40026440 	.word	0x40026440
 8002884:	400260a0 	.word	0x400260a0
 8002888:	400264a0 	.word	0x400264a0
 800288c:	40026000 	.word	0x40026000
 8002890:	40026458 	.word	0x40026458
 8002894:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002898:	e012      	b.n	80028c0 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800289a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800289e:	e00f      	b.n	80028c0 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80028a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028a4:	e00c      	b.n	80028c0 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80028a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028aa:	e009      	b.n	80028c0 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80028ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028b0:	e006      	b.n	80028c0 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80028b2:	2308      	movs	r3, #8
 80028b4:	e004      	b.n	80028c0 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80028b6:	2308      	movs	r3, #8
 80028b8:	e002      	b.n	80028c0 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80028ba:	2308      	movs	r3, #8
 80028bc:	e000      	b.n	80028c0 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80028be:	2308      	movs	r3, #8
 80028c0:	4a8c      	ldr	r2, [pc, #560]	; (8002af4 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 80028c2:	60d3      	str	r3, [r2, #12]
 80028c4:	e14e      	b.n	8002b64 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	461a      	mov	r2, r3
 80028cc:	4b8a      	ldr	r3, [pc, #552]	; (8002af8 <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d960      	bls.n	8002994 <HAL_DMAEx_MultiBufferStart_IT+0x960>
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a89      	ldr	r2, [pc, #548]	; (8002afc <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d057      	beq.n	800298c <HAL_DMAEx_MultiBufferStart_IT+0x958>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a87      	ldr	r2, [pc, #540]	; (8002b00 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d050      	beq.n	8002988 <HAL_DMAEx_MultiBufferStart_IT+0x954>
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a86      	ldr	r2, [pc, #536]	; (8002b04 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d049      	beq.n	8002984 <HAL_DMAEx_MultiBufferStart_IT+0x950>
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a84      	ldr	r2, [pc, #528]	; (8002b08 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d042      	beq.n	8002980 <HAL_DMAEx_MultiBufferStart_IT+0x94c>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a83      	ldr	r2, [pc, #524]	; (8002b0c <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d03a      	beq.n	800297a <HAL_DMAEx_MultiBufferStart_IT+0x946>
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a81      	ldr	r2, [pc, #516]	; (8002b10 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d032      	beq.n	8002974 <HAL_DMAEx_MultiBufferStart_IT+0x940>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a80      	ldr	r2, [pc, #512]	; (8002b14 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d02a      	beq.n	800296e <HAL_DMAEx_MultiBufferStart_IT+0x93a>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a7e      	ldr	r2, [pc, #504]	; (8002b18 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d022      	beq.n	8002968 <HAL_DMAEx_MultiBufferStart_IT+0x934>
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a7d      	ldr	r2, [pc, #500]	; (8002b1c <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d01a      	beq.n	8002962 <HAL_DMAEx_MultiBufferStart_IT+0x92e>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a7b      	ldr	r2, [pc, #492]	; (8002b20 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d012      	beq.n	800295c <HAL_DMAEx_MultiBufferStart_IT+0x928>
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a7a      	ldr	r2, [pc, #488]	; (8002b24 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d00a      	beq.n	8002956 <HAL_DMAEx_MultiBufferStart_IT+0x922>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a78      	ldr	r2, [pc, #480]	; (8002b28 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d102      	bne.n	8002950 <HAL_DMAEx_MultiBufferStart_IT+0x91c>
 800294a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800294e:	e01e      	b.n	800298e <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002950:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002954:	e01b      	b.n	800298e <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002956:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800295a:	e018      	b.n	800298e <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800295c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002960:	e015      	b.n	800298e <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002962:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002966:	e012      	b.n	800298e <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002968:	f44f 7300 	mov.w	r3, #512	; 0x200
 800296c:	e00f      	b.n	800298e <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800296e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002972:	e00c      	b.n	800298e <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002974:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002978:	e009      	b.n	800298e <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800297a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800297e:	e006      	b.n	800298e <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002980:	2308      	movs	r3, #8
 8002982:	e004      	b.n	800298e <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002984:	2308      	movs	r3, #8
 8002986:	e002      	b.n	800298e <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002988:	2308      	movs	r3, #8
 800298a:	e000      	b.n	800298e <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800298c:	2308      	movs	r3, #8
 800298e:	4a59      	ldr	r2, [pc, #356]	; (8002af4 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8002990:	6093      	str	r3, [r2, #8]
 8002992:	e0e7      	b.n	8002b64 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	461a      	mov	r2, r3
 800299a:	4b64      	ldr	r3, [pc, #400]	; (8002b2c <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 800299c:	429a      	cmp	r2, r3
 800299e:	d960      	bls.n	8002a62 <HAL_DMAEx_MultiBufferStart_IT+0xa2e>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a55      	ldr	r2, [pc, #340]	; (8002afc <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d057      	beq.n	8002a5a <HAL_DMAEx_MultiBufferStart_IT+0xa26>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a54      	ldr	r2, [pc, #336]	; (8002b00 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d050      	beq.n	8002a56 <HAL_DMAEx_MultiBufferStart_IT+0xa22>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a52      	ldr	r2, [pc, #328]	; (8002b04 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d049      	beq.n	8002a52 <HAL_DMAEx_MultiBufferStart_IT+0xa1e>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a51      	ldr	r2, [pc, #324]	; (8002b08 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d042      	beq.n	8002a4e <HAL_DMAEx_MultiBufferStart_IT+0xa1a>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a4f      	ldr	r2, [pc, #316]	; (8002b0c <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d03a      	beq.n	8002a48 <HAL_DMAEx_MultiBufferStart_IT+0xa14>
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a4e      	ldr	r2, [pc, #312]	; (8002b10 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d032      	beq.n	8002a42 <HAL_DMAEx_MultiBufferStart_IT+0xa0e>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a4c      	ldr	r2, [pc, #304]	; (8002b14 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d02a      	beq.n	8002a3c <HAL_DMAEx_MultiBufferStart_IT+0xa08>
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a4b      	ldr	r2, [pc, #300]	; (8002b18 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d022      	beq.n	8002a36 <HAL_DMAEx_MultiBufferStart_IT+0xa02>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a49      	ldr	r2, [pc, #292]	; (8002b1c <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d01a      	beq.n	8002a30 <HAL_DMAEx_MultiBufferStart_IT+0x9fc>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a48      	ldr	r2, [pc, #288]	; (8002b20 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d012      	beq.n	8002a2a <HAL_DMAEx_MultiBufferStart_IT+0x9f6>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a46      	ldr	r2, [pc, #280]	; (8002b24 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d00a      	beq.n	8002a24 <HAL_DMAEx_MultiBufferStart_IT+0x9f0>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a45      	ldr	r2, [pc, #276]	; (8002b28 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d102      	bne.n	8002a1e <HAL_DMAEx_MultiBufferStart_IT+0x9ea>
 8002a18:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002a1c:	e01e      	b.n	8002a5c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002a1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a22:	e01b      	b.n	8002a5c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002a24:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002a28:	e018      	b.n	8002a5c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002a2a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002a2e:	e015      	b.n	8002a5c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002a30:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002a34:	e012      	b.n	8002a5c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002a36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a3a:	e00f      	b.n	8002a5c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002a3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a40:	e00c      	b.n	8002a5c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002a42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a46:	e009      	b.n	8002a5c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002a48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a4c:	e006      	b.n	8002a5c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002a4e:	2308      	movs	r3, #8
 8002a50:	e004      	b.n	8002a5c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002a52:	2308      	movs	r3, #8
 8002a54:	e002      	b.n	8002a5c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002a56:	2308      	movs	r3, #8
 8002a58:	e000      	b.n	8002a5c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002a5a:	2308      	movs	r3, #8
 8002a5c:	4a34      	ldr	r2, [pc, #208]	; (8002b30 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8002a5e:	60d3      	str	r3, [r2, #12]
 8002a60:	e080      	b.n	8002b64 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a25      	ldr	r2, [pc, #148]	; (8002afc <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d078      	beq.n	8002b5e <HAL_DMAEx_MultiBufferStart_IT+0xb2a>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a23      	ldr	r2, [pc, #140]	; (8002b00 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d071      	beq.n	8002b5a <HAL_DMAEx_MultiBufferStart_IT+0xb26>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a22      	ldr	r2, [pc, #136]	; (8002b04 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d06a      	beq.n	8002b56 <HAL_DMAEx_MultiBufferStart_IT+0xb22>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a20      	ldr	r2, [pc, #128]	; (8002b08 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d063      	beq.n	8002b52 <HAL_DMAEx_MultiBufferStart_IT+0xb1e>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a1f      	ldr	r2, [pc, #124]	; (8002b0c <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d05b      	beq.n	8002b4c <HAL_DMAEx_MultiBufferStart_IT+0xb18>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a1d      	ldr	r2, [pc, #116]	; (8002b10 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d053      	beq.n	8002b46 <HAL_DMAEx_MultiBufferStart_IT+0xb12>
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a1c      	ldr	r2, [pc, #112]	; (8002b14 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d04b      	beq.n	8002b40 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a1a      	ldr	r2, [pc, #104]	; (8002b18 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d043      	beq.n	8002b3a <HAL_DMAEx_MultiBufferStart_IT+0xb06>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a19      	ldr	r2, [pc, #100]	; (8002b1c <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d03b      	beq.n	8002b34 <HAL_DMAEx_MultiBufferStart_IT+0xb00>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a17      	ldr	r2, [pc, #92]	; (8002b20 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d012      	beq.n	8002aec <HAL_DMAEx_MultiBufferStart_IT+0xab8>
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a16      	ldr	r2, [pc, #88]	; (8002b24 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d00a      	beq.n	8002ae6 <HAL_DMAEx_MultiBufferStart_IT+0xab2>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a14      	ldr	r2, [pc, #80]	; (8002b28 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d102      	bne.n	8002ae0 <HAL_DMAEx_MultiBufferStart_IT+0xaac>
 8002ada:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002ade:	e03f      	b.n	8002b60 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002ae0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ae4:	e03c      	b.n	8002b60 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002ae6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002aea:	e039      	b.n	8002b60 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002aec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002af0:	e036      	b.n	8002b60 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002af2:	bf00      	nop
 8002af4:	40026400 	.word	0x40026400
 8002af8:	400260b8 	.word	0x400260b8
 8002afc:	40026010 	.word	0x40026010
 8002b00:	40026410 	.word	0x40026410
 8002b04:	40026070 	.word	0x40026070
 8002b08:	40026470 	.word	0x40026470
 8002b0c:	40026028 	.word	0x40026028
 8002b10:	40026428 	.word	0x40026428
 8002b14:	40026088 	.word	0x40026088
 8002b18:	40026488 	.word	0x40026488
 8002b1c:	40026040 	.word	0x40026040
 8002b20:	40026440 	.word	0x40026440
 8002b24:	400260a0 	.word	0x400260a0
 8002b28:	400264a0 	.word	0x400264a0
 8002b2c:	40026058 	.word	0x40026058
 8002b30:	40026000 	.word	0x40026000
 8002b34:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002b38:	e012      	b.n	8002b60 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002b3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b3e:	e00f      	b.n	8002b60 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002b40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b44:	e00c      	b.n	8002b60 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002b46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b4a:	e009      	b.n	8002b60 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002b4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b50:	e006      	b.n	8002b60 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002b52:	2308      	movs	r3, #8
 8002b54:	e004      	b.n	8002b60 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002b56:	2308      	movs	r3, #8
 8002b58:	e002      	b.n	8002b60 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002b5a:	2308      	movs	r3, #8
 8002b5c:	e000      	b.n	8002b60 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002b5e:	2308      	movs	r3, #8
 8002b60:	4a8a      	ldr	r2, [pc, #552]	; (8002d8c <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 8002b62:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	461a      	mov	r2, r3
 8002b6a:	4b89      	ldr	r3, [pc, #548]	; (8002d90 <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d960      	bls.n	8002c32 <HAL_DMAEx_MultiBufferStart_IT+0xbfe>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a87      	ldr	r2, [pc, #540]	; (8002d94 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d057      	beq.n	8002c2a <HAL_DMAEx_MultiBufferStart_IT+0xbf6>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a86      	ldr	r2, [pc, #536]	; (8002d98 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d050      	beq.n	8002c26 <HAL_DMAEx_MultiBufferStart_IT+0xbf2>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a84      	ldr	r2, [pc, #528]	; (8002d9c <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d049      	beq.n	8002c22 <HAL_DMAEx_MultiBufferStart_IT+0xbee>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a83      	ldr	r2, [pc, #524]	; (8002da0 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d042      	beq.n	8002c1e <HAL_DMAEx_MultiBufferStart_IT+0xbea>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a81      	ldr	r2, [pc, #516]	; (8002da4 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d03a      	beq.n	8002c18 <HAL_DMAEx_MultiBufferStart_IT+0xbe4>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a80      	ldr	r2, [pc, #512]	; (8002da8 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d032      	beq.n	8002c12 <HAL_DMAEx_MultiBufferStart_IT+0xbde>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a7e      	ldr	r2, [pc, #504]	; (8002dac <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d02a      	beq.n	8002c0c <HAL_DMAEx_MultiBufferStart_IT+0xbd8>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a7d      	ldr	r2, [pc, #500]	; (8002db0 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d022      	beq.n	8002c06 <HAL_DMAEx_MultiBufferStart_IT+0xbd2>
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a7b      	ldr	r2, [pc, #492]	; (8002db4 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d01a      	beq.n	8002c00 <HAL_DMAEx_MultiBufferStart_IT+0xbcc>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a7a      	ldr	r2, [pc, #488]	; (8002db8 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d012      	beq.n	8002bfa <HAL_DMAEx_MultiBufferStart_IT+0xbc6>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a78      	ldr	r2, [pc, #480]	; (8002dbc <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d00a      	beq.n	8002bf4 <HAL_DMAEx_MultiBufferStart_IT+0xbc0>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a77      	ldr	r2, [pc, #476]	; (8002dc0 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d102      	bne.n	8002bee <HAL_DMAEx_MultiBufferStart_IT+0xbba>
 8002be8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002bec:	e01e      	b.n	8002c2c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002bee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bf2:	e01b      	b.n	8002c2c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002bf4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002bf8:	e018      	b.n	8002c2c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002bfa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002bfe:	e015      	b.n	8002c2c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002c00:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002c04:	e012      	b.n	8002c2c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002c06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c0a:	e00f      	b.n	8002c2c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002c0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c10:	e00c      	b.n	8002c2c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002c12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c16:	e009      	b.n	8002c2c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002c18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c1c:	e006      	b.n	8002c2c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002c1e:	2304      	movs	r3, #4
 8002c20:	e004      	b.n	8002c2c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002c22:	2304      	movs	r3, #4
 8002c24:	e002      	b.n	8002c2c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002c26:	2304      	movs	r3, #4
 8002c28:	e000      	b.n	8002c2c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002c2a:	2304      	movs	r3, #4
 8002c2c:	4a65      	ldr	r2, [pc, #404]	; (8002dc4 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8002c2e:	60d3      	str	r3, [r2, #12]
 8002c30:	e150      	b.n	8002ed4 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	461a      	mov	r2, r3
 8002c38:	4b63      	ldr	r3, [pc, #396]	; (8002dc8 <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d960      	bls.n	8002d00 <HAL_DMAEx_MultiBufferStart_IT+0xccc>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a54      	ldr	r2, [pc, #336]	; (8002d94 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d057      	beq.n	8002cf8 <HAL_DMAEx_MultiBufferStart_IT+0xcc4>
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a52      	ldr	r2, [pc, #328]	; (8002d98 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d050      	beq.n	8002cf4 <HAL_DMAEx_MultiBufferStart_IT+0xcc0>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a51      	ldr	r2, [pc, #324]	; (8002d9c <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d049      	beq.n	8002cf0 <HAL_DMAEx_MultiBufferStart_IT+0xcbc>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a4f      	ldr	r2, [pc, #316]	; (8002da0 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d042      	beq.n	8002cec <HAL_DMAEx_MultiBufferStart_IT+0xcb8>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a4e      	ldr	r2, [pc, #312]	; (8002da4 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d03a      	beq.n	8002ce6 <HAL_DMAEx_MultiBufferStart_IT+0xcb2>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a4c      	ldr	r2, [pc, #304]	; (8002da8 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d032      	beq.n	8002ce0 <HAL_DMAEx_MultiBufferStart_IT+0xcac>
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a4b      	ldr	r2, [pc, #300]	; (8002dac <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d02a      	beq.n	8002cda <HAL_DMAEx_MultiBufferStart_IT+0xca6>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a49      	ldr	r2, [pc, #292]	; (8002db0 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d022      	beq.n	8002cd4 <HAL_DMAEx_MultiBufferStart_IT+0xca0>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a48      	ldr	r2, [pc, #288]	; (8002db4 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d01a      	beq.n	8002cce <HAL_DMAEx_MultiBufferStart_IT+0xc9a>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a46      	ldr	r2, [pc, #280]	; (8002db8 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d012      	beq.n	8002cc8 <HAL_DMAEx_MultiBufferStart_IT+0xc94>
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a45      	ldr	r2, [pc, #276]	; (8002dbc <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d00a      	beq.n	8002cc2 <HAL_DMAEx_MultiBufferStart_IT+0xc8e>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a43      	ldr	r2, [pc, #268]	; (8002dc0 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d102      	bne.n	8002cbc <HAL_DMAEx_MultiBufferStart_IT+0xc88>
 8002cb6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002cba:	e01e      	b.n	8002cfa <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8002cbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cc0:	e01b      	b.n	8002cfa <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8002cc2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002cc6:	e018      	b.n	8002cfa <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8002cc8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002ccc:	e015      	b.n	8002cfa <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8002cce:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002cd2:	e012      	b.n	8002cfa <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8002cd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cd8:	e00f      	b.n	8002cfa <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8002cda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cde:	e00c      	b.n	8002cfa <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8002ce0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ce4:	e009      	b.n	8002cfa <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8002ce6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cea:	e006      	b.n	8002cfa <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8002cec:	2304      	movs	r3, #4
 8002cee:	e004      	b.n	8002cfa <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8002cf0:	2304      	movs	r3, #4
 8002cf2:	e002      	b.n	8002cfa <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8002cf4:	2304      	movs	r3, #4
 8002cf6:	e000      	b.n	8002cfa <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8002cf8:	2304      	movs	r3, #4
 8002cfa:	4a32      	ldr	r2, [pc, #200]	; (8002dc4 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8002cfc:	6093      	str	r3, [r2, #8]
 8002cfe:	e0e9      	b.n	8002ed4 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	461a      	mov	r2, r3
 8002d06:	4b31      	ldr	r3, [pc, #196]	; (8002dcc <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	f240 8083 	bls.w	8002e14 <HAL_DMAEx_MultiBufferStart_IT+0xde0>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a20      	ldr	r2, [pc, #128]	; (8002d94 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d079      	beq.n	8002e0c <HAL_DMAEx_MultiBufferStart_IT+0xdd8>
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a1e      	ldr	r2, [pc, #120]	; (8002d98 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d072      	beq.n	8002e08 <HAL_DMAEx_MultiBufferStart_IT+0xdd4>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a1d      	ldr	r2, [pc, #116]	; (8002d9c <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d06b      	beq.n	8002e04 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a1b      	ldr	r2, [pc, #108]	; (8002da0 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d064      	beq.n	8002e00 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a1a      	ldr	r2, [pc, #104]	; (8002da4 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d05c      	beq.n	8002dfa <HAL_DMAEx_MultiBufferStart_IT+0xdc6>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a18      	ldr	r2, [pc, #96]	; (8002da8 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d054      	beq.n	8002df4 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a17      	ldr	r2, [pc, #92]	; (8002dac <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d04c      	beq.n	8002dee <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a15      	ldr	r2, [pc, #84]	; (8002db0 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d044      	beq.n	8002de8 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a14      	ldr	r2, [pc, #80]	; (8002db4 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d03c      	beq.n	8002de2 <HAL_DMAEx_MultiBufferStart_IT+0xdae>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a12      	ldr	r2, [pc, #72]	; (8002db8 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d034      	beq.n	8002ddc <HAL_DMAEx_MultiBufferStart_IT+0xda8>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a11      	ldr	r2, [pc, #68]	; (8002dbc <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d02c      	beq.n	8002dd6 <HAL_DMAEx_MultiBufferStart_IT+0xda2>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a0f      	ldr	r2, [pc, #60]	; (8002dc0 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d124      	bne.n	8002dd0 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>
 8002d86:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d8a:	e040      	b.n	8002e0e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8002d8c:	40026000 	.word	0x40026000
 8002d90:	40026458 	.word	0x40026458
 8002d94:	40026010 	.word	0x40026010
 8002d98:	40026410 	.word	0x40026410
 8002d9c:	40026070 	.word	0x40026070
 8002da0:	40026470 	.word	0x40026470
 8002da4:	40026028 	.word	0x40026028
 8002da8:	40026428 	.word	0x40026428
 8002dac:	40026088 	.word	0x40026088
 8002db0:	40026488 	.word	0x40026488
 8002db4:	40026040 	.word	0x40026040
 8002db8:	40026440 	.word	0x40026440
 8002dbc:	400260a0 	.word	0x400260a0
 8002dc0:	400264a0 	.word	0x400264a0
 8002dc4:	40026400 	.word	0x40026400
 8002dc8:	400260b8 	.word	0x400260b8
 8002dcc:	40026058 	.word	0x40026058
 8002dd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002dd4:	e01b      	b.n	8002e0e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8002dd6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002dda:	e018      	b.n	8002e0e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8002ddc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002de0:	e015      	b.n	8002e0e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8002de2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002de6:	e012      	b.n	8002e0e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8002de8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002dec:	e00f      	b.n	8002e0e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8002dee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002df2:	e00c      	b.n	8002e0e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8002df4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002df8:	e009      	b.n	8002e0e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8002dfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002dfe:	e006      	b.n	8002e0e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8002e00:	2304      	movs	r3, #4
 8002e02:	e004      	b.n	8002e0e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8002e04:	2304      	movs	r3, #4
 8002e06:	e002      	b.n	8002e0e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8002e08:	2304      	movs	r3, #4
 8002e0a:	e000      	b.n	8002e0e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8002e0c:	2304      	movs	r3, #4
 8002e0e:	4a8b      	ldr	r2, [pc, #556]	; (800303c <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8002e10:	60d3      	str	r3, [r2, #12]
 8002e12:	e05f      	b.n	8002ed4 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a89      	ldr	r2, [pc, #548]	; (8003040 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d057      	beq.n	8002ece <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a88      	ldr	r2, [pc, #544]	; (8003044 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d050      	beq.n	8002eca <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a86      	ldr	r2, [pc, #536]	; (8003048 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d049      	beq.n	8002ec6 <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a85      	ldr	r2, [pc, #532]	; (800304c <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d042      	beq.n	8002ec2 <HAL_DMAEx_MultiBufferStart_IT+0xe8e>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a83      	ldr	r2, [pc, #524]	; (8003050 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d03a      	beq.n	8002ebc <HAL_DMAEx_MultiBufferStart_IT+0xe88>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a82      	ldr	r2, [pc, #520]	; (8003054 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d032      	beq.n	8002eb6 <HAL_DMAEx_MultiBufferStart_IT+0xe82>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a80      	ldr	r2, [pc, #512]	; (8003058 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d02a      	beq.n	8002eb0 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a7f      	ldr	r2, [pc, #508]	; (800305c <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d022      	beq.n	8002eaa <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a7d      	ldr	r2, [pc, #500]	; (8003060 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d01a      	beq.n	8002ea4 <HAL_DMAEx_MultiBufferStart_IT+0xe70>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a7c      	ldr	r2, [pc, #496]	; (8003064 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d012      	beq.n	8002e9e <HAL_DMAEx_MultiBufferStart_IT+0xe6a>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a7a      	ldr	r2, [pc, #488]	; (8003068 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d00a      	beq.n	8002e98 <HAL_DMAEx_MultiBufferStart_IT+0xe64>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a79      	ldr	r2, [pc, #484]	; (800306c <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d102      	bne.n	8002e92 <HAL_DMAEx_MultiBufferStart_IT+0xe5e>
 8002e8c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002e90:	e01e      	b.n	8002ed0 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8002e92:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e96:	e01b      	b.n	8002ed0 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8002e98:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002e9c:	e018      	b.n	8002ed0 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8002e9e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002ea2:	e015      	b.n	8002ed0 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8002ea4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002ea8:	e012      	b.n	8002ed0 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8002eaa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002eae:	e00f      	b.n	8002ed0 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8002eb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002eb4:	e00c      	b.n	8002ed0 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8002eb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002eba:	e009      	b.n	8002ed0 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8002ebc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ec0:	e006      	b.n	8002ed0 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8002ec2:	2304      	movs	r3, #4
 8002ec4:	e004      	b.n	8002ed0 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8002ec6:	2304      	movs	r3, #4
 8002ec8:	e002      	b.n	8002ed0 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8002eca:	2304      	movs	r3, #4
 8002ecc:	e000      	b.n	8002ed0 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8002ece:	2304      	movs	r3, #4
 8002ed0:	4a5a      	ldr	r2, [pc, #360]	; (800303c <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8002ed2:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	461a      	mov	r2, r3
 8002eda:	4b65      	ldr	r3, [pc, #404]	; (8003070 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d95c      	bls.n	8002f9a <HAL_DMAEx_MultiBufferStart_IT+0xf66>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a56      	ldr	r2, [pc, #344]	; (8003040 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d053      	beq.n	8002f92 <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a55      	ldr	r2, [pc, #340]	; (8003044 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d04c      	beq.n	8002f8e <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a53      	ldr	r2, [pc, #332]	; (8003048 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d045      	beq.n	8002f8a <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a52      	ldr	r2, [pc, #328]	; (800304c <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d03e      	beq.n	8002f86 <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a50      	ldr	r2, [pc, #320]	; (8003050 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d037      	beq.n	8002f82 <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a4f      	ldr	r2, [pc, #316]	; (8003054 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d030      	beq.n	8002f7e <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a4d      	ldr	r2, [pc, #308]	; (8003058 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d029      	beq.n	8002f7a <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a4c      	ldr	r2, [pc, #304]	; (800305c <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d022      	beq.n	8002f76 <HAL_DMAEx_MultiBufferStart_IT+0xf42>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a4a      	ldr	r2, [pc, #296]	; (8003060 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d01a      	beq.n	8002f70 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a49      	ldr	r2, [pc, #292]	; (8003064 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d012      	beq.n	8002f6a <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a47      	ldr	r2, [pc, #284]	; (8003068 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d00a      	beq.n	8002f64 <HAL_DMAEx_MultiBufferStart_IT+0xf30>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a46      	ldr	r2, [pc, #280]	; (800306c <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d102      	bne.n	8002f5e <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 8002f58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f5c:	e01a      	b.n	8002f94 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8002f5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002f62:	e017      	b.n	8002f94 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8002f64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f68:	e014      	b.n	8002f94 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8002f6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f6e:	e011      	b.n	8002f94 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8002f70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f74:	e00e      	b.n	8002f94 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8002f76:	2340      	movs	r3, #64	; 0x40
 8002f78:	e00c      	b.n	8002f94 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8002f7a:	2340      	movs	r3, #64	; 0x40
 8002f7c:	e00a      	b.n	8002f94 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8002f7e:	2340      	movs	r3, #64	; 0x40
 8002f80:	e008      	b.n	8002f94 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8002f82:	2340      	movs	r3, #64	; 0x40
 8002f84:	e006      	b.n	8002f94 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8002f86:	2301      	movs	r3, #1
 8002f88:	e004      	b.n	8002f94 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e002      	b.n	8002f94 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e000      	b.n	8002f94 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8002f92:	2301      	movs	r3, #1
 8002f94:	4a37      	ldr	r2, [pc, #220]	; (8003074 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8002f96:	60d3      	str	r3, [r2, #12]
 8002f98:	e141      	b.n	800321e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	4b35      	ldr	r3, [pc, #212]	; (8003078 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d97c      	bls.n	80030a0 <HAL_DMAEx_MultiBufferStart_IT+0x106c>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a25      	ldr	r2, [pc, #148]	; (8003040 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d073      	beq.n	8003098 <HAL_DMAEx_MultiBufferStart_IT+0x1064>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a23      	ldr	r2, [pc, #140]	; (8003044 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d06c      	beq.n	8003094 <HAL_DMAEx_MultiBufferStart_IT+0x1060>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a22      	ldr	r2, [pc, #136]	; (8003048 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d065      	beq.n	8003090 <HAL_DMAEx_MultiBufferStart_IT+0x105c>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a20      	ldr	r2, [pc, #128]	; (800304c <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d05e      	beq.n	800308c <HAL_DMAEx_MultiBufferStart_IT+0x1058>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a1f      	ldr	r2, [pc, #124]	; (8003050 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d057      	beq.n	8003088 <HAL_DMAEx_MultiBufferStart_IT+0x1054>
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a1d      	ldr	r2, [pc, #116]	; (8003054 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d050      	beq.n	8003084 <HAL_DMAEx_MultiBufferStart_IT+0x1050>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a1c      	ldr	r2, [pc, #112]	; (8003058 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d049      	beq.n	8003080 <HAL_DMAEx_MultiBufferStart_IT+0x104c>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a1a      	ldr	r2, [pc, #104]	; (800305c <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d042      	beq.n	800307c <HAL_DMAEx_MultiBufferStart_IT+0x1048>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a19      	ldr	r2, [pc, #100]	; (8003060 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d01a      	beq.n	8003036 <HAL_DMAEx_MultiBufferStart_IT+0x1002>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a17      	ldr	r2, [pc, #92]	; (8003064 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d012      	beq.n	8003030 <HAL_DMAEx_MultiBufferStart_IT+0xffc>
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a16      	ldr	r2, [pc, #88]	; (8003068 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d00a      	beq.n	800302a <HAL_DMAEx_MultiBufferStart_IT+0xff6>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a14      	ldr	r2, [pc, #80]	; (800306c <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d102      	bne.n	8003024 <HAL_DMAEx_MultiBufferStart_IT+0xff0>
 800301e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003022:	e03a      	b.n	800309a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003024:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003028:	e037      	b.n	800309a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800302a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800302e:	e034      	b.n	800309a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003030:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003034:	e031      	b.n	800309a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003036:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800303a:	e02e      	b.n	800309a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800303c:	40026000 	.word	0x40026000
 8003040:	40026010 	.word	0x40026010
 8003044:	40026410 	.word	0x40026410
 8003048:	40026070 	.word	0x40026070
 800304c:	40026470 	.word	0x40026470
 8003050:	40026028 	.word	0x40026028
 8003054:	40026428 	.word	0x40026428
 8003058:	40026088 	.word	0x40026088
 800305c:	40026488 	.word	0x40026488
 8003060:	40026040 	.word	0x40026040
 8003064:	40026440 	.word	0x40026440
 8003068:	400260a0 	.word	0x400260a0
 800306c:	400264a0 	.word	0x400264a0
 8003070:	40026458 	.word	0x40026458
 8003074:	40026400 	.word	0x40026400
 8003078:	400260b8 	.word	0x400260b8
 800307c:	2340      	movs	r3, #64	; 0x40
 800307e:	e00c      	b.n	800309a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003080:	2340      	movs	r3, #64	; 0x40
 8003082:	e00a      	b.n	800309a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003084:	2340      	movs	r3, #64	; 0x40
 8003086:	e008      	b.n	800309a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003088:	2340      	movs	r3, #64	; 0x40
 800308a:	e006      	b.n	800309a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800308c:	2301      	movs	r3, #1
 800308e:	e004      	b.n	800309a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003090:	2301      	movs	r3, #1
 8003092:	e002      	b.n	800309a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003094:	2301      	movs	r3, #1
 8003096:	e000      	b.n	800309a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003098:	2301      	movs	r3, #1
 800309a:	4a7b      	ldr	r2, [pc, #492]	; (8003288 <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 800309c:	6093      	str	r3, [r2, #8]
 800309e:	e0be      	b.n	800321e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	461a      	mov	r2, r3
 80030a6:	4b79      	ldr	r3, [pc, #484]	; (800328c <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d95c      	bls.n	8003166 <HAL_DMAEx_MultiBufferStart_IT+0x1132>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a77      	ldr	r2, [pc, #476]	; (8003290 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d053      	beq.n	800315e <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a76      	ldr	r2, [pc, #472]	; (8003294 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d04c      	beq.n	800315a <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a74      	ldr	r2, [pc, #464]	; (8003298 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d045      	beq.n	8003156 <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a73      	ldr	r2, [pc, #460]	; (800329c <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d03e      	beq.n	8003152 <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a71      	ldr	r2, [pc, #452]	; (80032a0 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d037      	beq.n	800314e <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a70      	ldr	r2, [pc, #448]	; (80032a4 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d030      	beq.n	800314a <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a6e      	ldr	r2, [pc, #440]	; (80032a8 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d029      	beq.n	8003146 <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a6d      	ldr	r2, [pc, #436]	; (80032ac <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d022      	beq.n	8003142 <HAL_DMAEx_MultiBufferStart_IT+0x110e>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a6b      	ldr	r2, [pc, #428]	; (80032b0 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d01a      	beq.n	800313c <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a6a      	ldr	r2, [pc, #424]	; (80032b4 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d012      	beq.n	8003136 <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a68      	ldr	r2, [pc, #416]	; (80032b8 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d00a      	beq.n	8003130 <HAL_DMAEx_MultiBufferStart_IT+0x10fc>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a67      	ldr	r2, [pc, #412]	; (80032bc <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d102      	bne.n	800312a <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 8003124:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003128:	e01a      	b.n	8003160 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800312a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800312e:	e017      	b.n	8003160 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003130:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003134:	e014      	b.n	8003160 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003136:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800313a:	e011      	b.n	8003160 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800313c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003140:	e00e      	b.n	8003160 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003142:	2340      	movs	r3, #64	; 0x40
 8003144:	e00c      	b.n	8003160 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003146:	2340      	movs	r3, #64	; 0x40
 8003148:	e00a      	b.n	8003160 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800314a:	2340      	movs	r3, #64	; 0x40
 800314c:	e008      	b.n	8003160 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800314e:	2340      	movs	r3, #64	; 0x40
 8003150:	e006      	b.n	8003160 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003152:	2301      	movs	r3, #1
 8003154:	e004      	b.n	8003160 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003156:	2301      	movs	r3, #1
 8003158:	e002      	b.n	8003160 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800315a:	2301      	movs	r3, #1
 800315c:	e000      	b.n	8003160 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800315e:	2301      	movs	r3, #1
 8003160:	4a57      	ldr	r2, [pc, #348]	; (80032c0 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8003162:	60d3      	str	r3, [r2, #12]
 8003164:	e05b      	b.n	800321e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a49      	ldr	r2, [pc, #292]	; (8003290 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d053      	beq.n	8003218 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a47      	ldr	r2, [pc, #284]	; (8003294 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d04c      	beq.n	8003214 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a46      	ldr	r2, [pc, #280]	; (8003298 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d045      	beq.n	8003210 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a44      	ldr	r2, [pc, #272]	; (800329c <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d03e      	beq.n	800320c <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a43      	ldr	r2, [pc, #268]	; (80032a0 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d037      	beq.n	8003208 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a41      	ldr	r2, [pc, #260]	; (80032a4 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d030      	beq.n	8003204 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a40      	ldr	r2, [pc, #256]	; (80032a8 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d029      	beq.n	8003200 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a3e      	ldr	r2, [pc, #248]	; (80032ac <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d022      	beq.n	80031fc <HAL_DMAEx_MultiBufferStart_IT+0x11c8>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a3d      	ldr	r2, [pc, #244]	; (80032b0 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d01a      	beq.n	80031f6 <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a3b      	ldr	r2, [pc, #236]	; (80032b4 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d012      	beq.n	80031f0 <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a3a      	ldr	r2, [pc, #232]	; (80032b8 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d00a      	beq.n	80031ea <HAL_DMAEx_MultiBufferStart_IT+0x11b6>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a38      	ldr	r2, [pc, #224]	; (80032bc <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d102      	bne.n	80031e4 <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 80031de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031e2:	e01a      	b.n	800321a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80031e4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80031e8:	e017      	b.n	800321a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80031ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031ee:	e014      	b.n	800321a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80031f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031f4:	e011      	b.n	800321a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80031f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031fa:	e00e      	b.n	800321a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80031fc:	2340      	movs	r3, #64	; 0x40
 80031fe:	e00c      	b.n	800321a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003200:	2340      	movs	r3, #64	; 0x40
 8003202:	e00a      	b.n	800321a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003204:	2340      	movs	r3, #64	; 0x40
 8003206:	e008      	b.n	800321a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003208:	2340      	movs	r3, #64	; 0x40
 800320a:	e006      	b.n	800321a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800320c:	2301      	movs	r3, #1
 800320e:	e004      	b.n	800321a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003210:	2301      	movs	r3, #1
 8003212:	e002      	b.n	800321a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003214:	2301      	movs	r3, #1
 8003216:	e000      	b.n	800321a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003218:	2301      	movs	r3, #1
 800321a:	4a29      	ldr	r2, [pc, #164]	; (80032c0 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 800321c:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f042 0216 	orr.w	r2, r2, #22
 800322c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	695a      	ldr	r2, [r3, #20]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800323c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003242:	2b00      	cmp	r3, #0
 8003244:	d103      	bne.n	800324e <HAL_DMAEx_MultiBufferStart_IT+0x121a>
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800324a:	2b00      	cmp	r3, #0
 800324c:	d007      	beq.n	800325e <HAL_DMAEx_MultiBufferStart_IT+0x122a>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f042 0208 	orr.w	r2, r2, #8
 800325c:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f042 0201 	orr.w	r2, r2, #1
 800326c:	601a      	str	r2, [r3, #0]
 800326e:	e005      	b.n	800327c <HAL_DMAEx_MultiBufferStart_IT+0x1248>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003278:	2302      	movs	r3, #2
 800327a:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 800327c:	7dfb      	ldrb	r3, [r7, #23]
}
 800327e:	4618      	mov	r0, r3
 8003280:	3718      	adds	r7, #24
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	40026400 	.word	0x40026400
 800328c:	40026058 	.word	0x40026058
 8003290:	40026010 	.word	0x40026010
 8003294:	40026410 	.word	0x40026410
 8003298:	40026070 	.word	0x40026070
 800329c:	40026470 	.word	0x40026470
 80032a0:	40026028 	.word	0x40026028
 80032a4:	40026428 	.word	0x40026428
 80032a8:	40026088 	.word	0x40026088
 80032ac:	40026488 	.word	0x40026488
 80032b0:	40026040 	.word	0x40026040
 80032b4:	40026440 	.word	0x40026440
 80032b8:	400260a0 	.word	0x400260a0
 80032bc:	400264a0 	.word	0x400264a0
 80032c0:	40026000 	.word	0x40026000

080032c4 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b085      	sub	sp, #20
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	4613      	mov	r3, r2
 80032d0:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 80032d2:	79fb      	ldrb	r3, [r7, #7]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d104      	bne.n	80032e2 <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68ba      	ldr	r2, [r7, #8]
 80032de:	60da      	str	r2, [r3, #12]
 80032e0:	e003      	b.n	80032ea <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68ba      	ldr	r2, [r7, #8]
 80032e8:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3714      	adds	r7, #20
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
 8003304:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	683a      	ldr	r2, [r7, #0]
 800330c:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	2b40      	cmp	r3, #64	; 0x40
 8003314:	d108      	bne.n	8003328 <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68ba      	ldr	r2, [r7, #8]
 8003324:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003326:	e007      	b.n	8003338 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68ba      	ldr	r2, [r7, #8]
 800332e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	60da      	str	r2, [r3, #12]
}
 8003338:	bf00      	nop
 800333a:	3714      	adds	r7, #20
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003344:	b480      	push	{r7}
 8003346:	b089      	sub	sp, #36	; 0x24
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800334e:	2300      	movs	r3, #0
 8003350:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003352:	2300      	movs	r3, #0
 8003354:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003356:	2300      	movs	r3, #0
 8003358:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800335a:	2300      	movs	r3, #0
 800335c:	61fb      	str	r3, [r7, #28]
 800335e:	e16b      	b.n	8003638 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003360:	2201      	movs	r2, #1
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	fa02 f303 	lsl.w	r3, r2, r3
 8003368:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	697a      	ldr	r2, [r7, #20]
 8003370:	4013      	ands	r3, r2
 8003372:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	429a      	cmp	r2, r3
 800337a:	f040 815a 	bne.w	8003632 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f003 0303 	and.w	r3, r3, #3
 8003386:	2b01      	cmp	r3, #1
 8003388:	d005      	beq.n	8003396 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003392:	2b02      	cmp	r3, #2
 8003394:	d130      	bne.n	80033f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	2203      	movs	r2, #3
 80033a2:	fa02 f303 	lsl.w	r3, r2, r3
 80033a6:	43db      	mvns	r3, r3
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	4013      	ands	r3, r2
 80033ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	68da      	ldr	r2, [r3, #12]
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	005b      	lsls	r3, r3, #1
 80033b6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ba:	69ba      	ldr	r2, [r7, #24]
 80033bc:	4313      	orrs	r3, r2
 80033be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	69ba      	ldr	r2, [r7, #24]
 80033c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033cc:	2201      	movs	r2, #1
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	fa02 f303 	lsl.w	r3, r2, r3
 80033d4:	43db      	mvns	r3, r3
 80033d6:	69ba      	ldr	r2, [r7, #24]
 80033d8:	4013      	ands	r3, r2
 80033da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	091b      	lsrs	r3, r3, #4
 80033e2:	f003 0201 	and.w	r2, r3, #1
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f003 0303 	and.w	r3, r3, #3
 8003400:	2b03      	cmp	r3, #3
 8003402:	d017      	beq.n	8003434 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	2203      	movs	r2, #3
 8003410:	fa02 f303 	lsl.w	r3, r2, r3
 8003414:	43db      	mvns	r3, r3
 8003416:	69ba      	ldr	r2, [r7, #24]
 8003418:	4013      	ands	r3, r2
 800341a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	689a      	ldr	r2, [r3, #8]
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	fa02 f303 	lsl.w	r3, r2, r3
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	4313      	orrs	r3, r2
 800342c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f003 0303 	and.w	r3, r3, #3
 800343c:	2b02      	cmp	r3, #2
 800343e:	d123      	bne.n	8003488 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	08da      	lsrs	r2, r3, #3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	3208      	adds	r2, #8
 8003448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800344c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	f003 0307 	and.w	r3, r3, #7
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	220f      	movs	r2, #15
 8003458:	fa02 f303 	lsl.w	r3, r2, r3
 800345c:	43db      	mvns	r3, r3
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	4013      	ands	r3, r2
 8003462:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	691a      	ldr	r2, [r3, #16]
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	f003 0307 	and.w	r3, r3, #7
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	4313      	orrs	r3, r2
 8003478:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	08da      	lsrs	r2, r3, #3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	3208      	adds	r2, #8
 8003482:	69b9      	ldr	r1, [r7, #24]
 8003484:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	2203      	movs	r2, #3
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	43db      	mvns	r3, r3
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	4013      	ands	r3, r2
 800349e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f003 0203 	and.w	r2, r3, #3
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f000 80b4 	beq.w	8003632 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034ca:	2300      	movs	r3, #0
 80034cc:	60fb      	str	r3, [r7, #12]
 80034ce:	4b60      	ldr	r3, [pc, #384]	; (8003650 <HAL_GPIO_Init+0x30c>)
 80034d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d2:	4a5f      	ldr	r2, [pc, #380]	; (8003650 <HAL_GPIO_Init+0x30c>)
 80034d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034d8:	6453      	str	r3, [r2, #68]	; 0x44
 80034da:	4b5d      	ldr	r3, [pc, #372]	; (8003650 <HAL_GPIO_Init+0x30c>)
 80034dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034e2:	60fb      	str	r3, [r7, #12]
 80034e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034e6:	4a5b      	ldr	r2, [pc, #364]	; (8003654 <HAL_GPIO_Init+0x310>)
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	089b      	lsrs	r3, r3, #2
 80034ec:	3302      	adds	r3, #2
 80034ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	f003 0303 	and.w	r3, r3, #3
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	220f      	movs	r2, #15
 80034fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003502:	43db      	mvns	r3, r3
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	4013      	ands	r3, r2
 8003508:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a52      	ldr	r2, [pc, #328]	; (8003658 <HAL_GPIO_Init+0x314>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d02b      	beq.n	800356a <HAL_GPIO_Init+0x226>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a51      	ldr	r2, [pc, #324]	; (800365c <HAL_GPIO_Init+0x318>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d025      	beq.n	8003566 <HAL_GPIO_Init+0x222>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a50      	ldr	r2, [pc, #320]	; (8003660 <HAL_GPIO_Init+0x31c>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d01f      	beq.n	8003562 <HAL_GPIO_Init+0x21e>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a4f      	ldr	r2, [pc, #316]	; (8003664 <HAL_GPIO_Init+0x320>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d019      	beq.n	800355e <HAL_GPIO_Init+0x21a>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a4e      	ldr	r2, [pc, #312]	; (8003668 <HAL_GPIO_Init+0x324>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d013      	beq.n	800355a <HAL_GPIO_Init+0x216>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a4d      	ldr	r2, [pc, #308]	; (800366c <HAL_GPIO_Init+0x328>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d00d      	beq.n	8003556 <HAL_GPIO_Init+0x212>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a4c      	ldr	r2, [pc, #304]	; (8003670 <HAL_GPIO_Init+0x32c>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d007      	beq.n	8003552 <HAL_GPIO_Init+0x20e>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a4b      	ldr	r2, [pc, #300]	; (8003674 <HAL_GPIO_Init+0x330>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d101      	bne.n	800354e <HAL_GPIO_Init+0x20a>
 800354a:	2307      	movs	r3, #7
 800354c:	e00e      	b.n	800356c <HAL_GPIO_Init+0x228>
 800354e:	2308      	movs	r3, #8
 8003550:	e00c      	b.n	800356c <HAL_GPIO_Init+0x228>
 8003552:	2306      	movs	r3, #6
 8003554:	e00a      	b.n	800356c <HAL_GPIO_Init+0x228>
 8003556:	2305      	movs	r3, #5
 8003558:	e008      	b.n	800356c <HAL_GPIO_Init+0x228>
 800355a:	2304      	movs	r3, #4
 800355c:	e006      	b.n	800356c <HAL_GPIO_Init+0x228>
 800355e:	2303      	movs	r3, #3
 8003560:	e004      	b.n	800356c <HAL_GPIO_Init+0x228>
 8003562:	2302      	movs	r3, #2
 8003564:	e002      	b.n	800356c <HAL_GPIO_Init+0x228>
 8003566:	2301      	movs	r3, #1
 8003568:	e000      	b.n	800356c <HAL_GPIO_Init+0x228>
 800356a:	2300      	movs	r3, #0
 800356c:	69fa      	ldr	r2, [r7, #28]
 800356e:	f002 0203 	and.w	r2, r2, #3
 8003572:	0092      	lsls	r2, r2, #2
 8003574:	4093      	lsls	r3, r2
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	4313      	orrs	r3, r2
 800357a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800357c:	4935      	ldr	r1, [pc, #212]	; (8003654 <HAL_GPIO_Init+0x310>)
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	089b      	lsrs	r3, r3, #2
 8003582:	3302      	adds	r3, #2
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800358a:	4b3b      	ldr	r3, [pc, #236]	; (8003678 <HAL_GPIO_Init+0x334>)
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	43db      	mvns	r3, r3
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	4013      	ands	r3, r2
 8003598:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d003      	beq.n	80035ae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80035a6:	69ba      	ldr	r2, [r7, #24]
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035ae:	4a32      	ldr	r2, [pc, #200]	; (8003678 <HAL_GPIO_Init+0x334>)
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035b4:	4b30      	ldr	r3, [pc, #192]	; (8003678 <HAL_GPIO_Init+0x334>)
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	43db      	mvns	r3, r3
 80035be:	69ba      	ldr	r2, [r7, #24]
 80035c0:	4013      	ands	r3, r2
 80035c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d003      	beq.n	80035d8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035d8:	4a27      	ldr	r2, [pc, #156]	; (8003678 <HAL_GPIO_Init+0x334>)
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80035de:	4b26      	ldr	r3, [pc, #152]	; (8003678 <HAL_GPIO_Init+0x334>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	43db      	mvns	r3, r3
 80035e8:	69ba      	ldr	r2, [r7, #24]
 80035ea:	4013      	ands	r3, r2
 80035ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	4313      	orrs	r3, r2
 8003600:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003602:	4a1d      	ldr	r2, [pc, #116]	; (8003678 <HAL_GPIO_Init+0x334>)
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003608:	4b1b      	ldr	r3, [pc, #108]	; (8003678 <HAL_GPIO_Init+0x334>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	43db      	mvns	r3, r3
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	4013      	ands	r3, r2
 8003616:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d003      	beq.n	800362c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	4313      	orrs	r3, r2
 800362a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800362c:	4a12      	ldr	r2, [pc, #72]	; (8003678 <HAL_GPIO_Init+0x334>)
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	3301      	adds	r3, #1
 8003636:	61fb      	str	r3, [r7, #28]
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	2b0f      	cmp	r3, #15
 800363c:	f67f ae90 	bls.w	8003360 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003640:	bf00      	nop
 8003642:	bf00      	nop
 8003644:	3724      	adds	r7, #36	; 0x24
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	40023800 	.word	0x40023800
 8003654:	40013800 	.word	0x40013800
 8003658:	40020000 	.word	0x40020000
 800365c:	40020400 	.word	0x40020400
 8003660:	40020800 	.word	0x40020800
 8003664:	40020c00 	.word	0x40020c00
 8003668:	40021000 	.word	0x40021000
 800366c:	40021400 	.word	0x40021400
 8003670:	40021800 	.word	0x40021800
 8003674:	40021c00 	.word	0x40021c00
 8003678:	40013c00 	.word	0x40013c00

0800367c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e12b      	b.n	80038e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d106      	bne.n	80036a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7fd fc88 	bl	8000fb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2224      	movs	r2, #36	; 0x24
 80036ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f022 0201 	bic.w	r2, r2, #1
 80036be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036e0:	f001 fdca 	bl	8005278 <HAL_RCC_GetPCLK1Freq>
 80036e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	4a81      	ldr	r2, [pc, #516]	; (80038f0 <HAL_I2C_Init+0x274>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d807      	bhi.n	8003700 <HAL_I2C_Init+0x84>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	4a80      	ldr	r2, [pc, #512]	; (80038f4 <HAL_I2C_Init+0x278>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	bf94      	ite	ls
 80036f8:	2301      	movls	r3, #1
 80036fa:	2300      	movhi	r3, #0
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	e006      	b.n	800370e <HAL_I2C_Init+0x92>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	4a7d      	ldr	r2, [pc, #500]	; (80038f8 <HAL_I2C_Init+0x27c>)
 8003704:	4293      	cmp	r3, r2
 8003706:	bf94      	ite	ls
 8003708:	2301      	movls	r3, #1
 800370a:	2300      	movhi	r3, #0
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b00      	cmp	r3, #0
 8003710:	d001      	beq.n	8003716 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e0e7      	b.n	80038e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	4a78      	ldr	r2, [pc, #480]	; (80038fc <HAL_I2C_Init+0x280>)
 800371a:	fba2 2303 	umull	r2, r3, r2, r3
 800371e:	0c9b      	lsrs	r3, r3, #18
 8003720:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68ba      	ldr	r2, [r7, #8]
 8003732:	430a      	orrs	r2, r1
 8003734:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	6a1b      	ldr	r3, [r3, #32]
 800373c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	4a6a      	ldr	r2, [pc, #424]	; (80038f0 <HAL_I2C_Init+0x274>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d802      	bhi.n	8003750 <HAL_I2C_Init+0xd4>
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	3301      	adds	r3, #1
 800374e:	e009      	b.n	8003764 <HAL_I2C_Init+0xe8>
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003756:	fb02 f303 	mul.w	r3, r2, r3
 800375a:	4a69      	ldr	r2, [pc, #420]	; (8003900 <HAL_I2C_Init+0x284>)
 800375c:	fba2 2303 	umull	r2, r3, r2, r3
 8003760:	099b      	lsrs	r3, r3, #6
 8003762:	3301      	adds	r3, #1
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	6812      	ldr	r2, [r2, #0]
 8003768:	430b      	orrs	r3, r1
 800376a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	69db      	ldr	r3, [r3, #28]
 8003772:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003776:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	495c      	ldr	r1, [pc, #368]	; (80038f0 <HAL_I2C_Init+0x274>)
 8003780:	428b      	cmp	r3, r1
 8003782:	d819      	bhi.n	80037b8 <HAL_I2C_Init+0x13c>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	1e59      	subs	r1, r3, #1
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003792:	1c59      	adds	r1, r3, #1
 8003794:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003798:	400b      	ands	r3, r1
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00a      	beq.n	80037b4 <HAL_I2C_Init+0x138>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	1e59      	subs	r1, r3, #1
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80037ac:	3301      	adds	r3, #1
 80037ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037b2:	e051      	b.n	8003858 <HAL_I2C_Init+0x1dc>
 80037b4:	2304      	movs	r3, #4
 80037b6:	e04f      	b.n	8003858 <HAL_I2C_Init+0x1dc>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d111      	bne.n	80037e4 <HAL_I2C_Init+0x168>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	1e58      	subs	r0, r3, #1
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6859      	ldr	r1, [r3, #4]
 80037c8:	460b      	mov	r3, r1
 80037ca:	005b      	lsls	r3, r3, #1
 80037cc:	440b      	add	r3, r1
 80037ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80037d2:	3301      	adds	r3, #1
 80037d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037d8:	2b00      	cmp	r3, #0
 80037da:	bf0c      	ite	eq
 80037dc:	2301      	moveq	r3, #1
 80037de:	2300      	movne	r3, #0
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	e012      	b.n	800380a <HAL_I2C_Init+0x18e>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	1e58      	subs	r0, r3, #1
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6859      	ldr	r1, [r3, #4]
 80037ec:	460b      	mov	r3, r1
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	440b      	add	r3, r1
 80037f2:	0099      	lsls	r1, r3, #2
 80037f4:	440b      	add	r3, r1
 80037f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80037fa:	3301      	adds	r3, #1
 80037fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003800:	2b00      	cmp	r3, #0
 8003802:	bf0c      	ite	eq
 8003804:	2301      	moveq	r3, #1
 8003806:	2300      	movne	r3, #0
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d001      	beq.n	8003812 <HAL_I2C_Init+0x196>
 800380e:	2301      	movs	r3, #1
 8003810:	e022      	b.n	8003858 <HAL_I2C_Init+0x1dc>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d10e      	bne.n	8003838 <HAL_I2C_Init+0x1bc>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	1e58      	subs	r0, r3, #1
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6859      	ldr	r1, [r3, #4]
 8003822:	460b      	mov	r3, r1
 8003824:	005b      	lsls	r3, r3, #1
 8003826:	440b      	add	r3, r1
 8003828:	fbb0 f3f3 	udiv	r3, r0, r3
 800382c:	3301      	adds	r3, #1
 800382e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003832:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003836:	e00f      	b.n	8003858 <HAL_I2C_Init+0x1dc>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	1e58      	subs	r0, r3, #1
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6859      	ldr	r1, [r3, #4]
 8003840:	460b      	mov	r3, r1
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	440b      	add	r3, r1
 8003846:	0099      	lsls	r1, r3, #2
 8003848:	440b      	add	r3, r1
 800384a:	fbb0 f3f3 	udiv	r3, r0, r3
 800384e:	3301      	adds	r3, #1
 8003850:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003854:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003858:	6879      	ldr	r1, [r7, #4]
 800385a:	6809      	ldr	r1, [r1, #0]
 800385c:	4313      	orrs	r3, r2
 800385e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	69da      	ldr	r2, [r3, #28]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a1b      	ldr	r3, [r3, #32]
 8003872:	431a      	orrs	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	430a      	orrs	r2, r1
 800387a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003886:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	6911      	ldr	r1, [r2, #16]
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	68d2      	ldr	r2, [r2, #12]
 8003892:	4311      	orrs	r1, r2
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	6812      	ldr	r2, [r2, #0]
 8003898:	430b      	orrs	r3, r1
 800389a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	695a      	ldr	r2, [r3, #20]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	431a      	orrs	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	430a      	orrs	r2, r1
 80038b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f042 0201 	orr.w	r2, r2, #1
 80038c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2220      	movs	r2, #32
 80038d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	000186a0 	.word	0x000186a0
 80038f4:	001e847f 	.word	0x001e847f
 80038f8:	003d08ff 	.word	0x003d08ff
 80038fc:	431bde83 	.word	0x431bde83
 8003900:	10624dd3 	.word	0x10624dd3

08003904 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b088      	sub	sp, #32
 8003908:	af02      	add	r7, sp, #8
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	607a      	str	r2, [r7, #4]
 800390e:	461a      	mov	r2, r3
 8003910:	460b      	mov	r3, r1
 8003912:	817b      	strh	r3, [r7, #10]
 8003914:	4613      	mov	r3, r2
 8003916:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003918:	f7fd fc76 	bl	8001208 <HAL_GetTick>
 800391c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b20      	cmp	r3, #32
 8003928:	f040 80e0 	bne.w	8003aec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	9300      	str	r3, [sp, #0]
 8003930:	2319      	movs	r3, #25
 8003932:	2201      	movs	r2, #1
 8003934:	4970      	ldr	r1, [pc, #448]	; (8003af8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f000 fde8 	bl	800450c <I2C_WaitOnFlagUntilTimeout>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003942:	2302      	movs	r3, #2
 8003944:	e0d3      	b.n	8003aee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800394c:	2b01      	cmp	r3, #1
 800394e:	d101      	bne.n	8003954 <HAL_I2C_Master_Transmit+0x50>
 8003950:	2302      	movs	r3, #2
 8003952:	e0cc      	b.n	8003aee <HAL_I2C_Master_Transmit+0x1ea>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	2b01      	cmp	r3, #1
 8003968:	d007      	beq.n	800397a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f042 0201 	orr.w	r2, r2, #1
 8003978:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003988:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2221      	movs	r2, #33	; 0x21
 800398e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2210      	movs	r2, #16
 8003996:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	893a      	ldrh	r2, [r7, #8]
 80039aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	4a50      	ldr	r2, [pc, #320]	; (8003afc <HAL_I2C_Master_Transmit+0x1f8>)
 80039ba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80039bc:	8979      	ldrh	r1, [r7, #10]
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	6a3a      	ldr	r2, [r7, #32]
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f000 fbbc 	bl	8004140 <I2C_MasterRequestWrite>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e08d      	b.n	8003aee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039d2:	2300      	movs	r3, #0
 80039d4:	613b      	str	r3, [r7, #16]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	695b      	ldr	r3, [r3, #20]
 80039dc:	613b      	str	r3, [r7, #16]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	613b      	str	r3, [r7, #16]
 80039e6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80039e8:	e066      	b.n	8003ab8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	6a39      	ldr	r1, [r7, #32]
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	f000 fe62 	bl	80046b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00d      	beq.n	8003a16 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fe:	2b04      	cmp	r3, #4
 8003a00:	d107      	bne.n	8003a12 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a10:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e06b      	b.n	8003aee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1a:	781a      	ldrb	r2, [r3, #0]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a26:	1c5a      	adds	r2, r3, #1
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	3b01      	subs	r3, #1
 8003a34:	b29a      	uxth	r2, r3
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	695b      	ldr	r3, [r3, #20]
 8003a4c:	f003 0304 	and.w	r3, r3, #4
 8003a50:	2b04      	cmp	r3, #4
 8003a52:	d11b      	bne.n	8003a8c <HAL_I2C_Master_Transmit+0x188>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d017      	beq.n	8003a8c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a60:	781a      	ldrb	r2, [r3, #0]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6c:	1c5a      	adds	r2, r3, #1
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	b29a      	uxth	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a84:	3b01      	subs	r3, #1
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a8c:	697a      	ldr	r2, [r7, #20]
 8003a8e:	6a39      	ldr	r1, [r7, #32]
 8003a90:	68f8      	ldr	r0, [r7, #12]
 8003a92:	f000 fe52 	bl	800473a <I2C_WaitOnBTFFlagUntilTimeout>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00d      	beq.n	8003ab8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa0:	2b04      	cmp	r3, #4
 8003aa2:	d107      	bne.n	8003ab4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ab2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e01a      	b.n	8003aee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d194      	bne.n	80039ea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ace:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2220      	movs	r2, #32
 8003ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	e000      	b.n	8003aee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003aec:	2302      	movs	r3, #2
  }
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3718      	adds	r7, #24
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	00100002 	.word	0x00100002
 8003afc:	ffff0000 	.word	0xffff0000

08003b00 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b08c      	sub	sp, #48	; 0x30
 8003b04:	af02      	add	r7, sp, #8
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	607a      	str	r2, [r7, #4]
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	817b      	strh	r3, [r7, #10]
 8003b10:	4613      	mov	r3, r2
 8003b12:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b14:	f7fd fb78 	bl	8001208 <HAL_GetTick>
 8003b18:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b20      	cmp	r3, #32
 8003b24:	f040 820b 	bne.w	8003f3e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2a:	9300      	str	r3, [sp, #0]
 8003b2c:	2319      	movs	r3, #25
 8003b2e:	2201      	movs	r2, #1
 8003b30:	497c      	ldr	r1, [pc, #496]	; (8003d24 <HAL_I2C_Master_Receive+0x224>)
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	f000 fcea 	bl	800450c <I2C_WaitOnFlagUntilTimeout>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d001      	beq.n	8003b42 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003b3e:	2302      	movs	r3, #2
 8003b40:	e1fe      	b.n	8003f40 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d101      	bne.n	8003b50 <HAL_I2C_Master_Receive+0x50>
 8003b4c:	2302      	movs	r3, #2
 8003b4e:	e1f7      	b.n	8003f40 <HAL_I2C_Master_Receive+0x440>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d007      	beq.n	8003b76 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f042 0201 	orr.w	r2, r2, #1
 8003b74:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b84:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2222      	movs	r2, #34	; 0x22
 8003b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2210      	movs	r2, #16
 8003b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	893a      	ldrh	r2, [r7, #8]
 8003ba6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	4a5c      	ldr	r2, [pc, #368]	; (8003d28 <HAL_I2C_Master_Receive+0x228>)
 8003bb6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003bb8:	8979      	ldrh	r1, [r7, #10]
 8003bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f000 fb40 	bl	8004244 <I2C_MasterRequestRead>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d001      	beq.n	8003bce <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e1b8      	b.n	8003f40 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d113      	bne.n	8003bfe <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	623b      	str	r3, [r7, #32]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	695b      	ldr	r3, [r3, #20]
 8003be0:	623b      	str	r3, [r7, #32]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	623b      	str	r3, [r7, #32]
 8003bea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bfa:	601a      	str	r2, [r3, #0]
 8003bfc:	e18c      	b.n	8003f18 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d11b      	bne.n	8003c3e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c14:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c16:	2300      	movs	r3, #0
 8003c18:	61fb      	str	r3, [r7, #28]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	695b      	ldr	r3, [r3, #20]
 8003c20:	61fb      	str	r3, [r7, #28]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	61fb      	str	r3, [r7, #28]
 8003c2a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c3a:	601a      	str	r2, [r3, #0]
 8003c3c:	e16c      	b.n	8003f18 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d11b      	bne.n	8003c7e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c54:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c64:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c66:	2300      	movs	r3, #0
 8003c68:	61bb      	str	r3, [r7, #24]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	695b      	ldr	r3, [r3, #20]
 8003c70:	61bb      	str	r3, [r7, #24]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	699b      	ldr	r3, [r3, #24]
 8003c78:	61bb      	str	r3, [r7, #24]
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	e14c      	b.n	8003f18 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c8e:	2300      	movs	r3, #0
 8003c90:	617b      	str	r3, [r7, #20]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	695b      	ldr	r3, [r3, #20]
 8003c98:	617b      	str	r3, [r7, #20]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	617b      	str	r3, [r7, #20]
 8003ca2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003ca4:	e138      	b.n	8003f18 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003caa:	2b03      	cmp	r3, #3
 8003cac:	f200 80f1 	bhi.w	8003e92 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d123      	bne.n	8003d00 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	f000 fd7d 	bl	80047bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d001      	beq.n	8003ccc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e139      	b.n	8003f40 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	691a      	ldr	r2, [r3, #16]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd6:	b2d2      	uxtb	r2, r2
 8003cd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cde:	1c5a      	adds	r2, r3, #1
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ce8:	3b01      	subs	r3, #1
 8003cea:	b29a      	uxth	r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003cfe:	e10b      	b.n	8003f18 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d14e      	bne.n	8003da6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0a:	9300      	str	r3, [sp, #0]
 8003d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0e:	2200      	movs	r2, #0
 8003d10:	4906      	ldr	r1, [pc, #24]	; (8003d2c <HAL_I2C_Master_Receive+0x22c>)
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	f000 fbfa 	bl	800450c <I2C_WaitOnFlagUntilTimeout>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d008      	beq.n	8003d30 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e10e      	b.n	8003f40 <HAL_I2C_Master_Receive+0x440>
 8003d22:	bf00      	nop
 8003d24:	00100002 	.word	0x00100002
 8003d28:	ffff0000 	.word	0xffff0000
 8003d2c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	691a      	ldr	r2, [r3, #16]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4a:	b2d2      	uxtb	r2, r2
 8003d4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d52:	1c5a      	adds	r2, r3, #1
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	691a      	ldr	r2, [r3, #16]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7c:	b2d2      	uxtb	r2, r2
 8003d7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d84:	1c5a      	adds	r2, r3, #1
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	b29a      	uxth	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	b29a      	uxth	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003da4:	e0b8      	b.n	8003f18 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da8:	9300      	str	r3, [sp, #0]
 8003daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dac:	2200      	movs	r2, #0
 8003dae:	4966      	ldr	r1, [pc, #408]	; (8003f48 <HAL_I2C_Master_Receive+0x448>)
 8003db0:	68f8      	ldr	r0, [r7, #12]
 8003db2:	f000 fbab 	bl	800450c <I2C_WaitOnFlagUntilTimeout>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d001      	beq.n	8003dc0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e0bf      	b.n	8003f40 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	691a      	ldr	r2, [r3, #16]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dda:	b2d2      	uxtb	r2, r2
 8003ddc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de2:	1c5a      	adds	r2, r3, #1
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dec:	3b01      	subs	r3, #1
 8003dee:	b29a      	uxth	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	b29a      	uxth	r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e04:	9300      	str	r3, [sp, #0]
 8003e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e08:	2200      	movs	r2, #0
 8003e0a:	494f      	ldr	r1, [pc, #316]	; (8003f48 <HAL_I2C_Master_Receive+0x448>)
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f000 fb7d 	bl	800450c <I2C_WaitOnFlagUntilTimeout>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d001      	beq.n	8003e1c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e091      	b.n	8003f40 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	691a      	ldr	r2, [r3, #16]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e36:	b2d2      	uxtb	r2, r2
 8003e38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3e:	1c5a      	adds	r2, r3, #1
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	3b01      	subs	r3, #1
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	691a      	ldr	r2, [r3, #16]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e68:	b2d2      	uxtb	r2, r2
 8003e6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e70:	1c5a      	adds	r2, r3, #1
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	b29a      	uxth	r2, r3
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	b29a      	uxth	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e90:	e042      	b.n	8003f18 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e96:	68f8      	ldr	r0, [r7, #12]
 8003e98:	f000 fc90 	bl	80047bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d001      	beq.n	8003ea6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e04c      	b.n	8003f40 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	691a      	ldr	r2, [r3, #16]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb0:	b2d2      	uxtb	r2, r2
 8003eb2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb8:	1c5a      	adds	r2, r3, #1
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	f003 0304 	and.w	r3, r3, #4
 8003ee2:	2b04      	cmp	r3, #4
 8003ee4:	d118      	bne.n	8003f18 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	691a      	ldr	r2, [r3, #16]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef0:	b2d2      	uxtb	r2, r2
 8003ef2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef8:	1c5a      	adds	r2, r3, #1
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f02:	3b01      	subs	r3, #1
 8003f04:	b29a      	uxth	r2, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	3b01      	subs	r3, #1
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f47f aec2 	bne.w	8003ca6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2220      	movs	r2, #32
 8003f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	e000      	b.n	8003f40 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003f3e:	2302      	movs	r3, #2
  }
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3728      	adds	r7, #40	; 0x28
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	00010004 	.word	0x00010004

08003f4c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b088      	sub	sp, #32
 8003f50:	af02      	add	r7, sp, #8
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	4608      	mov	r0, r1
 8003f56:	4611      	mov	r1, r2
 8003f58:	461a      	mov	r2, r3
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	817b      	strh	r3, [r7, #10]
 8003f5e:	460b      	mov	r3, r1
 8003f60:	813b      	strh	r3, [r7, #8]
 8003f62:	4613      	mov	r3, r2
 8003f64:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f66:	f7fd f94f 	bl	8001208 <HAL_GetTick>
 8003f6a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	2b20      	cmp	r3, #32
 8003f76:	f040 80d9 	bne.w	800412c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	9300      	str	r3, [sp, #0]
 8003f7e:	2319      	movs	r3, #25
 8003f80:	2201      	movs	r2, #1
 8003f82:	496d      	ldr	r1, [pc, #436]	; (8004138 <HAL_I2C_Mem_Write+0x1ec>)
 8003f84:	68f8      	ldr	r0, [r7, #12]
 8003f86:	f000 fac1 	bl	800450c <I2C_WaitOnFlagUntilTimeout>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d001      	beq.n	8003f94 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003f90:	2302      	movs	r3, #2
 8003f92:	e0cc      	b.n	800412e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d101      	bne.n	8003fa2 <HAL_I2C_Mem_Write+0x56>
 8003f9e:	2302      	movs	r3, #2
 8003fa0:	e0c5      	b.n	800412e <HAL_I2C_Mem_Write+0x1e2>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0301 	and.w	r3, r3, #1
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d007      	beq.n	8003fc8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f042 0201 	orr.w	r2, r2, #1
 8003fc6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fd6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2221      	movs	r2, #33	; 0x21
 8003fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2240      	movs	r2, #64	; 0x40
 8003fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6a3a      	ldr	r2, [r7, #32]
 8003ff2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003ff8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ffe:	b29a      	uxth	r2, r3
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	4a4d      	ldr	r2, [pc, #308]	; (800413c <HAL_I2C_Mem_Write+0x1f0>)
 8004008:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800400a:	88f8      	ldrh	r0, [r7, #6]
 800400c:	893a      	ldrh	r2, [r7, #8]
 800400e:	8979      	ldrh	r1, [r7, #10]
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	9301      	str	r3, [sp, #4]
 8004014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004016:	9300      	str	r3, [sp, #0]
 8004018:	4603      	mov	r3, r0
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f000 f9e0 	bl	80043e0 <I2C_RequestMemoryWrite>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d052      	beq.n	80040cc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e081      	b.n	800412e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800402e:	68f8      	ldr	r0, [r7, #12]
 8004030:	f000 fb42 	bl	80046b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00d      	beq.n	8004056 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403e:	2b04      	cmp	r3, #4
 8004040:	d107      	bne.n	8004052 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004050:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e06b      	b.n	800412e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405a:	781a      	ldrb	r2, [r3, #0]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004066:	1c5a      	adds	r2, r3, #1
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004070:	3b01      	subs	r3, #1
 8004072:	b29a      	uxth	r2, r3
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800407c:	b29b      	uxth	r3, r3
 800407e:	3b01      	subs	r3, #1
 8004080:	b29a      	uxth	r2, r3
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	695b      	ldr	r3, [r3, #20]
 800408c:	f003 0304 	and.w	r3, r3, #4
 8004090:	2b04      	cmp	r3, #4
 8004092:	d11b      	bne.n	80040cc <HAL_I2C_Mem_Write+0x180>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004098:	2b00      	cmp	r3, #0
 800409a:	d017      	beq.n	80040cc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a0:	781a      	ldrb	r2, [r3, #0]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ac:	1c5a      	adds	r2, r3, #1
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040b6:	3b01      	subs	r3, #1
 80040b8:	b29a      	uxth	r2, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	3b01      	subs	r3, #1
 80040c6:	b29a      	uxth	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1aa      	bne.n	800402a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040d8:	68f8      	ldr	r0, [r7, #12]
 80040da:	f000 fb2e 	bl	800473a <I2C_WaitOnBTFFlagUntilTimeout>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00d      	beq.n	8004100 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e8:	2b04      	cmp	r3, #4
 80040ea:	d107      	bne.n	80040fc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040fa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e016      	b.n	800412e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800410e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2220      	movs	r2, #32
 8004114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2200      	movs	r2, #0
 800411c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004128:	2300      	movs	r3, #0
 800412a:	e000      	b.n	800412e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800412c:	2302      	movs	r3, #2
  }
}
 800412e:	4618      	mov	r0, r3
 8004130:	3718      	adds	r7, #24
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	00100002 	.word	0x00100002
 800413c:	ffff0000 	.word	0xffff0000

08004140 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b088      	sub	sp, #32
 8004144:	af02      	add	r7, sp, #8
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	607a      	str	r2, [r7, #4]
 800414a:	603b      	str	r3, [r7, #0]
 800414c:	460b      	mov	r3, r1
 800414e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004154:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	2b08      	cmp	r3, #8
 800415a:	d006      	beq.n	800416a <I2C_MasterRequestWrite+0x2a>
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d003      	beq.n	800416a <I2C_MasterRequestWrite+0x2a>
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004168:	d108      	bne.n	800417c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004178:	601a      	str	r2, [r3, #0]
 800417a:	e00b      	b.n	8004194 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004180:	2b12      	cmp	r3, #18
 8004182:	d107      	bne.n	8004194 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004192:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	9300      	str	r3, [sp, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041a0:	68f8      	ldr	r0, [r7, #12]
 80041a2:	f000 f9b3 	bl	800450c <I2C_WaitOnFlagUntilTimeout>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d00d      	beq.n	80041c8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041ba:	d103      	bne.n	80041c4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e035      	b.n	8004234 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041d0:	d108      	bne.n	80041e4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041d2:	897b      	ldrh	r3, [r7, #10]
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	461a      	mov	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80041e0:	611a      	str	r2, [r3, #16]
 80041e2:	e01b      	b.n	800421c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80041e4:	897b      	ldrh	r3, [r7, #10]
 80041e6:	11db      	asrs	r3, r3, #7
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	f003 0306 	and.w	r3, r3, #6
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	f063 030f 	orn	r3, r3, #15
 80041f4:	b2da      	uxtb	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	490e      	ldr	r1, [pc, #56]	; (800423c <I2C_MasterRequestWrite+0xfc>)
 8004202:	68f8      	ldr	r0, [r7, #12]
 8004204:	f000 f9d9 	bl	80045ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d001      	beq.n	8004212 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e010      	b.n	8004234 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004212:	897b      	ldrh	r3, [r7, #10]
 8004214:	b2da      	uxtb	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	4907      	ldr	r1, [pc, #28]	; (8004240 <I2C_MasterRequestWrite+0x100>)
 8004222:	68f8      	ldr	r0, [r7, #12]
 8004224:	f000 f9c9 	bl	80045ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e000      	b.n	8004234 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004232:	2300      	movs	r3, #0
}
 8004234:	4618      	mov	r0, r3
 8004236:	3718      	adds	r7, #24
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}
 800423c:	00010008 	.word	0x00010008
 8004240:	00010002 	.word	0x00010002

08004244 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b088      	sub	sp, #32
 8004248:	af02      	add	r7, sp, #8
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	607a      	str	r2, [r7, #4]
 800424e:	603b      	str	r3, [r7, #0]
 8004250:	460b      	mov	r3, r1
 8004252:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004258:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004268:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	2b08      	cmp	r3, #8
 800426e:	d006      	beq.n	800427e <I2C_MasterRequestRead+0x3a>
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d003      	beq.n	800427e <I2C_MasterRequestRead+0x3a>
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800427c:	d108      	bne.n	8004290 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800428c:	601a      	str	r2, [r3, #0]
 800428e:	e00b      	b.n	80042a8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004294:	2b11      	cmp	r3, #17
 8004296:	d107      	bne.n	80042a8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	9300      	str	r3, [sp, #0]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	f000 f929 	bl	800450c <I2C_WaitOnFlagUntilTimeout>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00d      	beq.n	80042dc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042ce:	d103      	bne.n	80042d8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e079      	b.n	80043d0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042e4:	d108      	bne.n	80042f8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80042e6:	897b      	ldrh	r3, [r7, #10]
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	f043 0301 	orr.w	r3, r3, #1
 80042ee:	b2da      	uxtb	r2, r3
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	611a      	str	r2, [r3, #16]
 80042f6:	e05f      	b.n	80043b8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80042f8:	897b      	ldrh	r3, [r7, #10]
 80042fa:	11db      	asrs	r3, r3, #7
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	f003 0306 	and.w	r3, r3, #6
 8004302:	b2db      	uxtb	r3, r3
 8004304:	f063 030f 	orn	r3, r3, #15
 8004308:	b2da      	uxtb	r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	4930      	ldr	r1, [pc, #192]	; (80043d8 <I2C_MasterRequestRead+0x194>)
 8004316:	68f8      	ldr	r0, [r7, #12]
 8004318:	f000 f94f 	bl	80045ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d001      	beq.n	8004326 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e054      	b.n	80043d0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004326:	897b      	ldrh	r3, [r7, #10]
 8004328:	b2da      	uxtb	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	4929      	ldr	r1, [pc, #164]	; (80043dc <I2C_MasterRequestRead+0x198>)
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f000 f93f 	bl	80045ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d001      	beq.n	8004346 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e044      	b.n	80043d0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004346:	2300      	movs	r3, #0
 8004348:	613b      	str	r3, [r7, #16]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	695b      	ldr	r3, [r3, #20]
 8004350:	613b      	str	r3, [r7, #16]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	613b      	str	r3, [r7, #16]
 800435a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800436a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	f000 f8c7 	bl	800450c <I2C_WaitOnFlagUntilTimeout>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d00d      	beq.n	80043a0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800438e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004392:	d103      	bne.n	800439c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f44f 7200 	mov.w	r2, #512	; 0x200
 800439a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e017      	b.n	80043d0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80043a0:	897b      	ldrh	r3, [r7, #10]
 80043a2:	11db      	asrs	r3, r3, #7
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	f003 0306 	and.w	r3, r3, #6
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	f063 030e 	orn	r3, r3, #14
 80043b0:	b2da      	uxtb	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	4907      	ldr	r1, [pc, #28]	; (80043dc <I2C_MasterRequestRead+0x198>)
 80043be:	68f8      	ldr	r0, [r7, #12]
 80043c0:	f000 f8fb 	bl	80045ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d001      	beq.n	80043ce <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e000      	b.n	80043d0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3718      	adds	r7, #24
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	00010008 	.word	0x00010008
 80043dc:	00010002 	.word	0x00010002

080043e0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b088      	sub	sp, #32
 80043e4:	af02      	add	r7, sp, #8
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	4608      	mov	r0, r1
 80043ea:	4611      	mov	r1, r2
 80043ec:	461a      	mov	r2, r3
 80043ee:	4603      	mov	r3, r0
 80043f0:	817b      	strh	r3, [r7, #10]
 80043f2:	460b      	mov	r3, r1
 80043f4:	813b      	strh	r3, [r7, #8]
 80043f6:	4613      	mov	r3, r2
 80043f8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004408:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800440a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440c:	9300      	str	r3, [sp, #0]
 800440e:	6a3b      	ldr	r3, [r7, #32]
 8004410:	2200      	movs	r2, #0
 8004412:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004416:	68f8      	ldr	r0, [r7, #12]
 8004418:	f000 f878 	bl	800450c <I2C_WaitOnFlagUntilTimeout>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00d      	beq.n	800443e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800442c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004430:	d103      	bne.n	800443a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004438:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e05f      	b.n	80044fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800443e:	897b      	ldrh	r3, [r7, #10]
 8004440:	b2db      	uxtb	r3, r3
 8004442:	461a      	mov	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800444c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800444e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004450:	6a3a      	ldr	r2, [r7, #32]
 8004452:	492d      	ldr	r1, [pc, #180]	; (8004508 <I2C_RequestMemoryWrite+0x128>)
 8004454:	68f8      	ldr	r0, [r7, #12]
 8004456:	f000 f8b0 	bl	80045ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d001      	beq.n	8004464 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e04c      	b.n	80044fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004464:	2300      	movs	r3, #0
 8004466:	617b      	str	r3, [r7, #20]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	617b      	str	r3, [r7, #20]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	617b      	str	r3, [r7, #20]
 8004478:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800447a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800447c:	6a39      	ldr	r1, [r7, #32]
 800447e:	68f8      	ldr	r0, [r7, #12]
 8004480:	f000 f91a 	bl	80046b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00d      	beq.n	80044a6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448e:	2b04      	cmp	r3, #4
 8004490:	d107      	bne.n	80044a2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e02b      	b.n	80044fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044a6:	88fb      	ldrh	r3, [r7, #6]
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d105      	bne.n	80044b8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044ac:	893b      	ldrh	r3, [r7, #8]
 80044ae:	b2da      	uxtb	r2, r3
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	611a      	str	r2, [r3, #16]
 80044b6:	e021      	b.n	80044fc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80044b8:	893b      	ldrh	r3, [r7, #8]
 80044ba:	0a1b      	lsrs	r3, r3, #8
 80044bc:	b29b      	uxth	r3, r3
 80044be:	b2da      	uxtb	r2, r3
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044c8:	6a39      	ldr	r1, [r7, #32]
 80044ca:	68f8      	ldr	r0, [r7, #12]
 80044cc:	f000 f8f4 	bl	80046b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00d      	beq.n	80044f2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044da:	2b04      	cmp	r3, #4
 80044dc:	d107      	bne.n	80044ee <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e005      	b.n	80044fe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044f2:	893b      	ldrh	r3, [r7, #8]
 80044f4:	b2da      	uxtb	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3718      	adds	r7, #24
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	00010002 	.word	0x00010002

0800450c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	603b      	str	r3, [r7, #0]
 8004518:	4613      	mov	r3, r2
 800451a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800451c:	e025      	b.n	800456a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004524:	d021      	beq.n	800456a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004526:	f7fc fe6f 	bl	8001208 <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	683a      	ldr	r2, [r7, #0]
 8004532:	429a      	cmp	r2, r3
 8004534:	d302      	bcc.n	800453c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d116      	bne.n	800456a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2220      	movs	r2, #32
 8004546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004556:	f043 0220 	orr.w	r2, r3, #32
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e023      	b.n	80045b2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	0c1b      	lsrs	r3, r3, #16
 800456e:	b2db      	uxtb	r3, r3
 8004570:	2b01      	cmp	r3, #1
 8004572:	d10d      	bne.n	8004590 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	695b      	ldr	r3, [r3, #20]
 800457a:	43da      	mvns	r2, r3
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	4013      	ands	r3, r2
 8004580:	b29b      	uxth	r3, r3
 8004582:	2b00      	cmp	r3, #0
 8004584:	bf0c      	ite	eq
 8004586:	2301      	moveq	r3, #1
 8004588:	2300      	movne	r3, #0
 800458a:	b2db      	uxtb	r3, r3
 800458c:	461a      	mov	r2, r3
 800458e:	e00c      	b.n	80045aa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	43da      	mvns	r2, r3
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	4013      	ands	r3, r2
 800459c:	b29b      	uxth	r3, r3
 800459e:	2b00      	cmp	r3, #0
 80045a0:	bf0c      	ite	eq
 80045a2:	2301      	moveq	r3, #1
 80045a4:	2300      	movne	r3, #0
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	461a      	mov	r2, r3
 80045aa:	79fb      	ldrb	r3, [r7, #7]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d0b6      	beq.n	800451e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3710      	adds	r7, #16
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}

080045ba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80045ba:	b580      	push	{r7, lr}
 80045bc:	b084      	sub	sp, #16
 80045be:	af00      	add	r7, sp, #0
 80045c0:	60f8      	str	r0, [r7, #12]
 80045c2:	60b9      	str	r1, [r7, #8]
 80045c4:	607a      	str	r2, [r7, #4]
 80045c6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045c8:	e051      	b.n	800466e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	695b      	ldr	r3, [r3, #20]
 80045d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045d8:	d123      	bne.n	8004622 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045e8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80045f2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2220      	movs	r2, #32
 80045fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460e:	f043 0204 	orr.w	r2, r3, #4
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e046      	b.n	80046b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004628:	d021      	beq.n	800466e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800462a:	f7fc fded 	bl	8001208 <HAL_GetTick>
 800462e:	4602      	mov	r2, r0
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	429a      	cmp	r2, r3
 8004638:	d302      	bcc.n	8004640 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d116      	bne.n	800466e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2220      	movs	r2, #32
 800464a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465a:	f043 0220 	orr.w	r2, r3, #32
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e020      	b.n	80046b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	0c1b      	lsrs	r3, r3, #16
 8004672:	b2db      	uxtb	r3, r3
 8004674:	2b01      	cmp	r3, #1
 8004676:	d10c      	bne.n	8004692 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	695b      	ldr	r3, [r3, #20]
 800467e:	43da      	mvns	r2, r3
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	4013      	ands	r3, r2
 8004684:	b29b      	uxth	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	bf14      	ite	ne
 800468a:	2301      	movne	r3, #1
 800468c:	2300      	moveq	r3, #0
 800468e:	b2db      	uxtb	r3, r3
 8004690:	e00b      	b.n	80046aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	699b      	ldr	r3, [r3, #24]
 8004698:	43da      	mvns	r2, r3
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	4013      	ands	r3, r2
 800469e:	b29b      	uxth	r3, r3
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	bf14      	ite	ne
 80046a4:	2301      	movne	r3, #1
 80046a6:	2300      	moveq	r3, #0
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d18d      	bne.n	80045ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3710      	adds	r7, #16
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046c4:	e02d      	b.n	8004722 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80046c6:	68f8      	ldr	r0, [r7, #12]
 80046c8:	f000 f8ce 	bl	8004868 <I2C_IsAcknowledgeFailed>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d001      	beq.n	80046d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e02d      	b.n	8004732 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046dc:	d021      	beq.n	8004722 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046de:	f7fc fd93 	bl	8001208 <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	68ba      	ldr	r2, [r7, #8]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d302      	bcc.n	80046f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d116      	bne.n	8004722 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2200      	movs	r2, #0
 80046f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2220      	movs	r2, #32
 80046fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470e:	f043 0220 	orr.w	r2, r3, #32
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e007      	b.n	8004732 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	695b      	ldr	r3, [r3, #20]
 8004728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800472c:	2b80      	cmp	r3, #128	; 0x80
 800472e:	d1ca      	bne.n	80046c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3710      	adds	r7, #16
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}

0800473a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800473a:	b580      	push	{r7, lr}
 800473c:	b084      	sub	sp, #16
 800473e:	af00      	add	r7, sp, #0
 8004740:	60f8      	str	r0, [r7, #12]
 8004742:	60b9      	str	r1, [r7, #8]
 8004744:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004746:	e02d      	b.n	80047a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004748:	68f8      	ldr	r0, [r7, #12]
 800474a:	f000 f88d 	bl	8004868 <I2C_IsAcknowledgeFailed>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d001      	beq.n	8004758 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e02d      	b.n	80047b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800475e:	d021      	beq.n	80047a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004760:	f7fc fd52 	bl	8001208 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	68ba      	ldr	r2, [r7, #8]
 800476c:	429a      	cmp	r2, r3
 800476e:	d302      	bcc.n	8004776 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d116      	bne.n	80047a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2220      	movs	r2, #32
 8004780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004790:	f043 0220 	orr.w	r2, r3, #32
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e007      	b.n	80047b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	f003 0304 	and.w	r3, r3, #4
 80047ae:	2b04      	cmp	r3, #4
 80047b0:	d1ca      	bne.n	8004748 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3710      	adds	r7, #16
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80047c8:	e042      	b.n	8004850 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	695b      	ldr	r3, [r3, #20]
 80047d0:	f003 0310 	and.w	r3, r3, #16
 80047d4:	2b10      	cmp	r3, #16
 80047d6:	d119      	bne.n	800480c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f06f 0210 	mvn.w	r2, #16
 80047e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2220      	movs	r2, #32
 80047ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e029      	b.n	8004860 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800480c:	f7fc fcfc 	bl	8001208 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	68ba      	ldr	r2, [r7, #8]
 8004818:	429a      	cmp	r2, r3
 800481a:	d302      	bcc.n	8004822 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d116      	bne.n	8004850 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2220      	movs	r2, #32
 800482c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483c:	f043 0220 	orr.w	r2, r3, #32
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e007      	b.n	8004860 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800485a:	2b40      	cmp	r3, #64	; 0x40
 800485c:	d1b5      	bne.n	80047ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800485e:	2300      	movs	r3, #0
}
 8004860:	4618      	mov	r0, r3
 8004862:	3710      	adds	r7, #16
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800487a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800487e:	d11b      	bne.n	80048b8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004888:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2220      	movs	r2, #32
 8004894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a4:	f043 0204 	orr.w	r2, r3, #4
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e000      	b.n	80048ba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	370c      	adds	r7, #12
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
	...

080048c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b086      	sub	sp, #24
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d101      	bne.n	80048da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e267      	b.n	8004daa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0301 	and.w	r3, r3, #1
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d075      	beq.n	80049d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048e6:	4b88      	ldr	r3, [pc, #544]	; (8004b08 <HAL_RCC_OscConfig+0x240>)
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f003 030c 	and.w	r3, r3, #12
 80048ee:	2b04      	cmp	r3, #4
 80048f0:	d00c      	beq.n	800490c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048f2:	4b85      	ldr	r3, [pc, #532]	; (8004b08 <HAL_RCC_OscConfig+0x240>)
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048fa:	2b08      	cmp	r3, #8
 80048fc:	d112      	bne.n	8004924 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048fe:	4b82      	ldr	r3, [pc, #520]	; (8004b08 <HAL_RCC_OscConfig+0x240>)
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004906:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800490a:	d10b      	bne.n	8004924 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800490c:	4b7e      	ldr	r3, [pc, #504]	; (8004b08 <HAL_RCC_OscConfig+0x240>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d05b      	beq.n	80049d0 <HAL_RCC_OscConfig+0x108>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d157      	bne.n	80049d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e242      	b.n	8004daa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800492c:	d106      	bne.n	800493c <HAL_RCC_OscConfig+0x74>
 800492e:	4b76      	ldr	r3, [pc, #472]	; (8004b08 <HAL_RCC_OscConfig+0x240>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a75      	ldr	r2, [pc, #468]	; (8004b08 <HAL_RCC_OscConfig+0x240>)
 8004934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004938:	6013      	str	r3, [r2, #0]
 800493a:	e01d      	b.n	8004978 <HAL_RCC_OscConfig+0xb0>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004944:	d10c      	bne.n	8004960 <HAL_RCC_OscConfig+0x98>
 8004946:	4b70      	ldr	r3, [pc, #448]	; (8004b08 <HAL_RCC_OscConfig+0x240>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a6f      	ldr	r2, [pc, #444]	; (8004b08 <HAL_RCC_OscConfig+0x240>)
 800494c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004950:	6013      	str	r3, [r2, #0]
 8004952:	4b6d      	ldr	r3, [pc, #436]	; (8004b08 <HAL_RCC_OscConfig+0x240>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a6c      	ldr	r2, [pc, #432]	; (8004b08 <HAL_RCC_OscConfig+0x240>)
 8004958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800495c:	6013      	str	r3, [r2, #0]
 800495e:	e00b      	b.n	8004978 <HAL_RCC_OscConfig+0xb0>
 8004960:	4b69      	ldr	r3, [pc, #420]	; (8004b08 <HAL_RCC_OscConfig+0x240>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a68      	ldr	r2, [pc, #416]	; (8004b08 <HAL_RCC_OscConfig+0x240>)
 8004966:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800496a:	6013      	str	r3, [r2, #0]
 800496c:	4b66      	ldr	r3, [pc, #408]	; (8004b08 <HAL_RCC_OscConfig+0x240>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a65      	ldr	r2, [pc, #404]	; (8004b08 <HAL_RCC_OscConfig+0x240>)
 8004972:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004976:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d013      	beq.n	80049a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004980:	f7fc fc42 	bl	8001208 <HAL_GetTick>
 8004984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004986:	e008      	b.n	800499a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004988:	f7fc fc3e 	bl	8001208 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b64      	cmp	r3, #100	; 0x64
 8004994:	d901      	bls.n	800499a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e207      	b.n	8004daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800499a:	4b5b      	ldr	r3, [pc, #364]	; (8004b08 <HAL_RCC_OscConfig+0x240>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d0f0      	beq.n	8004988 <HAL_RCC_OscConfig+0xc0>
 80049a6:	e014      	b.n	80049d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049a8:	f7fc fc2e 	bl	8001208 <HAL_GetTick>
 80049ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049ae:	e008      	b.n	80049c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049b0:	f7fc fc2a 	bl	8001208 <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	2b64      	cmp	r3, #100	; 0x64
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e1f3      	b.n	8004daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049c2:	4b51      	ldr	r3, [pc, #324]	; (8004b08 <HAL_RCC_OscConfig+0x240>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1f0      	bne.n	80049b0 <HAL_RCC_OscConfig+0xe8>
 80049ce:	e000      	b.n	80049d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0302 	and.w	r3, r3, #2
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d063      	beq.n	8004aa6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049de:	4b4a      	ldr	r3, [pc, #296]	; (8004b08 <HAL_RCC_OscConfig+0x240>)
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f003 030c 	and.w	r3, r3, #12
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00b      	beq.n	8004a02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049ea:	4b47      	ldr	r3, [pc, #284]	; (8004b08 <HAL_RCC_OscConfig+0x240>)
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049f2:	2b08      	cmp	r3, #8
 80049f4:	d11c      	bne.n	8004a30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049f6:	4b44      	ldr	r3, [pc, #272]	; (8004b08 <HAL_RCC_OscConfig+0x240>)
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d116      	bne.n	8004a30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a02:	4b41      	ldr	r3, [pc, #260]	; (8004b08 <HAL_RCC_OscConfig+0x240>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d005      	beq.n	8004a1a <HAL_RCC_OscConfig+0x152>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d001      	beq.n	8004a1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e1c7      	b.n	8004daa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a1a:	4b3b      	ldr	r3, [pc, #236]	; (8004b08 <HAL_RCC_OscConfig+0x240>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	00db      	lsls	r3, r3, #3
 8004a28:	4937      	ldr	r1, [pc, #220]	; (8004b08 <HAL_RCC_OscConfig+0x240>)
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a2e:	e03a      	b.n	8004aa6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d020      	beq.n	8004a7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a38:	4b34      	ldr	r3, [pc, #208]	; (8004b0c <HAL_RCC_OscConfig+0x244>)
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a3e:	f7fc fbe3 	bl	8001208 <HAL_GetTick>
 8004a42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a44:	e008      	b.n	8004a58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a46:	f7fc fbdf 	bl	8001208 <HAL_GetTick>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d901      	bls.n	8004a58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e1a8      	b.n	8004daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a58:	4b2b      	ldr	r3, [pc, #172]	; (8004b08 <HAL_RCC_OscConfig+0x240>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0302 	and.w	r3, r3, #2
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d0f0      	beq.n	8004a46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a64:	4b28      	ldr	r3, [pc, #160]	; (8004b08 <HAL_RCC_OscConfig+0x240>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	00db      	lsls	r3, r3, #3
 8004a72:	4925      	ldr	r1, [pc, #148]	; (8004b08 <HAL_RCC_OscConfig+0x240>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	600b      	str	r3, [r1, #0]
 8004a78:	e015      	b.n	8004aa6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a7a:	4b24      	ldr	r3, [pc, #144]	; (8004b0c <HAL_RCC_OscConfig+0x244>)
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a80:	f7fc fbc2 	bl	8001208 <HAL_GetTick>
 8004a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a86:	e008      	b.n	8004a9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a88:	f7fc fbbe 	bl	8001208 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d901      	bls.n	8004a9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e187      	b.n	8004daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a9a:	4b1b      	ldr	r3, [pc, #108]	; (8004b08 <HAL_RCC_OscConfig+0x240>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0302 	and.w	r3, r3, #2
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1f0      	bne.n	8004a88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0308 	and.w	r3, r3, #8
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d036      	beq.n	8004b20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d016      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004aba:	4b15      	ldr	r3, [pc, #84]	; (8004b10 <HAL_RCC_OscConfig+0x248>)
 8004abc:	2201      	movs	r2, #1
 8004abe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ac0:	f7fc fba2 	bl	8001208 <HAL_GetTick>
 8004ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ac6:	e008      	b.n	8004ada <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ac8:	f7fc fb9e 	bl	8001208 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d901      	bls.n	8004ada <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e167      	b.n	8004daa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ada:	4b0b      	ldr	r3, [pc, #44]	; (8004b08 <HAL_RCC_OscConfig+0x240>)
 8004adc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ade:	f003 0302 	and.w	r3, r3, #2
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d0f0      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x200>
 8004ae6:	e01b      	b.n	8004b20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ae8:	4b09      	ldr	r3, [pc, #36]	; (8004b10 <HAL_RCC_OscConfig+0x248>)
 8004aea:	2200      	movs	r2, #0
 8004aec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aee:	f7fc fb8b 	bl	8001208 <HAL_GetTick>
 8004af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004af4:	e00e      	b.n	8004b14 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004af6:	f7fc fb87 	bl	8001208 <HAL_GetTick>
 8004afa:	4602      	mov	r2, r0
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d907      	bls.n	8004b14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004b04:	2303      	movs	r3, #3
 8004b06:	e150      	b.n	8004daa <HAL_RCC_OscConfig+0x4e2>
 8004b08:	40023800 	.word	0x40023800
 8004b0c:	42470000 	.word	0x42470000
 8004b10:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b14:	4b88      	ldr	r3, [pc, #544]	; (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004b16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b18:	f003 0302 	and.w	r3, r3, #2
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d1ea      	bne.n	8004af6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0304 	and.w	r3, r3, #4
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	f000 8097 	beq.w	8004c5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b32:	4b81      	ldr	r3, [pc, #516]	; (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d10f      	bne.n	8004b5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b3e:	2300      	movs	r3, #0
 8004b40:	60bb      	str	r3, [r7, #8]
 8004b42:	4b7d      	ldr	r3, [pc, #500]	; (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b46:	4a7c      	ldr	r2, [pc, #496]	; (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8004b4e:	4b7a      	ldr	r3, [pc, #488]	; (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b56:	60bb      	str	r3, [r7, #8]
 8004b58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b5e:	4b77      	ldr	r3, [pc, #476]	; (8004d3c <HAL_RCC_OscConfig+0x474>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d118      	bne.n	8004b9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b6a:	4b74      	ldr	r3, [pc, #464]	; (8004d3c <HAL_RCC_OscConfig+0x474>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a73      	ldr	r2, [pc, #460]	; (8004d3c <HAL_RCC_OscConfig+0x474>)
 8004b70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b76:	f7fc fb47 	bl	8001208 <HAL_GetTick>
 8004b7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b7c:	e008      	b.n	8004b90 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b7e:	f7fc fb43 	bl	8001208 <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d901      	bls.n	8004b90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e10c      	b.n	8004daa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b90:	4b6a      	ldr	r3, [pc, #424]	; (8004d3c <HAL_RCC_OscConfig+0x474>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d0f0      	beq.n	8004b7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d106      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x2ea>
 8004ba4:	4b64      	ldr	r3, [pc, #400]	; (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba8:	4a63      	ldr	r2, [pc, #396]	; (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004baa:	f043 0301 	orr.w	r3, r3, #1
 8004bae:	6713      	str	r3, [r2, #112]	; 0x70
 8004bb0:	e01c      	b.n	8004bec <HAL_RCC_OscConfig+0x324>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	2b05      	cmp	r3, #5
 8004bb8:	d10c      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x30c>
 8004bba:	4b5f      	ldr	r3, [pc, #380]	; (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bbe:	4a5e      	ldr	r2, [pc, #376]	; (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004bc0:	f043 0304 	orr.w	r3, r3, #4
 8004bc4:	6713      	str	r3, [r2, #112]	; 0x70
 8004bc6:	4b5c      	ldr	r3, [pc, #368]	; (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bca:	4a5b      	ldr	r2, [pc, #364]	; (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004bcc:	f043 0301 	orr.w	r3, r3, #1
 8004bd0:	6713      	str	r3, [r2, #112]	; 0x70
 8004bd2:	e00b      	b.n	8004bec <HAL_RCC_OscConfig+0x324>
 8004bd4:	4b58      	ldr	r3, [pc, #352]	; (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd8:	4a57      	ldr	r2, [pc, #348]	; (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004bda:	f023 0301 	bic.w	r3, r3, #1
 8004bde:	6713      	str	r3, [r2, #112]	; 0x70
 8004be0:	4b55      	ldr	r3, [pc, #340]	; (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be4:	4a54      	ldr	r2, [pc, #336]	; (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004be6:	f023 0304 	bic.w	r3, r3, #4
 8004bea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d015      	beq.n	8004c20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bf4:	f7fc fb08 	bl	8001208 <HAL_GetTick>
 8004bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bfa:	e00a      	b.n	8004c12 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bfc:	f7fc fb04 	bl	8001208 <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d901      	bls.n	8004c12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e0cb      	b.n	8004daa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c12:	4b49      	ldr	r3, [pc, #292]	; (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c16:	f003 0302 	and.w	r3, r3, #2
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d0ee      	beq.n	8004bfc <HAL_RCC_OscConfig+0x334>
 8004c1e:	e014      	b.n	8004c4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c20:	f7fc faf2 	bl	8001208 <HAL_GetTick>
 8004c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c26:	e00a      	b.n	8004c3e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c28:	f7fc faee 	bl	8001208 <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d901      	bls.n	8004c3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e0b5      	b.n	8004daa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c3e:	4b3e      	ldr	r3, [pc, #248]	; (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c42:	f003 0302 	and.w	r3, r3, #2
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d1ee      	bne.n	8004c28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c4a:	7dfb      	ldrb	r3, [r7, #23]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d105      	bne.n	8004c5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c50:	4b39      	ldr	r3, [pc, #228]	; (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c54:	4a38      	ldr	r2, [pc, #224]	; (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004c56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c5a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	f000 80a1 	beq.w	8004da8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c66:	4b34      	ldr	r3, [pc, #208]	; (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	f003 030c 	and.w	r3, r3, #12
 8004c6e:	2b08      	cmp	r3, #8
 8004c70:	d05c      	beq.n	8004d2c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d141      	bne.n	8004cfe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c7a:	4b31      	ldr	r3, [pc, #196]	; (8004d40 <HAL_RCC_OscConfig+0x478>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c80:	f7fc fac2 	bl	8001208 <HAL_GetTick>
 8004c84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c86:	e008      	b.n	8004c9a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c88:	f7fc fabe 	bl	8001208 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d901      	bls.n	8004c9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e087      	b.n	8004daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c9a:	4b27      	ldr	r3, [pc, #156]	; (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1f0      	bne.n	8004c88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	69da      	ldr	r2, [r3, #28]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	431a      	orrs	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb4:	019b      	lsls	r3, r3, #6
 8004cb6:	431a      	orrs	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cbc:	085b      	lsrs	r3, r3, #1
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	041b      	lsls	r3, r3, #16
 8004cc2:	431a      	orrs	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc8:	061b      	lsls	r3, r3, #24
 8004cca:	491b      	ldr	r1, [pc, #108]	; (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cd0:	4b1b      	ldr	r3, [pc, #108]	; (8004d40 <HAL_RCC_OscConfig+0x478>)
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cd6:	f7fc fa97 	bl	8001208 <HAL_GetTick>
 8004cda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cdc:	e008      	b.n	8004cf0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cde:	f7fc fa93 	bl	8001208 <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d901      	bls.n	8004cf0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e05c      	b.n	8004daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cf0:	4b11      	ldr	r3, [pc, #68]	; (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d0f0      	beq.n	8004cde <HAL_RCC_OscConfig+0x416>
 8004cfc:	e054      	b.n	8004da8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cfe:	4b10      	ldr	r3, [pc, #64]	; (8004d40 <HAL_RCC_OscConfig+0x478>)
 8004d00:	2200      	movs	r2, #0
 8004d02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d04:	f7fc fa80 	bl	8001208 <HAL_GetTick>
 8004d08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d0a:	e008      	b.n	8004d1e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d0c:	f7fc fa7c 	bl	8001208 <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d901      	bls.n	8004d1e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e045      	b.n	8004daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d1e:	4b06      	ldr	r3, [pc, #24]	; (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d1f0      	bne.n	8004d0c <HAL_RCC_OscConfig+0x444>
 8004d2a:	e03d      	b.n	8004da8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d107      	bne.n	8004d44 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e038      	b.n	8004daa <HAL_RCC_OscConfig+0x4e2>
 8004d38:	40023800 	.word	0x40023800
 8004d3c:	40007000 	.word	0x40007000
 8004d40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d44:	4b1b      	ldr	r3, [pc, #108]	; (8004db4 <HAL_RCC_OscConfig+0x4ec>)
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d028      	beq.n	8004da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d121      	bne.n	8004da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d11a      	bne.n	8004da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d74:	4013      	ands	r3, r2
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d111      	bne.n	8004da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d8a:	085b      	lsrs	r3, r3, #1
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d107      	bne.n	8004da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d001      	beq.n	8004da8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e000      	b.n	8004daa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3718      	adds	r7, #24
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	40023800 	.word	0x40023800

08004db8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d101      	bne.n	8004dcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e0cc      	b.n	8004f66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004dcc:	4b68      	ldr	r3, [pc, #416]	; (8004f70 <HAL_RCC_ClockConfig+0x1b8>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0307 	and.w	r3, r3, #7
 8004dd4:	683a      	ldr	r2, [r7, #0]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d90c      	bls.n	8004df4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dda:	4b65      	ldr	r3, [pc, #404]	; (8004f70 <HAL_RCC_ClockConfig+0x1b8>)
 8004ddc:	683a      	ldr	r2, [r7, #0]
 8004dde:	b2d2      	uxtb	r2, r2
 8004de0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004de2:	4b63      	ldr	r3, [pc, #396]	; (8004f70 <HAL_RCC_ClockConfig+0x1b8>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0307 	and.w	r3, r3, #7
 8004dea:	683a      	ldr	r2, [r7, #0]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d001      	beq.n	8004df4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e0b8      	b.n	8004f66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0302 	and.w	r3, r3, #2
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d020      	beq.n	8004e42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0304 	and.w	r3, r3, #4
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d005      	beq.n	8004e18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e0c:	4b59      	ldr	r3, [pc, #356]	; (8004f74 <HAL_RCC_ClockConfig+0x1bc>)
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	4a58      	ldr	r2, [pc, #352]	; (8004f74 <HAL_RCC_ClockConfig+0x1bc>)
 8004e12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0308 	and.w	r3, r3, #8
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d005      	beq.n	8004e30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e24:	4b53      	ldr	r3, [pc, #332]	; (8004f74 <HAL_RCC_ClockConfig+0x1bc>)
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	4a52      	ldr	r2, [pc, #328]	; (8004f74 <HAL_RCC_ClockConfig+0x1bc>)
 8004e2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e30:	4b50      	ldr	r3, [pc, #320]	; (8004f74 <HAL_RCC_ClockConfig+0x1bc>)
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	494d      	ldr	r1, [pc, #308]	; (8004f74 <HAL_RCC_ClockConfig+0x1bc>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0301 	and.w	r3, r3, #1
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d044      	beq.n	8004ed8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d107      	bne.n	8004e66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e56:	4b47      	ldr	r3, [pc, #284]	; (8004f74 <HAL_RCC_ClockConfig+0x1bc>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d119      	bne.n	8004e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e07f      	b.n	8004f66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d003      	beq.n	8004e76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e72:	2b03      	cmp	r3, #3
 8004e74:	d107      	bne.n	8004e86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e76:	4b3f      	ldr	r3, [pc, #252]	; (8004f74 <HAL_RCC_ClockConfig+0x1bc>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d109      	bne.n	8004e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e06f      	b.n	8004f66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e86:	4b3b      	ldr	r3, [pc, #236]	; (8004f74 <HAL_RCC_ClockConfig+0x1bc>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0302 	and.w	r3, r3, #2
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d101      	bne.n	8004e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e067      	b.n	8004f66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e96:	4b37      	ldr	r3, [pc, #220]	; (8004f74 <HAL_RCC_ClockConfig+0x1bc>)
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	f023 0203 	bic.w	r2, r3, #3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	4934      	ldr	r1, [pc, #208]	; (8004f74 <HAL_RCC_ClockConfig+0x1bc>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ea8:	f7fc f9ae 	bl	8001208 <HAL_GetTick>
 8004eac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eae:	e00a      	b.n	8004ec6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004eb0:	f7fc f9aa 	bl	8001208 <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d901      	bls.n	8004ec6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e04f      	b.n	8004f66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ec6:	4b2b      	ldr	r3, [pc, #172]	; (8004f74 <HAL_RCC_ClockConfig+0x1bc>)
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f003 020c 	and.w	r2, r3, #12
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d1eb      	bne.n	8004eb0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ed8:	4b25      	ldr	r3, [pc, #148]	; (8004f70 <HAL_RCC_ClockConfig+0x1b8>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0307 	and.w	r3, r3, #7
 8004ee0:	683a      	ldr	r2, [r7, #0]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d20c      	bcs.n	8004f00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ee6:	4b22      	ldr	r3, [pc, #136]	; (8004f70 <HAL_RCC_ClockConfig+0x1b8>)
 8004ee8:	683a      	ldr	r2, [r7, #0]
 8004eea:	b2d2      	uxtb	r2, r2
 8004eec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eee:	4b20      	ldr	r3, [pc, #128]	; (8004f70 <HAL_RCC_ClockConfig+0x1b8>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0307 	and.w	r3, r3, #7
 8004ef6:	683a      	ldr	r2, [r7, #0]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d001      	beq.n	8004f00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e032      	b.n	8004f66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0304 	and.w	r3, r3, #4
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d008      	beq.n	8004f1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f0c:	4b19      	ldr	r3, [pc, #100]	; (8004f74 <HAL_RCC_ClockConfig+0x1bc>)
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	4916      	ldr	r1, [pc, #88]	; (8004f74 <HAL_RCC_ClockConfig+0x1bc>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0308 	and.w	r3, r3, #8
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d009      	beq.n	8004f3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f2a:	4b12      	ldr	r3, [pc, #72]	; (8004f74 <HAL_RCC_ClockConfig+0x1bc>)
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	00db      	lsls	r3, r3, #3
 8004f38:	490e      	ldr	r1, [pc, #56]	; (8004f74 <HAL_RCC_ClockConfig+0x1bc>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f3e:	f000 f889 	bl	8005054 <HAL_RCC_GetSysClockFreq>
 8004f42:	4602      	mov	r2, r0
 8004f44:	4b0b      	ldr	r3, [pc, #44]	; (8004f74 <HAL_RCC_ClockConfig+0x1bc>)
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	091b      	lsrs	r3, r3, #4
 8004f4a:	f003 030f 	and.w	r3, r3, #15
 8004f4e:	490a      	ldr	r1, [pc, #40]	; (8004f78 <HAL_RCC_ClockConfig+0x1c0>)
 8004f50:	5ccb      	ldrb	r3, [r1, r3]
 8004f52:	fa22 f303 	lsr.w	r3, r2, r3
 8004f56:	4a09      	ldr	r2, [pc, #36]	; (8004f7c <HAL_RCC_ClockConfig+0x1c4>)
 8004f58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f5a:	4b09      	ldr	r3, [pc, #36]	; (8004f80 <HAL_RCC_ClockConfig+0x1c8>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f7fc f90e 	bl	8001180 <HAL_InitTick>

  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3710      	adds	r7, #16
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	40023c00 	.word	0x40023c00
 8004f74:	40023800 	.word	0x40023800
 8004f78:	08005384 	.word	0x08005384
 8004f7c:	2000000c 	.word	0x2000000c
 8004f80:	20000010 	.word	0x20000010

08004f84 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b08c      	sub	sp, #48	; 0x30
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d129      	bne.n	8004fea <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8004f96:	2300      	movs	r3, #0
 8004f98:	61bb      	str	r3, [r7, #24]
 8004f9a:	4b2b      	ldr	r3, [pc, #172]	; (8005048 <HAL_RCC_MCOConfig+0xc4>)
 8004f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9e:	4a2a      	ldr	r2, [pc, #168]	; (8005048 <HAL_RCC_MCOConfig+0xc4>)
 8004fa0:	f043 0301 	orr.w	r3, r3, #1
 8004fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8004fa6:	4b28      	ldr	r3, [pc, #160]	; (8005048 <HAL_RCC_MCOConfig+0xc4>)
 8004fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	61bb      	str	r3, [r7, #24]
 8004fb0:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8004fb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004fb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fb8:	2302      	movs	r3, #2
 8004fba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8004fc8:	f107 031c 	add.w	r3, r7, #28
 8004fcc:	4619      	mov	r1, r3
 8004fce:	481f      	ldr	r0, [pc, #124]	; (800504c <HAL_RCC_MCOConfig+0xc8>)
 8004fd0:	f7fe f9b8 	bl	8003344 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8004fd4:	4b1c      	ldr	r3, [pc, #112]	; (8005048 <HAL_RCC_MCOConfig+0xc4>)
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8004fdc:	68b9      	ldr	r1, [r7, #8]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	430b      	orrs	r3, r1
 8004fe2:	4919      	ldr	r1, [pc, #100]	; (8005048 <HAL_RCC_MCOConfig+0xc4>)
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8004fe8:	e029      	b.n	800503e <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8004fea:	2300      	movs	r3, #0
 8004fec:	617b      	str	r3, [r7, #20]
 8004fee:	4b16      	ldr	r3, [pc, #88]	; (8005048 <HAL_RCC_MCOConfig+0xc4>)
 8004ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff2:	4a15      	ldr	r2, [pc, #84]	; (8005048 <HAL_RCC_MCOConfig+0xc4>)
 8004ff4:	f043 0304 	orr.w	r3, r3, #4
 8004ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8004ffa:	4b13      	ldr	r3, [pc, #76]	; (8005048 <HAL_RCC_MCOConfig+0xc4>)
 8004ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ffe:	f003 0304 	and.w	r3, r3, #4
 8005002:	617b      	str	r3, [r7, #20]
 8005004:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8005006:	f44f 7300 	mov.w	r3, #512	; 0x200
 800500a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800500c:	2302      	movs	r3, #2
 800500e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005010:	2303      	movs	r3, #3
 8005012:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005014:	2300      	movs	r3, #0
 8005016:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005018:	2300      	movs	r3, #0
 800501a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800501c:	f107 031c 	add.w	r3, r7, #28
 8005020:	4619      	mov	r1, r3
 8005022:	480b      	ldr	r0, [pc, #44]	; (8005050 <HAL_RCC_MCOConfig+0xcc>)
 8005024:	f7fe f98e 	bl	8003344 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8005028:	4b07      	ldr	r3, [pc, #28]	; (8005048 <HAL_RCC_MCOConfig+0xc4>)
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	00d9      	lsls	r1, r3, #3
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	430b      	orrs	r3, r1
 8005038:	4903      	ldr	r1, [pc, #12]	; (8005048 <HAL_RCC_MCOConfig+0xc4>)
 800503a:	4313      	orrs	r3, r2
 800503c:	608b      	str	r3, [r1, #8]
}
 800503e:	bf00      	nop
 8005040:	3730      	adds	r7, #48	; 0x30
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	40023800 	.word	0x40023800
 800504c:	40020000 	.word	0x40020000
 8005050:	40020800 	.word	0x40020800

08005054 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005054:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005058:	b094      	sub	sp, #80	; 0x50
 800505a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800505c:	2300      	movs	r3, #0
 800505e:	647b      	str	r3, [r7, #68]	; 0x44
 8005060:	2300      	movs	r3, #0
 8005062:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005064:	2300      	movs	r3, #0
 8005066:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005068:	2300      	movs	r3, #0
 800506a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800506c:	4b79      	ldr	r3, [pc, #484]	; (8005254 <HAL_RCC_GetSysClockFreq+0x200>)
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	f003 030c 	and.w	r3, r3, #12
 8005074:	2b08      	cmp	r3, #8
 8005076:	d00d      	beq.n	8005094 <HAL_RCC_GetSysClockFreq+0x40>
 8005078:	2b08      	cmp	r3, #8
 800507a:	f200 80e1 	bhi.w	8005240 <HAL_RCC_GetSysClockFreq+0x1ec>
 800507e:	2b00      	cmp	r3, #0
 8005080:	d002      	beq.n	8005088 <HAL_RCC_GetSysClockFreq+0x34>
 8005082:	2b04      	cmp	r3, #4
 8005084:	d003      	beq.n	800508e <HAL_RCC_GetSysClockFreq+0x3a>
 8005086:	e0db      	b.n	8005240 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005088:	4b73      	ldr	r3, [pc, #460]	; (8005258 <HAL_RCC_GetSysClockFreq+0x204>)
 800508a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800508c:	e0db      	b.n	8005246 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800508e:	4b73      	ldr	r3, [pc, #460]	; (800525c <HAL_RCC_GetSysClockFreq+0x208>)
 8005090:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005092:	e0d8      	b.n	8005246 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005094:	4b6f      	ldr	r3, [pc, #444]	; (8005254 <HAL_RCC_GetSysClockFreq+0x200>)
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800509c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800509e:	4b6d      	ldr	r3, [pc, #436]	; (8005254 <HAL_RCC_GetSysClockFreq+0x200>)
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d063      	beq.n	8005172 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050aa:	4b6a      	ldr	r3, [pc, #424]	; (8005254 <HAL_RCC_GetSysClockFreq+0x200>)
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	099b      	lsrs	r3, r3, #6
 80050b0:	2200      	movs	r2, #0
 80050b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80050b4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80050b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050bc:	633b      	str	r3, [r7, #48]	; 0x30
 80050be:	2300      	movs	r3, #0
 80050c0:	637b      	str	r3, [r7, #52]	; 0x34
 80050c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80050c6:	4622      	mov	r2, r4
 80050c8:	462b      	mov	r3, r5
 80050ca:	f04f 0000 	mov.w	r0, #0
 80050ce:	f04f 0100 	mov.w	r1, #0
 80050d2:	0159      	lsls	r1, r3, #5
 80050d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050d8:	0150      	lsls	r0, r2, #5
 80050da:	4602      	mov	r2, r0
 80050dc:	460b      	mov	r3, r1
 80050de:	4621      	mov	r1, r4
 80050e0:	1a51      	subs	r1, r2, r1
 80050e2:	6139      	str	r1, [r7, #16]
 80050e4:	4629      	mov	r1, r5
 80050e6:	eb63 0301 	sbc.w	r3, r3, r1
 80050ea:	617b      	str	r3, [r7, #20]
 80050ec:	f04f 0200 	mov.w	r2, #0
 80050f0:	f04f 0300 	mov.w	r3, #0
 80050f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050f8:	4659      	mov	r1, fp
 80050fa:	018b      	lsls	r3, r1, #6
 80050fc:	4651      	mov	r1, sl
 80050fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005102:	4651      	mov	r1, sl
 8005104:	018a      	lsls	r2, r1, #6
 8005106:	4651      	mov	r1, sl
 8005108:	ebb2 0801 	subs.w	r8, r2, r1
 800510c:	4659      	mov	r1, fp
 800510e:	eb63 0901 	sbc.w	r9, r3, r1
 8005112:	f04f 0200 	mov.w	r2, #0
 8005116:	f04f 0300 	mov.w	r3, #0
 800511a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800511e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005122:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005126:	4690      	mov	r8, r2
 8005128:	4699      	mov	r9, r3
 800512a:	4623      	mov	r3, r4
 800512c:	eb18 0303 	adds.w	r3, r8, r3
 8005130:	60bb      	str	r3, [r7, #8]
 8005132:	462b      	mov	r3, r5
 8005134:	eb49 0303 	adc.w	r3, r9, r3
 8005138:	60fb      	str	r3, [r7, #12]
 800513a:	f04f 0200 	mov.w	r2, #0
 800513e:	f04f 0300 	mov.w	r3, #0
 8005142:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005146:	4629      	mov	r1, r5
 8005148:	024b      	lsls	r3, r1, #9
 800514a:	4621      	mov	r1, r4
 800514c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005150:	4621      	mov	r1, r4
 8005152:	024a      	lsls	r2, r1, #9
 8005154:	4610      	mov	r0, r2
 8005156:	4619      	mov	r1, r3
 8005158:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800515a:	2200      	movs	r2, #0
 800515c:	62bb      	str	r3, [r7, #40]	; 0x28
 800515e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005160:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005164:	f7fb f830 	bl	80001c8 <__aeabi_uldivmod>
 8005168:	4602      	mov	r2, r0
 800516a:	460b      	mov	r3, r1
 800516c:	4613      	mov	r3, r2
 800516e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005170:	e058      	b.n	8005224 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005172:	4b38      	ldr	r3, [pc, #224]	; (8005254 <HAL_RCC_GetSysClockFreq+0x200>)
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	099b      	lsrs	r3, r3, #6
 8005178:	2200      	movs	r2, #0
 800517a:	4618      	mov	r0, r3
 800517c:	4611      	mov	r1, r2
 800517e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005182:	623b      	str	r3, [r7, #32]
 8005184:	2300      	movs	r3, #0
 8005186:	627b      	str	r3, [r7, #36]	; 0x24
 8005188:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800518c:	4642      	mov	r2, r8
 800518e:	464b      	mov	r3, r9
 8005190:	f04f 0000 	mov.w	r0, #0
 8005194:	f04f 0100 	mov.w	r1, #0
 8005198:	0159      	lsls	r1, r3, #5
 800519a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800519e:	0150      	lsls	r0, r2, #5
 80051a0:	4602      	mov	r2, r0
 80051a2:	460b      	mov	r3, r1
 80051a4:	4641      	mov	r1, r8
 80051a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80051aa:	4649      	mov	r1, r9
 80051ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80051b0:	f04f 0200 	mov.w	r2, #0
 80051b4:	f04f 0300 	mov.w	r3, #0
 80051b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80051bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80051c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80051c4:	ebb2 040a 	subs.w	r4, r2, sl
 80051c8:	eb63 050b 	sbc.w	r5, r3, fp
 80051cc:	f04f 0200 	mov.w	r2, #0
 80051d0:	f04f 0300 	mov.w	r3, #0
 80051d4:	00eb      	lsls	r3, r5, #3
 80051d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051da:	00e2      	lsls	r2, r4, #3
 80051dc:	4614      	mov	r4, r2
 80051de:	461d      	mov	r5, r3
 80051e0:	4643      	mov	r3, r8
 80051e2:	18e3      	adds	r3, r4, r3
 80051e4:	603b      	str	r3, [r7, #0]
 80051e6:	464b      	mov	r3, r9
 80051e8:	eb45 0303 	adc.w	r3, r5, r3
 80051ec:	607b      	str	r3, [r7, #4]
 80051ee:	f04f 0200 	mov.w	r2, #0
 80051f2:	f04f 0300 	mov.w	r3, #0
 80051f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80051fa:	4629      	mov	r1, r5
 80051fc:	028b      	lsls	r3, r1, #10
 80051fe:	4621      	mov	r1, r4
 8005200:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005204:	4621      	mov	r1, r4
 8005206:	028a      	lsls	r2, r1, #10
 8005208:	4610      	mov	r0, r2
 800520a:	4619      	mov	r1, r3
 800520c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800520e:	2200      	movs	r2, #0
 8005210:	61bb      	str	r3, [r7, #24]
 8005212:	61fa      	str	r2, [r7, #28]
 8005214:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005218:	f7fa ffd6 	bl	80001c8 <__aeabi_uldivmod>
 800521c:	4602      	mov	r2, r0
 800521e:	460b      	mov	r3, r1
 8005220:	4613      	mov	r3, r2
 8005222:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005224:	4b0b      	ldr	r3, [pc, #44]	; (8005254 <HAL_RCC_GetSysClockFreq+0x200>)
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	0c1b      	lsrs	r3, r3, #16
 800522a:	f003 0303 	and.w	r3, r3, #3
 800522e:	3301      	adds	r3, #1
 8005230:	005b      	lsls	r3, r3, #1
 8005232:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005234:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005236:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005238:	fbb2 f3f3 	udiv	r3, r2, r3
 800523c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800523e:	e002      	b.n	8005246 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005240:	4b05      	ldr	r3, [pc, #20]	; (8005258 <HAL_RCC_GetSysClockFreq+0x204>)
 8005242:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005244:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005246:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005248:	4618      	mov	r0, r3
 800524a:	3750      	adds	r7, #80	; 0x50
 800524c:	46bd      	mov	sp, r7
 800524e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005252:	bf00      	nop
 8005254:	40023800 	.word	0x40023800
 8005258:	00f42400 	.word	0x00f42400
 800525c:	007a1200 	.word	0x007a1200

08005260 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005260:	b480      	push	{r7}
 8005262:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005264:	4b03      	ldr	r3, [pc, #12]	; (8005274 <HAL_RCC_GetHCLKFreq+0x14>)
 8005266:	681b      	ldr	r3, [r3, #0]
}
 8005268:	4618      	mov	r0, r3
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr
 8005272:	bf00      	nop
 8005274:	2000000c 	.word	0x2000000c

08005278 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800527c:	f7ff fff0 	bl	8005260 <HAL_RCC_GetHCLKFreq>
 8005280:	4602      	mov	r2, r0
 8005282:	4b05      	ldr	r3, [pc, #20]	; (8005298 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	0a9b      	lsrs	r3, r3, #10
 8005288:	f003 0307 	and.w	r3, r3, #7
 800528c:	4903      	ldr	r1, [pc, #12]	; (800529c <HAL_RCC_GetPCLK1Freq+0x24>)
 800528e:	5ccb      	ldrb	r3, [r1, r3]
 8005290:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005294:	4618      	mov	r0, r3
 8005296:	bd80      	pop	{r7, pc}
 8005298:	40023800 	.word	0x40023800
 800529c:	08005394 	.word	0x08005394

080052a0 <memset>:
 80052a0:	4402      	add	r2, r0
 80052a2:	4603      	mov	r3, r0
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d100      	bne.n	80052aa <memset+0xa>
 80052a8:	4770      	bx	lr
 80052aa:	f803 1b01 	strb.w	r1, [r3], #1
 80052ae:	e7f9      	b.n	80052a4 <memset+0x4>

080052b0 <__libc_init_array>:
 80052b0:	b570      	push	{r4, r5, r6, lr}
 80052b2:	4d0d      	ldr	r5, [pc, #52]	; (80052e8 <__libc_init_array+0x38>)
 80052b4:	4c0d      	ldr	r4, [pc, #52]	; (80052ec <__libc_init_array+0x3c>)
 80052b6:	1b64      	subs	r4, r4, r5
 80052b8:	10a4      	asrs	r4, r4, #2
 80052ba:	2600      	movs	r6, #0
 80052bc:	42a6      	cmp	r6, r4
 80052be:	d109      	bne.n	80052d4 <__libc_init_array+0x24>
 80052c0:	4d0b      	ldr	r5, [pc, #44]	; (80052f0 <__libc_init_array+0x40>)
 80052c2:	4c0c      	ldr	r4, [pc, #48]	; (80052f4 <__libc_init_array+0x44>)
 80052c4:	f000 f818 	bl	80052f8 <_init>
 80052c8:	1b64      	subs	r4, r4, r5
 80052ca:	10a4      	asrs	r4, r4, #2
 80052cc:	2600      	movs	r6, #0
 80052ce:	42a6      	cmp	r6, r4
 80052d0:	d105      	bne.n	80052de <__libc_init_array+0x2e>
 80052d2:	bd70      	pop	{r4, r5, r6, pc}
 80052d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80052d8:	4798      	blx	r3
 80052da:	3601      	adds	r6, #1
 80052dc:	e7ee      	b.n	80052bc <__libc_init_array+0xc>
 80052de:	f855 3b04 	ldr.w	r3, [r5], #4
 80052e2:	4798      	blx	r3
 80052e4:	3601      	adds	r6, #1
 80052e6:	e7f2      	b.n	80052ce <__libc_init_array+0x1e>
 80052e8:	080053ac 	.word	0x080053ac
 80052ec:	080053ac 	.word	0x080053ac
 80052f0:	080053ac 	.word	0x080053ac
 80052f4:	080053b0 	.word	0x080053b0

080052f8 <_init>:
 80052f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052fa:	bf00      	nop
 80052fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052fe:	bc08      	pop	{r3}
 8005300:	469e      	mov	lr, r3
 8005302:	4770      	bx	lr

08005304 <_fini>:
 8005304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005306:	bf00      	nop
 8005308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800530a:	bc08      	pop	{r3}
 800530c:	469e      	mov	lr, r3
 800530e:	4770      	bx	lr
