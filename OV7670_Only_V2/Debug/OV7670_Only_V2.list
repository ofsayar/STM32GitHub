
OV7670_Only_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005180  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08005308  08005308  00015308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800539c  0800539c  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  0800539c  0800539c  0001539c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053a4  080053a4  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053a4  080053a4  000153a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053a8  080053a8  000153a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080053ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          00004cbc  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004cd4  20004cd4  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000a58c  00000000  00000000  0002008b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001dc7  00000000  00000000  0002a617  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000908  00000000  00000000  0002c3e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000006e1  00000000  00000000  0002cce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002038a  00000000  00000000  0002d3c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000d087  00000000  00000000  0004d753  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c08a2  00000000  00000000  0005a7da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000240c  00000000  00000000  0011b07c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  0011d488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080052f0 	.word	0x080052f0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	080052f0 	.word	0x080052f0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <OV7670_Init>:
/*
 * @brief Initializes the Camera Module
 * @retval returns number of errors during initialization
 * */
uint8_t OV7670_Init(DCMI_HandleTypeDef *p_hdcmi, DMA_HandleTypeDef *p_hdma_dcmi, I2C_HandleTypeDef *p_hi2c)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b086      	sub	sp, #24
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	60f8      	str	r0, [r7, #12]
 80004cc:	60b9      	str	r1, [r7, #8]
 80004ce:	607a      	str	r2, [r7, #4]
	sp_hdcmi 	 = p_hdcmi;
 80004d0:	4a25      	ldr	r2, [pc, #148]	; (8000568 <OV7670_Init+0xa4>)
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	6013      	str	r3, [r2, #0]
	sp_hdma_dcmi = p_hdma_dcmi;
 80004d6:	4a25      	ldr	r2, [pc, #148]	; (800056c <OV7670_Init+0xa8>)
 80004d8:	68bb      	ldr	r3, [r7, #8]
 80004da:	6013      	str	r3, [r2, #0]
	sp_hi2c		 = p_hi2c;
 80004dc:	4a24      	ldr	r2, [pc, #144]	; (8000570 <OV7670_Init+0xac>)
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	6013      	str	r3, [r2, #0]

	HAL_StatusTypeDef status;
	uint8_t errNum = 0;
 80004e2:	2300      	movs	r3, #0
 80004e4:	75fb      	strb	r3, [r7, #23]
	uint8_t buffer[4]; //re
	// Software Reset
	status = OV7670_Write(0x12, 0x80);
 80004e6:	2180      	movs	r1, #128	; 0x80
 80004e8:	2012      	movs	r0, #18
 80004ea:	f000 fa2b 	bl	8000944 <OV7670_Write>
 80004ee:	4603      	mov	r3, r0
 80004f0:	75bb      	strb	r3, [r7, #22]
	errNum += ( status != HAL_OK );
 80004f2:	7dbb      	ldrb	r3, [r7, #22]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	bf14      	ite	ne
 80004f8:	2301      	movne	r3, #1
 80004fa:	2300      	moveq	r3, #0
 80004fc:	b2db      	uxtb	r3, r3
 80004fe:	461a      	mov	r2, r3
 8000500:	7dfb      	ldrb	r3, [r7, #23]
 8000502:	4413      	add	r3, r2
 8000504:	75fb      	strb	r3, [r7, #23]
	status = OV7670_Read(0x12, buffer); //re
 8000506:	f107 0310 	add.w	r3, r7, #16
 800050a:	4619      	mov	r1, r3
 800050c:	2012      	movs	r0, #18
 800050e:	f000 fa39 	bl	8000984 <OV7670_Read>
 8000512:	4603      	mov	r3, r0
 8000514:	75bb      	strb	r3, [r7, #22]
	errNum += ( status != HAL_OK );		//r
 8000516:	7dbb      	ldrb	r3, [r7, #22]
 8000518:	2b00      	cmp	r3, #0
 800051a:	bf14      	ite	ne
 800051c:	2301      	movne	r3, #1
 800051e:	2300      	moveq	r3, #0
 8000520:	b2db      	uxtb	r3, r3
 8000522:	461a      	mov	r2, r3
 8000524:	7dfb      	ldrb	r3, [r7, #23]
 8000526:	4413      	add	r3, r2
 8000528:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(30);
 800052a:	201e      	movs	r0, #30
 800052c:	f000 fe74 	bl	8001218 <HAL_Delay>

	// Read device ID after reset
	//uint8_t buffer[4];
	status = OV7670_Read(0x0b, buffer);
 8000530:	f107 0310 	add.w	r3, r7, #16
 8000534:	4619      	mov	r1, r3
 8000536:	200b      	movs	r0, #11
 8000538:	f000 fa24 	bl	8000984 <OV7670_Read>
 800053c:	4603      	mov	r3, r0
 800053e:	75bb      	strb	r3, [r7, #22]
	errNum += ( status != HAL_OK );
 8000540:	7dbb      	ldrb	r3, [r7, #22]
 8000542:	2b00      	cmp	r3, #0
 8000544:	bf14      	ite	ne
 8000546:	2301      	movne	r3, #1
 8000548:	2300      	moveq	r3, #0
 800054a:	b2db      	uxtb	r3, r3
 800054c:	461a      	mov	r2, r3
 800054e:	7dfb      	ldrb	r3, [r7, #23]
 8000550:	4413      	add	r3, r2
 8000552:	75fb      	strb	r3, [r7, #23]

	if(buffer[0] != 0x73)
 8000554:	7c3b      	ldrb	r3, [r7, #16]
 8000556:	2b73      	cmp	r3, #115	; 0x73
 8000558:	d001      	beq.n	800055e <OV7670_Init+0x9a>
		return 255;
 800055a:	23ff      	movs	r3, #255	; 0xff
 800055c:	e000      	b.n	8000560 <OV7670_Init+0x9c>

	return errNum;
 800055e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000560:	4618      	mov	r0, r3
 8000562:	3718      	adds	r7, #24
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	20000034 	.word	0x20000034
 800056c:	20000038 	.word	0x20000038
 8000570:	2000003c 	.word	0x2000003c

08000574 <OV7670_Config>:


void OV7670_Config(const uint8_t params[][2])
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	for(int i = 0; params[i][0] != 0xFF; i++)
 800057c:	2300      	movs	r3, #0
 800057e:	60fb      	str	r3, [r7, #12]
 8000580:	e012      	b.n	80005a8 <OV7670_Config+0x34>
	{
		OV7670_Write(params[i][0], params[i][1]);
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	005b      	lsls	r3, r3, #1
 8000586:	687a      	ldr	r2, [r7, #4]
 8000588:	4413      	add	r3, r2
 800058a:	7818      	ldrb	r0, [r3, #0]
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	005b      	lsls	r3, r3, #1
 8000590:	687a      	ldr	r2, [r7, #4]
 8000592:	4413      	add	r3, r2
 8000594:	785b      	ldrb	r3, [r3, #1]
 8000596:	4619      	mov	r1, r3
 8000598:	f000 f9d4 	bl	8000944 <OV7670_Write>
		HAL_Delay(1);
 800059c:	2001      	movs	r0, #1
 800059e:	f000 fe3b 	bl	8001218 <HAL_Delay>
	for(int i = 0; params[i][0] != 0xFF; i++)
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	3301      	adds	r3, #1
 80005a6:	60fb      	str	r3, [r7, #12]
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	005b      	lsls	r3, r3, #1
 80005ac:	687a      	ldr	r2, [r7, #4]
 80005ae:	4413      	add	r3, r2
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	2bff      	cmp	r3, #255	; 0xff
 80005b4:	d1e5      	bne.n	8000582 <OV7670_Config+0xe>
	}
}
 80005b6:	bf00      	nop
 80005b8:	bf00      	nop
 80005ba:	3710      	adds	r7, #16
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}

080005c0 <OV7670_Start>:
 * @param mode Capture_mode enum that is either Continous or Snapshot
 * @param capture_address is the lcd data address
 * @retval None
 * */
void OV7670_Start(Capture_mode mode, uint32_t *capture_address)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	6039      	str	r1, [r7, #0]
 80005ca:	71fb      	strb	r3, [r7, #7]
	capture_mode=mode;
 80005cc:	4a19      	ldr	r2, [pc, #100]	; (8000634 <OV7670_Start+0x74>)
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	7013      	strb	r3, [r2, #0]
	img_address=(uint32_t)capture_address;
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	4a18      	ldr	r2, [pc, #96]	; (8000638 <OV7670_Start+0x78>)
 80005d6:	6013      	str	r3, [r2, #0]

	if(capture_mode == SNAPSHOT)
 80005d8:	4b16      	ldr	r3, [pc, #88]	; (8000634 <OV7670_Start+0x74>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d112      	bne.n	8000606 <OV7670_Start+0x46>
		HAL_DCMI_Start_DMA(sp_hdcmi, DCMI_MODE_SNAPSHOT, img_address, img_width * img_height/2);
 80005e0:	4b16      	ldr	r3, [pc, #88]	; (800063c <OV7670_Start+0x7c>)
 80005e2:	6818      	ldr	r0, [r3, #0]
 80005e4:	4b14      	ldr	r3, [pc, #80]	; (8000638 <OV7670_Start+0x78>)
 80005e6:	6819      	ldr	r1, [r3, #0]
 80005e8:	4b15      	ldr	r3, [pc, #84]	; (8000640 <OV7670_Start+0x80>)
 80005ea:	881b      	ldrh	r3, [r3, #0]
 80005ec:	461a      	mov	r2, r3
 80005ee:	4b15      	ldr	r3, [pc, #84]	; (8000644 <OV7670_Start+0x84>)
 80005f0:	881b      	ldrh	r3, [r3, #0]
 80005f2:	fb02 f303 	mul.w	r3, r2, r3
 80005f6:	0fda      	lsrs	r2, r3, #31
 80005f8:	4413      	add	r3, r2
 80005fa:	105b      	asrs	r3, r3, #1
 80005fc:	460a      	mov	r2, r1
 80005fe:	2102      	movs	r1, #2
 8000600:	f000 ff40 	bl	8001484 <HAL_DCMI_Start_DMA>
	else
		HAL_DCMI_Start_DMA(sp_hdcmi, DCMI_MODE_CONTINUOUS, img_address, img_width * img_height/2);
}
 8000604:	e011      	b.n	800062a <OV7670_Start+0x6a>
		HAL_DCMI_Start_DMA(sp_hdcmi, DCMI_MODE_CONTINUOUS, img_address, img_width * img_height/2);
 8000606:	4b0d      	ldr	r3, [pc, #52]	; (800063c <OV7670_Start+0x7c>)
 8000608:	6818      	ldr	r0, [r3, #0]
 800060a:	4b0b      	ldr	r3, [pc, #44]	; (8000638 <OV7670_Start+0x78>)
 800060c:	6819      	ldr	r1, [r3, #0]
 800060e:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <OV7670_Start+0x80>)
 8000610:	881b      	ldrh	r3, [r3, #0]
 8000612:	461a      	mov	r2, r3
 8000614:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <OV7670_Start+0x84>)
 8000616:	881b      	ldrh	r3, [r3, #0]
 8000618:	fb02 f303 	mul.w	r3, r2, r3
 800061c:	0fda      	lsrs	r2, r3, #31
 800061e:	4413      	add	r3, r2
 8000620:	105b      	asrs	r3, r3, #1
 8000622:	460a      	mov	r2, r1
 8000624:	2100      	movs	r1, #0
 8000626:	f000 ff2d 	bl	8001484 <HAL_DCMI_Start_DMA>
}
 800062a:	bf00      	nop
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	20000040 	.word	0x20000040
 8000638:	20000044 	.word	0x20000044
 800063c:	20000034 	.word	0x20000034
 8000640:	20000000 	.word	0x20000000
 8000644:	20000002 	.word	0x20000002

08000648 <OV7670_SetFrameRate>:
 * @param mul the number to multiply with XCLK input.
 * Notes: 	(XCLK / div ) * mul
 * @retval None
 * */
void OV7670_SetFrameRate(uint8_t div, PLL_mul mul)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	460a      	mov	r2, r1
 8000652:	71fb      	strb	r3, [r7, #7]
 8000654:	4613      	mov	r3, r2
 8000656:	71bb      	strb	r3, [r7, #6]
	OV7670_Write(REG_CLKRC, 0x80 | div);
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800065e:	b2db      	uxtb	r3, r3
 8000660:	4619      	mov	r1, r3
 8000662:	2011      	movs	r0, #17
 8000664:	f000 f96e 	bl	8000944 <OV7670_Write>
	HAL_Delay(1);
 8000668:	2001      	movs	r0, #1
 800066a:	f000 fdd5 	bl	8001218 <HAL_Delay>
	OV7670_Write(REG_DBLV, 0x0A | mul);
 800066e:	79bb      	ldrb	r3, [r7, #6]
 8000670:	f043 030a 	orr.w	r3, r3, #10
 8000674:	b2db      	uxtb	r3, r3
 8000676:	4619      	mov	r1, r3
 8000678:	206b      	movs	r0, #107	; 0x6b
 800067a:	f000 f963 	bl	8000944 <OV7670_Write>
	HAL_Delay(1);
 800067e:	2001      	movs	r0, #1
 8000680:	f000 fdca 	bl	8001218 <HAL_Delay>
}
 8000684:	bf00      	nop
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}

0800068c <OV7670_SetColorFormat>:


void OV7670_SetColorFormat(Camera_format format)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	71fb      	strb	r3, [r7, #7]
	uint8_t temp[2];

	OV7670_Read(REG_COM7, &temp[0]);
 8000696:	f107 030c 	add.w	r3, r7, #12
 800069a:	4619      	mov	r1, r3
 800069c:	2012      	movs	r0, #18
 800069e:	f000 f971 	bl	8000984 <OV7670_Read>
	temp[0]&=0b11111010;
 80006a2:	7b3b      	ldrb	r3, [r7, #12]
 80006a4:	f023 0305 	bic.w	r3, r3, #5
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	733b      	strb	r3, [r7, #12]
	OV7670_Read(REG_COM15, &temp[1]);
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	3301      	adds	r3, #1
 80006b2:	4619      	mov	r1, r3
 80006b4:	2040      	movs	r0, #64	; 0x40
 80006b6:	f000 f965 	bl	8000984 <OV7670_Read>
	temp[1]&=0b00001111;
 80006ba:	7b7b      	ldrb	r3, [r7, #13]
 80006bc:	f003 030f 	and.w	r3, r3, #15
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	737b      	strb	r3, [r7, #13]
	HAL_Delay(10);
 80006c4:	200a      	movs	r0, #10
 80006c6:	f000 fda7 	bl	8001218 <HAL_Delay>

	switch(format)
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d002      	beq.n	80006d6 <OV7670_SetColorFormat+0x4a>
 80006d0:	2b01      	cmp	r3, #1
 80006d2:	d00e      	beq.n	80006f2 <OV7670_SetColorFormat+0x66>
			OV7670_Write(REG_COM7, temp[0] | 0x04);//RGB
			OV7670_Write(REG_COM15, temp[1] | 0x10);//RGB565
			img_format=RGB565;
			break;
	}
}
 80006d4:	e021      	b.n	800071a <OV7670_SetColorFormat+0x8e>
			OV7670_Write(REG_COM7, temp[0] | 0x00);
 80006d6:	7b3b      	ldrb	r3, [r7, #12]
 80006d8:	4619      	mov	r1, r3
 80006da:	2012      	movs	r0, #18
 80006dc:	f000 f932 	bl	8000944 <OV7670_Write>
			OV7670_Write(REG_COM15, temp[1] | 0x00);
 80006e0:	7b7b      	ldrb	r3, [r7, #13]
 80006e2:	4619      	mov	r1, r3
 80006e4:	2040      	movs	r0, #64	; 0x40
 80006e6:	f000 f92d 	bl	8000944 <OV7670_Write>
			img_format=YUV422;
 80006ea:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <OV7670_SetColorFormat+0x98>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	701a      	strb	r2, [r3, #0]
			break;
 80006f0:	e013      	b.n	800071a <OV7670_SetColorFormat+0x8e>
			OV7670_Write(REG_COM7, temp[0] | 0x04);//RGB
 80006f2:	7b3b      	ldrb	r3, [r7, #12]
 80006f4:	f043 0304 	orr.w	r3, r3, #4
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	4619      	mov	r1, r3
 80006fc:	2012      	movs	r0, #18
 80006fe:	f000 f921 	bl	8000944 <OV7670_Write>
			OV7670_Write(REG_COM15, temp[1] | 0x10);//RGB565
 8000702:	7b7b      	ldrb	r3, [r7, #13]
 8000704:	f043 0310 	orr.w	r3, r3, #16
 8000708:	b2db      	uxtb	r3, r3
 800070a:	4619      	mov	r1, r3
 800070c:	2040      	movs	r0, #64	; 0x40
 800070e:	f000 f919 	bl	8000944 <OV7670_Write>
			img_format=RGB565;
 8000712:	4b04      	ldr	r3, [pc, #16]	; (8000724 <OV7670_SetColorFormat+0x98>)
 8000714:	2201      	movs	r2, #1
 8000716:	701a      	strb	r2, [r3, #0]
			break;
 8000718:	bf00      	nop
}
 800071a:	bf00      	nop
 800071c:	3710      	adds	r7, #16
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20000004 	.word	0x20000004

08000728 <OV7670_SetFrameControl>:


void OV7670_SetFrameControl(uint16_t hstart, uint16_t hstop, uint16_t vstart, uint16_t vstop)
{
 8000728:	b590      	push	{r4, r7, lr}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	4604      	mov	r4, r0
 8000730:	4608      	mov	r0, r1
 8000732:	4611      	mov	r1, r2
 8000734:	461a      	mov	r2, r3
 8000736:	4623      	mov	r3, r4
 8000738:	80fb      	strh	r3, [r7, #6]
 800073a:	4603      	mov	r3, r0
 800073c:	80bb      	strh	r3, [r7, #4]
 800073e:	460b      	mov	r3, r1
 8000740:	807b      	strh	r3, [r7, #2]
 8000742:	4613      	mov	r3, r2
 8000744:	803b      	strh	r3, [r7, #0]
	OV7670_Write(REG_HSTART, (hstart >> 3) & 0xff);
 8000746:	88fb      	ldrh	r3, [r7, #6]
 8000748:	08db      	lsrs	r3, r3, #3
 800074a:	b29b      	uxth	r3, r3
 800074c:	b2db      	uxtb	r3, r3
 800074e:	4619      	mov	r1, r3
 8000750:	2017      	movs	r0, #23
 8000752:	f000 f8f7 	bl	8000944 <OV7670_Write>
	OV7670_Write(REG_HSTOP, (hstop >> 3) & 0xff);
 8000756:	88bb      	ldrh	r3, [r7, #4]
 8000758:	08db      	lsrs	r3, r3, #3
 800075a:	b29b      	uxth	r3, r3
 800075c:	b2db      	uxtb	r3, r3
 800075e:	4619      	mov	r1, r3
 8000760:	2018      	movs	r0, #24
 8000762:	f000 f8ef 	bl	8000944 <OV7670_Write>
	OV7670_Write(REG_HREF, ((hstop & 0x7) << 3) | (hstart & 0x7));
 8000766:	88bb      	ldrh	r3, [r7, #4]
 8000768:	00db      	lsls	r3, r3, #3
 800076a:	b25b      	sxtb	r3, r3
 800076c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000770:	b25a      	sxtb	r2, r3
 8000772:	88fb      	ldrh	r3, [r7, #6]
 8000774:	b25b      	sxtb	r3, r3
 8000776:	f003 0307 	and.w	r3, r3, #7
 800077a:	b25b      	sxtb	r3, r3
 800077c:	4313      	orrs	r3, r2
 800077e:	b25b      	sxtb	r3, r3
 8000780:	b2db      	uxtb	r3, r3
 8000782:	4619      	mov	r1, r3
 8000784:	2032      	movs	r0, #50	; 0x32
 8000786:	f000 f8dd 	bl	8000944 <OV7670_Write>

	OV7670_Write(REG_VSTART, (vstart >> 2) & 0xff);
 800078a:	887b      	ldrh	r3, [r7, #2]
 800078c:	089b      	lsrs	r3, r3, #2
 800078e:	b29b      	uxth	r3, r3
 8000790:	b2db      	uxtb	r3, r3
 8000792:	4619      	mov	r1, r3
 8000794:	2019      	movs	r0, #25
 8000796:	f000 f8d5 	bl	8000944 <OV7670_Write>
	OV7670_Write(REG_VSTOP, (vstop >> 2) & 0xff);
 800079a:	883b      	ldrh	r3, [r7, #0]
 800079c:	089b      	lsrs	r3, r3, #2
 800079e:	b29b      	uxth	r3, r3
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	4619      	mov	r1, r3
 80007a4:	201a      	movs	r0, #26
 80007a6:	f000 f8cd 	bl	8000944 <OV7670_Write>
	OV7670_Write(REG_VREF,((vstop & 0x3) << 2) | (vstart & 0x3));
 80007aa:	883b      	ldrh	r3, [r7, #0]
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	b25b      	sxtb	r3, r3
 80007b0:	f003 030c 	and.w	r3, r3, #12
 80007b4:	b25a      	sxtb	r2, r3
 80007b6:	887b      	ldrh	r3, [r7, #2]
 80007b8:	b25b      	sxtb	r3, r3
 80007ba:	f003 0303 	and.w	r3, r3, #3
 80007be:	b25b      	sxtb	r3, r3
 80007c0:	4313      	orrs	r3, r2
 80007c2:	b25b      	sxtb	r3, r3
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	4619      	mov	r1, r3
 80007c8:	2003      	movs	r0, #3
 80007ca:	f000 f8bb 	bl	8000944 <OV7670_Write>
}
 80007ce:	bf00      	nop
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd90      	pop	{r4, r7, pc}
	...

080007d8 <OV7670_SetResolution>:

void OV7670_SetResolution(Camera_resolution resolution)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	71fb      	strb	r3, [r7, #7]

	switch(resolution)
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	2b05      	cmp	r3, #5
 80007e6:	d87a      	bhi.n	80008de <OV7670_SetResolution+0x106>
 80007e8:	a201      	add	r2, pc, #4	; (adr r2, 80007f0 <OV7670_SetResolution+0x18>)
 80007ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007ee:	bf00      	nop
 80007f0:	08000809 	.word	0x08000809
 80007f4:	0800082d 	.word	0x0800082d
 80007f8:	0800084f 	.word	0x0800084f
 80007fc:	08000871 	.word	0x08000871
 8000800:	08000897 	.word	0x08000897
 8000804:	080008bb 	.word	0x080008bb
	{
		case QVGA:	//OK
			OV7670_Config(RES_QVGA);
 8000808:	4837      	ldr	r0, [pc, #220]	; (80008e8 <OV7670_SetResolution+0x110>)
 800080a:	f7ff feb3 	bl	8000574 <OV7670_Config>
			OV7670_SetFrameControl(168,24,12,492);
 800080e:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
 8000812:	220c      	movs	r2, #12
 8000814:	2118      	movs	r1, #24
 8000816:	20a8      	movs	r0, #168	; 0xa8
 8000818:	f7ff ff86 	bl	8000728 <OV7670_SetFrameControl>
			img_width=320;
 800081c:	4b33      	ldr	r3, [pc, #204]	; (80008ec <OV7670_SetResolution+0x114>)
 800081e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000822:	801a      	strh	r2, [r3, #0]
			img_height=240;
 8000824:	4b32      	ldr	r3, [pc, #200]	; (80008f0 <OV7670_SetResolution+0x118>)
 8000826:	22f0      	movs	r2, #240	; 0xf0
 8000828:	801a      	strh	r2, [r3, #0]
			break;
 800082a:	e058      	b.n	80008de <OV7670_SetResolution+0x106>
		case QQVGA:	//OK
			OV7670_Config(RES_QQVGA);
 800082c:	4831      	ldr	r0, [pc, #196]	; (80008f4 <OV7670_SetResolution+0x11c>)
 800082e:	f7ff fea1 	bl	8000574 <OV7670_Config>
			OV7670_SetFrameControl(174,30,12,492);
 8000832:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
 8000836:	220c      	movs	r2, #12
 8000838:	211e      	movs	r1, #30
 800083a:	20ae      	movs	r0, #174	; 0xae
 800083c:	f7ff ff74 	bl	8000728 <OV7670_SetFrameControl>
			img_width=160;
 8000840:	4b2a      	ldr	r3, [pc, #168]	; (80008ec <OV7670_SetResolution+0x114>)
 8000842:	22a0      	movs	r2, #160	; 0xa0
 8000844:	801a      	strh	r2, [r3, #0]
			img_height=120;
 8000846:	4b2a      	ldr	r3, [pc, #168]	; (80008f0 <OV7670_SetResolution+0x118>)
 8000848:	2278      	movs	r2, #120	; 0x78
 800084a:	801a      	strh	r2, [r3, #0]
			break;
 800084c:	e047      	b.n	80008de <OV7670_SetResolution+0x106>
		case QQQVGA:	//OK
			OV7670_Config(RES_QQQVGA);
 800084e:	482a      	ldr	r0, [pc, #168]	; (80008f8 <OV7670_SetResolution+0x120>)
 8000850:	f7ff fe90 	bl	8000574 <OV7670_Config>
			OV7670_SetFrameControl(196,52,12,492);//(196+640)%784=52
 8000854:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
 8000858:	220c      	movs	r2, #12
 800085a:	2134      	movs	r1, #52	; 0x34
 800085c:	20c4      	movs	r0, #196	; 0xc4
 800085e:	f7ff ff63 	bl	8000728 <OV7670_SetFrameControl>
			img_width=80;
 8000862:	4b22      	ldr	r3, [pc, #136]	; (80008ec <OV7670_SetResolution+0x114>)
 8000864:	2250      	movs	r2, #80	; 0x50
 8000866:	801a      	strh	r2, [r3, #0]
			img_height=60;
 8000868:	4b21      	ldr	r3, [pc, #132]	; (80008f0 <OV7670_SetResolution+0x118>)
 800086a:	223c      	movs	r2, #60	; 0x3c
 800086c:	801a      	strh	r2, [r3, #0]
			break;
 800086e:	e036      	b.n	80008de <OV7670_SetResolution+0x106>
		case CIF:	//OK
			OV7670_Config(RES_CIF);
 8000870:	4822      	ldr	r0, [pc, #136]	; (80008fc <OV7670_SetResolution+0x124>)
 8000872:	f7ff fe7f 	bl	8000574 <OV7670_Config>
			OV7670_SetFrameControl(174,94,12,489); //for vstop=492 image moves out
 8000876:	f240 13e9 	movw	r3, #489	; 0x1e9
 800087a:	220c      	movs	r2, #12
 800087c:	215e      	movs	r1, #94	; 0x5e
 800087e:	20ae      	movs	r0, #174	; 0xae
 8000880:	f7ff ff52 	bl	8000728 <OV7670_SetFrameControl>
			img_width=352;
 8000884:	4b19      	ldr	r3, [pc, #100]	; (80008ec <OV7670_SetResolution+0x114>)
 8000886:	f44f 72b0 	mov.w	r2, #352	; 0x160
 800088a:	801a      	strh	r2, [r3, #0]
			img_height=288;
 800088c:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <OV7670_SetResolution+0x118>)
 800088e:	f44f 7290 	mov.w	r2, #288	; 0x120
 8000892:	801a      	strh	r2, [r3, #0]
			break;
 8000894:	e023      	b.n	80008de <OV7670_SetResolution+0x106>
		case QCIF:	//OK
			OV7670_Config(RES_QCIF);
 8000896:	481a      	ldr	r0, [pc, #104]	; (8000900 <OV7670_SetResolution+0x128>)
 8000898:	f7ff fe6c 	bl	8000574 <OV7670_Config>
			OV7670_SetFrameControl(454,22,12,492); //for hstart=454, htop=24 incorect last vertical line
 800089c:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
 80008a0:	220c      	movs	r2, #12
 80008a2:	2116      	movs	r1, #22
 80008a4:	f44f 70e3 	mov.w	r0, #454	; 0x1c6
 80008a8:	f7ff ff3e 	bl	8000728 <OV7670_SetFrameControl>
			img_width=176;
 80008ac:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <OV7670_SetResolution+0x114>)
 80008ae:	22b0      	movs	r2, #176	; 0xb0
 80008b0:	801a      	strh	r2, [r3, #0]
			img_height=144;
 80008b2:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <OV7670_SetResolution+0x118>)
 80008b4:	2290      	movs	r2, #144	; 0x90
 80008b6:	801a      	strh	r2, [r3, #0]
			break;
 80008b8:	e011      	b.n	80008de <OV7670_SetResolution+0x106>
		case QQCIF: //OK
			OV7670_Config(RES_QQCIF);
 80008ba:	4812      	ldr	r0, [pc, #72]	; (8000904 <OV7670_SetResolution+0x12c>)
 80008bc:	f7ff fe5a 	bl	8000574 <OV7670_Config>
			OV7670_SetFrameControl(474,42,12,492); //for hstart=454, htop=24 incorrect first line, incorrect colors
 80008c0:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
 80008c4:	220c      	movs	r2, #12
 80008c6:	212a      	movs	r1, #42	; 0x2a
 80008c8:	f44f 70ed 	mov.w	r0, #474	; 0x1da
 80008cc:	f7ff ff2c 	bl	8000728 <OV7670_SetFrameControl>
			img_width=88;
 80008d0:	4b06      	ldr	r3, [pc, #24]	; (80008ec <OV7670_SetResolution+0x114>)
 80008d2:	2258      	movs	r2, #88	; 0x58
 80008d4:	801a      	strh	r2, [r3, #0]
			img_height=72;
 80008d6:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <OV7670_SetResolution+0x118>)
 80008d8:	2248      	movs	r2, #72	; 0x48
 80008da:	801a      	strh	r2, [r3, #0]
			break;
 80008dc:	bf00      	nop
	}
}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	08005308 	.word	0x08005308
 80008ec:	20000000 	.word	0x20000000
 80008f0:	20000002 	.word	0x20000002
 80008f4:	08005318 	.word	0x08005318
 80008f8:	08005328 	.word	0x08005328
 80008fc:	08005338 	.word	0x08005338
 8000900:	08005348 	.word	0x08005348
 8000904:	08005358 	.word	0x08005358

08000908 <OV7670_UpdateSettings>:


void OV7670_UpdateSettings(Camera_settings OV7670)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	80b8      	strh	r0, [r7, #4]
	OV7670_Config(defaults);
 8000910:	480b      	ldr	r0, [pc, #44]	; (8000940 <OV7670_UpdateSettings+0x38>)
 8000912:	f7ff fe2f 	bl	8000574 <OV7670_Config>
	HAL_Delay(10);
 8000916:	200a      	movs	r0, #10
 8000918:	f000 fc7e 	bl	8001218 <HAL_Delay>

	OV7670_SetResolution(OV7670.resolution);
 800091c:	793b      	ldrb	r3, [r7, #4]
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff ff5a 	bl	80007d8 <OV7670_SetResolution>

	if(OV7670.format)
 8000924:	797b      	ldrb	r3, [r7, #5]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d003      	beq.n	8000932 <OV7670_UpdateSettings+0x2a>
		OV7670_SetColorFormat(RGB565);
 800092a:	2001      	movs	r0, #1
 800092c:	f7ff feae 	bl	800068c <OV7670_SetColorFormat>
	else
		OV7670_SetColorFormat(YUV422);

}
 8000930:	e002      	b.n	8000938 <OV7670_UpdateSettings+0x30>
		OV7670_SetColorFormat(YUV422);
 8000932:	2000      	movs	r0, #0
 8000934:	f7ff feaa 	bl	800068c <OV7670_SetColorFormat>
}
 8000938:	bf00      	nop
 800093a:	3708      	adds	r7, #8
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	08005368 	.word	0x08005368

08000944 <OV7670_Write>:
/*************************************************************************************************/
								/*** Low-Level Function Defines ***/
/*************************************************************************************************/

HAL_StatusTypeDef OV7670_Write(uint8_t regAddr, uint8_t data)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b088      	sub	sp, #32
 8000948:	af04      	add	r7, sp, #16
 800094a:	4603      	mov	r3, r0
 800094c:	460a      	mov	r2, r1
 800094e:	71fb      	strb	r3, [r7, #7]
 8000950:	4613      	mov	r3, r2
 8000952:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef ret;
  do {
	  ret = HAL_I2C_Mem_Write(sp_hi2c, OV7670_SLAVE_ADDR, regAddr, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8000954:	4b0a      	ldr	r3, [pc, #40]	; (8000980 <OV7670_Write+0x3c>)
 8000956:	6818      	ldr	r0, [r3, #0]
 8000958:	79fb      	ldrb	r3, [r7, #7]
 800095a:	b29a      	uxth	r2, r3
 800095c:	f04f 33ff 	mov.w	r3, #4294967295
 8000960:	9302      	str	r3, [sp, #8]
 8000962:	2301      	movs	r3, #1
 8000964:	9301      	str	r3, [sp, #4]
 8000966:	1dbb      	adds	r3, r7, #6
 8000968:	9300      	str	r3, [sp, #0]
 800096a:	2301      	movs	r3, #1
 800096c:	2142      	movs	r1, #66	; 0x42
 800096e:	f003 fae9 	bl	8003f44 <HAL_I2C_Mem_Write>
 8000972:	4603      	mov	r3, r0
 8000974:	73fb      	strb	r3, [r7, #15]

  } while (ret != HAL_OK && 0);

  return ret;
 8000976:	7bfb      	ldrb	r3, [r7, #15]
}
 8000978:	4618      	mov	r0, r3
 800097a:	3710      	adds	r7, #16
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	2000003c 	.word	0x2000003c

08000984 <OV7670_Read>:


HAL_StatusTypeDef OV7670_Read(uint8_t regAddr, uint8_t *data)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af02      	add	r7, sp, #8
 800098a:	4603      	mov	r3, r0
 800098c:	6039      	str	r1, [r7, #0]
 800098e:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef ret;
  do {
	  ret = HAL_I2C_Master_Transmit(sp_hi2c, OV7670_SLAVE_ADDR, &regAddr, 1, 100);
 8000990:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <OV7670_Read+0x48>)
 8000992:	6818      	ldr	r0, [r3, #0]
 8000994:	1dfa      	adds	r2, r7, #7
 8000996:	2364      	movs	r3, #100	; 0x64
 8000998:	9300      	str	r3, [sp, #0]
 800099a:	2301      	movs	r3, #1
 800099c:	2142      	movs	r1, #66	; 0x42
 800099e:	f002 ffad 	bl	80038fc <HAL_I2C_Master_Transmit>
 80009a2:	4603      	mov	r3, r0
 80009a4:	73fb      	strb	r3, [r7, #15]
	  ret |= HAL_I2C_Master_Receive(sp_hi2c, OV7670_SLAVE_ADDR, data, 1, 100);
 80009a6:	4b09      	ldr	r3, [pc, #36]	; (80009cc <OV7670_Read+0x48>)
 80009a8:	6818      	ldr	r0, [r3, #0]
 80009aa:	2364      	movs	r3, #100	; 0x64
 80009ac:	9300      	str	r3, [sp, #0]
 80009ae:	2301      	movs	r3, #1
 80009b0:	683a      	ldr	r2, [r7, #0]
 80009b2:	2142      	movs	r1, #66	; 0x42
 80009b4:	f003 f8a0 	bl	8003af8 <HAL_I2C_Master_Receive>
 80009b8:	4603      	mov	r3, r0
 80009ba:	461a      	mov	r2, r3
 80009bc:	7bfb      	ldrb	r3, [r7, #15]
 80009be:	4313      	orrs	r3, r2
 80009c0:	73fb      	strb	r3, [r7, #15]
  } while (ret != HAL_OK && 0);

  return ret;
 80009c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	3710      	adds	r7, #16
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	2000003c 	.word	0x2000003c

080009d0 <HAL_DCMI_FrameEventCallback>:
								/*** Callback Function Defines ***/
/*************************************************************************************************/


void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
	static int i = 0;

	if(i < 30)
 80009d8:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <HAL_DCMI_FrameEventCallback+0x44>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2b1d      	cmp	r3, #29
 80009de:	dc08      	bgt.n	80009f2 <HAL_DCMI_FrameEventCallback+0x22>
		fpsCounter[i] = HAL_GetTick();
 80009e0:	f000 fc0e 	bl	8001200 <HAL_GetTick>
 80009e4:	4602      	mov	r2, r0
 80009e6:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <HAL_DCMI_FrameEventCallback+0x44>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	b291      	uxth	r1, r2
 80009ec:	4a0a      	ldr	r2, [pc, #40]	; (8000a18 <HAL_DCMI_FrameEventCallback+0x48>)
 80009ee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	frameCounter++;
 80009f2:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <HAL_DCMI_FrameEventCallback+0x4c>)
 80009f4:	881b      	ldrh	r3, [r3, #0]
 80009f6:	b29b      	uxth	r3, r3
 80009f8:	3301      	adds	r3, #1
 80009fa:	b29a      	uxth	r2, r3
 80009fc:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <HAL_DCMI_FrameEventCallback+0x4c>)
 80009fe:	801a      	strh	r2, [r3, #0]

	i++;
 8000a00:	4b04      	ldr	r3, [pc, #16]	; (8000a14 <HAL_DCMI_FrameEventCallback+0x44>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	3301      	adds	r3, #1
 8000a06:	4a03      	ldr	r2, [pc, #12]	; (8000a14 <HAL_DCMI_FrameEventCallback+0x44>)
 8000a08:	6013      	str	r3, [r2, #0]

//	if(capture_mode==CONTINUOUS)
//		HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, img_address, img_width * img_height/2);
}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20000048 	.word	0x20000048
 8000a18:	200001bc 	.word	0x200001bc
 8000a1c:	2000017c 	.word	0x2000017c

08000a20 <HAL_DCMI_LineEventCallback>:


void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]

	if(frameCounter < 30)
 8000a28:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <HAL_DCMI_LineEventCallback+0x30>)
 8000a2a:	881b      	ldrh	r3, [r3, #0]
 8000a2c:	b29b      	uxth	r3, r3
 8000a2e:	2b1d      	cmp	r3, #29
 8000a30:	d80a      	bhi.n	8000a48 <HAL_DCMI_LineEventCallback+0x28>
		lineCounter[frameCounter] = HAL_GetTick();
 8000a32:	f000 fbe5 	bl	8001200 <HAL_GetTick>
 8000a36:	4601      	mov	r1, r0
 8000a38:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <HAL_DCMI_LineEventCallback+0x30>)
 8000a3a:	881b      	ldrh	r3, [r3, #0]
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	461a      	mov	r2, r3
 8000a40:	b289      	uxth	r1, r1
 8000a42:	4b04      	ldr	r3, [pc, #16]	; (8000a54 <HAL_DCMI_LineEventCallback+0x34>)
 8000a44:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

}
 8000a48:	bf00      	nop
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	2000017c 	.word	0x2000017c
 8000a54:	20000140 	.word	0x20000140

08000a58 <HAL_DCMI_VsyncEventCallback>:

void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]

	if(frameCounter < 30)
 8000a60:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <HAL_DCMI_VsyncEventCallback+0x30>)
 8000a62:	881b      	ldrh	r3, [r3, #0]
 8000a64:	b29b      	uxth	r3, r3
 8000a66:	2b1d      	cmp	r3, #29
 8000a68:	d80a      	bhi.n	8000a80 <HAL_DCMI_VsyncEventCallback+0x28>
		vCounter[frameCounter] = HAL_GetTick();
 8000a6a:	f000 fbc9 	bl	8001200 <HAL_GetTick>
 8000a6e:	4601      	mov	r1, r0
 8000a70:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <HAL_DCMI_VsyncEventCallback+0x30>)
 8000a72:	881b      	ldrh	r3, [r3, #0]
 8000a74:	b29b      	uxth	r3, r3
 8000a76:	461a      	mov	r2, r3
 8000a78:	b289      	uxth	r1, r1
 8000a7a:	4b04      	ldr	r3, [pc, #16]	; (8000a8c <HAL_DCMI_VsyncEventCallback+0x34>)
 8000a7c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
}
 8000a80:	bf00      	nop
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	2000017c 	.word	0x2000017c
 8000a8c:	20000180 	.word	0x20000180

08000a90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a94:	f000 fb4e 	bl	8001134 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a98:	f000 f828 	bl	8000aec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a9c:	f000 f90c 	bl	8000cb8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000aa0:	f000 f8ea 	bl	8000c78 <MX_DMA_Init>
  MX_I2C1_Init();
 8000aa4:	f000 f8ba 	bl	8000c1c <MX_I2C1_Init>
  MX_DCMI_Init();
 8000aa8:	f000 f890 	bl	8000bcc <MX_DCMI_Init>
  /* USER CODE BEGIN 2 */
  //  ILI9341_Init(ILI9341_WIDTH, ILI9341_HEIGHT);
  //  uint16_t* p_lcdData;
  //  p_lcdData = ILI9341_GetDrawAddress();

    OV7670_Init(&hdcmi, &hdma_dcmi, &hi2c1);
 8000aac:	4a0a      	ldr	r2, [pc, #40]	; (8000ad8 <main+0x48>)
 8000aae:	490b      	ldr	r1, [pc, #44]	; (8000adc <main+0x4c>)
 8000ab0:	480b      	ldr	r0, [pc, #44]	; (8000ae0 <main+0x50>)
 8000ab2:	f7ff fd07 	bl	80004c4 <OV7670_Init>

    OV7670_UpdateSettings(OV7670_settings);
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <main+0x54>)
 8000ab8:	6818      	ldr	r0, [r3, #0]
 8000aba:	f7ff ff25 	bl	8000908 <OV7670_UpdateSettings>

    OV7670_SetFrameRate(XCLK_DIV(2), PLL_x6);		// (8MHz / 2) * 6
 8000abe:	2180      	movs	r1, #128	; 0x80
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	f7ff fdc1 	bl	8000648 <OV7670_SetFrameRate>
    HAL_Delay(10);
 8000ac6:	200a      	movs	r0, #10
 8000ac8:	f000 fba6 	bl	8001218 <HAL_Delay>

    OV7670_Start(CONTINUOUS, image_data);
 8000acc:	4906      	ldr	r1, [pc, #24]	; (8000ae8 <main+0x58>)
 8000ace:	2000      	movs	r0, #0
 8000ad0:	f7ff fd76 	bl	80005c0 <OV7670_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <main+0x44>
 8000ad6:	bf00      	nop
 8000ad8:	200000ec 	.word	0x200000ec
 8000adc:	2000008c 	.word	0x2000008c
 8000ae0:	2000004c 	.word	0x2000004c
 8000ae4:	20000008 	.word	0x20000008
 8000ae8:	200001d0 	.word	0x200001d0

08000aec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b094      	sub	sp, #80	; 0x50
 8000af0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000af2:	f107 0320 	add.w	r3, r7, #32
 8000af6:	2230      	movs	r2, #48	; 0x30
 8000af8:	2100      	movs	r1, #0
 8000afa:	4618      	mov	r0, r3
 8000afc:	f004 fbcc 	bl	8005298 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b00:	f107 030c 	add.w	r3, r7, #12
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b10:	2300      	movs	r3, #0
 8000b12:	60bb      	str	r3, [r7, #8]
 8000b14:	4b2b      	ldr	r3, [pc, #172]	; (8000bc4 <SystemClock_Config+0xd8>)
 8000b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b18:	4a2a      	ldr	r2, [pc, #168]	; (8000bc4 <SystemClock_Config+0xd8>)
 8000b1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b20:	4b28      	ldr	r3, [pc, #160]	; (8000bc4 <SystemClock_Config+0xd8>)
 8000b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b28:	60bb      	str	r3, [r7, #8]
 8000b2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	4b25      	ldr	r3, [pc, #148]	; (8000bc8 <SystemClock_Config+0xdc>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a24      	ldr	r2, [pc, #144]	; (8000bc8 <SystemClock_Config+0xdc>)
 8000b36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b3a:	6013      	str	r3, [r2, #0]
 8000b3c:	4b22      	ldr	r3, [pc, #136]	; (8000bc8 <SystemClock_Config+0xdc>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b44:	607b      	str	r3, [r7, #4]
 8000b46:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b52:	2302      	movs	r3, #2
 8000b54:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b5c:	2308      	movs	r3, #8
 8000b5e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b60:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000b64:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b66:	2302      	movs	r3, #2
 8000b68:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b6a:	2307      	movs	r3, #7
 8000b6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b6e:	f107 0320 	add.w	r3, r7, #32
 8000b72:	4618      	mov	r0, r3
 8000b74:	f003 fea4 	bl	80048c0 <HAL_RCC_OscConfig>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000b7e:	f000 f905 	bl	8000d8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b82:	230f      	movs	r3, #15
 8000b84:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b86:	2302      	movs	r3, #2
 8000b88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b8e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b92:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b98:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b9a:	f107 030c 	add.w	r3, r7, #12
 8000b9e:	2105      	movs	r1, #5
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f004 f905 	bl	8004db0 <HAL_RCC_ClockConfig>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000bac:	f000 f8ee 	bl	8000d8c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	f004 f9e0 	bl	8004f7c <HAL_RCC_MCOConfig>
}
 8000bbc:	bf00      	nop
 8000bbe:	3750      	adds	r7, #80	; 0x50
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40007000 	.word	0x40007000

08000bcc <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000bd0:	4b10      	ldr	r3, [pc, #64]	; (8000c14 <MX_DCMI_Init+0x48>)
 8000bd2:	4a11      	ldr	r2, [pc, #68]	; (8000c18 <MX_DCMI_Init+0x4c>)
 8000bd4:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000bd6:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <MX_DCMI_Init+0x48>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000bdc:	4b0d      	ldr	r3, [pc, #52]	; (8000c14 <MX_DCMI_Init+0x48>)
 8000bde:	2220      	movs	r2, #32
 8000be0:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8000be2:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <MX_DCMI_Init+0x48>)
 8000be4:	2280      	movs	r2, #128	; 0x80
 8000be6:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000be8:	4b0a      	ldr	r3, [pc, #40]	; (8000c14 <MX_DCMI_Init+0x48>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000bee:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <MX_DCMI_Init+0x48>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000bf4:	4b07      	ldr	r3, [pc, #28]	; (8000c14 <MX_DCMI_Init+0x48>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000bfa:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <MX_DCMI_Init+0x48>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	621a      	str	r2, [r3, #32]
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000c00:	4804      	ldr	r0, [pc, #16]	; (8000c14 <MX_DCMI_Init+0x48>)
 8000c02:	f000 fe13 	bl	800182c <HAL_DCMI_Init>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_DCMI_Init+0x44>
  {
    Error_Handler();
 8000c0c:	f000 f8be 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000c10:	bf00      	nop
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	2000004c 	.word	0x2000004c
 8000c18:	50050000 	.word	0x50050000

08000c1c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c20:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <MX_I2C1_Init+0x50>)
 8000c22:	4a13      	ldr	r2, [pc, #76]	; (8000c70 <MX_I2C1_Init+0x54>)
 8000c24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c26:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <MX_I2C1_Init+0x50>)
 8000c28:	4a12      	ldr	r2, [pc, #72]	; (8000c74 <MX_I2C1_Init+0x58>)
 8000c2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c2c:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <MX_I2C1_Init+0x50>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c32:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <MX_I2C1_Init+0x50>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <MX_I2C1_Init+0x50>)
 8000c3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c3e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c40:	4b0a      	ldr	r3, [pc, #40]	; (8000c6c <MX_I2C1_Init+0x50>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c46:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <MX_I2C1_Init+0x50>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c4c:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <MX_I2C1_Init+0x50>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c52:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <MX_I2C1_Init+0x50>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c58:	4804      	ldr	r0, [pc, #16]	; (8000c6c <MX_I2C1_Init+0x50>)
 8000c5a:	f002 fd0b 	bl	8003674 <HAL_I2C_Init>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c64:	f000 f892 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	200000ec 	.word	0x200000ec
 8000c70:	40005400 	.word	0x40005400
 8000c74:	000186a0 	.word	0x000186a0

08000c78 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	607b      	str	r3, [r7, #4]
 8000c82:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <MX_DMA_Init+0x3c>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	4a0b      	ldr	r2, [pc, #44]	; (8000cb4 <MX_DMA_Init+0x3c>)
 8000c88:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8e:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <MX_DMA_Init+0x3c>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2105      	movs	r1, #5
 8000c9e:	2039      	movs	r0, #57	; 0x39
 8000ca0:	f000 fbb9 	bl	8001416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000ca4:	2039      	movs	r0, #57	; 0x39
 8000ca6:	f000 fbd2 	bl	800144e <HAL_NVIC_EnableIRQ>

}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40023800 	.word	0x40023800

08000cb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08a      	sub	sp, #40	; 0x28
 8000cbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
 8000cca:	60da      	str	r2, [r3, #12]
 8000ccc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	613b      	str	r3, [r7, #16]
 8000cd2:	4b2c      	ldr	r3, [pc, #176]	; (8000d84 <MX_GPIO_Init+0xcc>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	4a2b      	ldr	r2, [pc, #172]	; (8000d84 <MX_GPIO_Init+0xcc>)
 8000cd8:	f043 0310 	orr.w	r3, r3, #16
 8000cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cde:	4b29      	ldr	r3, [pc, #164]	; (8000d84 <MX_GPIO_Init+0xcc>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	f003 0310 	and.w	r3, r3, #16
 8000ce6:	613b      	str	r3, [r7, #16]
 8000ce8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	4b25      	ldr	r3, [pc, #148]	; (8000d84 <MX_GPIO_Init+0xcc>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a24      	ldr	r2, [pc, #144]	; (8000d84 <MX_GPIO_Init+0xcc>)
 8000cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b22      	ldr	r3, [pc, #136]	; (8000d84 <MX_GPIO_Init+0xcc>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	60bb      	str	r3, [r7, #8]
 8000d0a:	4b1e      	ldr	r3, [pc, #120]	; (8000d84 <MX_GPIO_Init+0xcc>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	4a1d      	ldr	r2, [pc, #116]	; (8000d84 <MX_GPIO_Init+0xcc>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	6313      	str	r3, [r2, #48]	; 0x30
 8000d16:	4b1b      	ldr	r3, [pc, #108]	; (8000d84 <MX_GPIO_Init+0xcc>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	60bb      	str	r3, [r7, #8]
 8000d20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	607b      	str	r3, [r7, #4]
 8000d26:	4b17      	ldr	r3, [pc, #92]	; (8000d84 <MX_GPIO_Init+0xcc>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	4a16      	ldr	r2, [pc, #88]	; (8000d84 <MX_GPIO_Init+0xcc>)
 8000d2c:	f043 0304 	orr.w	r3, r3, #4
 8000d30:	6313      	str	r3, [r2, #48]	; 0x30
 8000d32:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <MX_GPIO_Init+0xcc>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	f003 0304 	and.w	r3, r3, #4
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	603b      	str	r3, [r7, #0]
 8000d42:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <MX_GPIO_Init+0xcc>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	4a0f      	ldr	r2, [pc, #60]	; (8000d84 <MX_GPIO_Init+0xcc>)
 8000d48:	f043 0302 	orr.w	r3, r3, #2
 8000d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4e:	4b0d      	ldr	r3, [pc, #52]	; (8000d84 <MX_GPIO_Init+0xcc>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	f003 0302 	and.w	r3, r3, #2
 8000d56:	603b      	str	r3, [r7, #0]
 8000d58:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d60:	2302      	movs	r3, #2
 8000d62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	4619      	mov	r1, r3
 8000d76:	4804      	ldr	r0, [pc, #16]	; (8000d88 <MX_GPIO_Init+0xd0>)
 8000d78:	f002 fae0 	bl	800333c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d7c:	bf00      	nop
 8000d7e:	3728      	adds	r7, #40	; 0x28
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40023800 	.word	0x40023800
 8000d88:	40020000 	.word	0x40020000

08000d8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d90:	b672      	cpsid	i
}
 8000d92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <Error_Handler+0x8>
	...

08000d98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	607b      	str	r3, [r7, #4]
 8000da2:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <HAL_MspInit+0x4c>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da6:	4a0f      	ldr	r2, [pc, #60]	; (8000de4 <HAL_MspInit+0x4c>)
 8000da8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dac:	6453      	str	r3, [r2, #68]	; 0x44
 8000dae:	4b0d      	ldr	r3, [pc, #52]	; (8000de4 <HAL_MspInit+0x4c>)
 8000db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000db6:	607b      	str	r3, [r7, #4]
 8000db8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	603b      	str	r3, [r7, #0]
 8000dbe:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <HAL_MspInit+0x4c>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	4a08      	ldr	r2, [pc, #32]	; (8000de4 <HAL_MspInit+0x4c>)
 8000dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dca:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <HAL_MspInit+0x4c>)
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd2:	603b      	str	r3, [r7, #0]
 8000dd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	40023800 	.word	0x40023800

08000de8 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08c      	sub	sp, #48	; 0x30
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	f107 031c 	add.w	r3, r7, #28
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a62      	ldr	r2, [pc, #392]	; (8000f90 <HAL_DCMI_MspInit+0x1a8>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	f040 80be 	bne.w	8000f88 <HAL_DCMI_MspInit+0x1a0>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	61bb      	str	r3, [r7, #24]
 8000e10:	4b60      	ldr	r3, [pc, #384]	; (8000f94 <HAL_DCMI_MspInit+0x1ac>)
 8000e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e14:	4a5f      	ldr	r2, [pc, #380]	; (8000f94 <HAL_DCMI_MspInit+0x1ac>)
 8000e16:	f043 0301 	orr.w	r3, r3, #1
 8000e1a:	6353      	str	r3, [r2, #52]	; 0x34
 8000e1c:	4b5d      	ldr	r3, [pc, #372]	; (8000f94 <HAL_DCMI_MspInit+0x1ac>)
 8000e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e20:	f003 0301 	and.w	r3, r3, #1
 8000e24:	61bb      	str	r3, [r7, #24]
 8000e26:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]
 8000e2c:	4b59      	ldr	r3, [pc, #356]	; (8000f94 <HAL_DCMI_MspInit+0x1ac>)
 8000e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e30:	4a58      	ldr	r2, [pc, #352]	; (8000f94 <HAL_DCMI_MspInit+0x1ac>)
 8000e32:	f043 0310 	orr.w	r3, r3, #16
 8000e36:	6313      	str	r3, [r2, #48]	; 0x30
 8000e38:	4b56      	ldr	r3, [pc, #344]	; (8000f94 <HAL_DCMI_MspInit+0x1ac>)
 8000e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3c:	f003 0310 	and.w	r3, r3, #16
 8000e40:	617b      	str	r3, [r7, #20]
 8000e42:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e44:	2300      	movs	r3, #0
 8000e46:	613b      	str	r3, [r7, #16]
 8000e48:	4b52      	ldr	r3, [pc, #328]	; (8000f94 <HAL_DCMI_MspInit+0x1ac>)
 8000e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4c:	4a51      	ldr	r2, [pc, #324]	; (8000f94 <HAL_DCMI_MspInit+0x1ac>)
 8000e4e:	f043 0301 	orr.w	r3, r3, #1
 8000e52:	6313      	str	r3, [r2, #48]	; 0x30
 8000e54:	4b4f      	ldr	r3, [pc, #316]	; (8000f94 <HAL_DCMI_MspInit+0x1ac>)
 8000e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e58:	f003 0301 	and.w	r3, r3, #1
 8000e5c:	613b      	str	r3, [r7, #16]
 8000e5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e60:	2300      	movs	r3, #0
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	4b4b      	ldr	r3, [pc, #300]	; (8000f94 <HAL_DCMI_MspInit+0x1ac>)
 8000e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e68:	4a4a      	ldr	r2, [pc, #296]	; (8000f94 <HAL_DCMI_MspInit+0x1ac>)
 8000e6a:	f043 0304 	orr.w	r3, r3, #4
 8000e6e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e70:	4b48      	ldr	r3, [pc, #288]	; (8000f94 <HAL_DCMI_MspInit+0x1ac>)
 8000e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e74:	f003 0304 	and.w	r3, r3, #4
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	60bb      	str	r3, [r7, #8]
 8000e80:	4b44      	ldr	r3, [pc, #272]	; (8000f94 <HAL_DCMI_MspInit+0x1ac>)
 8000e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e84:	4a43      	ldr	r2, [pc, #268]	; (8000f94 <HAL_DCMI_MspInit+0x1ac>)
 8000e86:	f043 0302 	orr.w	r3, r3, #2
 8000e8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8c:	4b41      	ldr	r3, [pc, #260]	; (8000f94 <HAL_DCMI_MspInit+0x1ac>)
 8000e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e90:	f003 0302 	and.w	r3, r3, #2
 8000e94:	60bb      	str	r3, [r7, #8]
 8000e96:	68bb      	ldr	r3, [r7, #8]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PB6     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000e98:	2370      	movs	r3, #112	; 0x70
 8000e9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000ea8:	230d      	movs	r3, #13
 8000eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000eac:	f107 031c 	add.w	r3, r7, #28
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4839      	ldr	r0, [pc, #228]	; (8000f98 <HAL_DCMI_MspInit+0x1b0>)
 8000eb4:	f002 fa42 	bl	800333c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000eb8:	2350      	movs	r3, #80	; 0x50
 8000eba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000ec8:	230d      	movs	r3, #13
 8000eca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ecc:	f107 031c 	add.w	r3, r7, #28
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4832      	ldr	r0, [pc, #200]	; (8000f9c <HAL_DCMI_MspInit+0x1b4>)
 8000ed4:	f002 fa32 	bl	800333c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000ed8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000eea:	230d      	movs	r3, #13
 8000eec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eee:	f107 031c 	add.w	r3, r7, #28
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	482a      	ldr	r0, [pc, #168]	; (8000fa0 <HAL_DCMI_MspInit+0x1b8>)
 8000ef6:	f002 fa21 	bl	800333c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000efa:	23c0      	movs	r3, #192	; 0xc0
 8000efc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efe:	2302      	movs	r3, #2
 8000f00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f02:	2302      	movs	r3, #2
 8000f04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f06:	2303      	movs	r3, #3
 8000f08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000f0a:	230d      	movs	r3, #13
 8000f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f0e:	f107 031c 	add.w	r3, r7, #28
 8000f12:	4619      	mov	r1, r3
 8000f14:	4823      	ldr	r0, [pc, #140]	; (8000fa4 <HAL_DCMI_MspInit+0x1bc>)
 8000f16:	f002 fa11 	bl	800333c <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 8000f1a:	4b23      	ldr	r3, [pc, #140]	; (8000fa8 <HAL_DCMI_MspInit+0x1c0>)
 8000f1c:	4a23      	ldr	r2, [pc, #140]	; (8000fac <HAL_DCMI_MspInit+0x1c4>)
 8000f1e:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 8000f20:	4b21      	ldr	r3, [pc, #132]	; (8000fa8 <HAL_DCMI_MspInit+0x1c0>)
 8000f22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000f26:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f28:	4b1f      	ldr	r3, [pc, #124]	; (8000fa8 <HAL_DCMI_MspInit+0x1c0>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f2e:	4b1e      	ldr	r3, [pc, #120]	; (8000fa8 <HAL_DCMI_MspInit+0x1c0>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_DISABLE;
 8000f34:	4b1c      	ldr	r3, [pc, #112]	; (8000fa8 <HAL_DCMI_MspInit+0x1c0>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f3a:	4b1b      	ldr	r3, [pc, #108]	; (8000fa8 <HAL_DCMI_MspInit+0x1c0>)
 8000f3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f40:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f42:	4b19      	ldr	r3, [pc, #100]	; (8000fa8 <HAL_DCMI_MspInit+0x1c0>)
 8000f44:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f48:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 8000f4a:	4b17      	ldr	r3, [pc, #92]	; (8000fa8 <HAL_DCMI_MspInit+0x1c0>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 8000f50:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <HAL_DCMI_MspInit+0x1c0>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f56:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <HAL_DCMI_MspInit+0x1c0>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8000f5c:	4812      	ldr	r0, [pc, #72]	; (8000fa8 <HAL_DCMI_MspInit+0x1c0>)
 8000f5e:	f000 fcd3 	bl	8001908 <HAL_DMA_Init>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <HAL_DCMI_MspInit+0x184>
    {
      Error_Handler();
 8000f68:	f7ff ff10 	bl	8000d8c <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	4a0e      	ldr	r2, [pc, #56]	; (8000fa8 <HAL_DCMI_MspInit+0x1c0>)
 8000f70:	639a      	str	r2, [r3, #56]	; 0x38
 8000f72:	4a0d      	ldr	r2, [pc, #52]	; (8000fa8 <HAL_DCMI_MspInit+0x1c0>)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 5, 0);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2105      	movs	r1, #5
 8000f7c:	204e      	movs	r0, #78	; 0x4e
 8000f7e:	f000 fa4a 	bl	8001416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8000f82:	204e      	movs	r0, #78	; 0x4e
 8000f84:	f000 fa63 	bl	800144e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8000f88:	bf00      	nop
 8000f8a:	3730      	adds	r7, #48	; 0x30
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	50050000 	.word	0x50050000
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	40020000 	.word	0x40020000
 8000fa0:	40020800 	.word	0x40020800
 8000fa4:	40020400 	.word	0x40020400
 8000fa8:	2000008c 	.word	0x2000008c
 8000fac:	40026428 	.word	0x40026428

08000fb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	; 0x28
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a19      	ldr	r2, [pc, #100]	; (8001034 <HAL_I2C_MspInit+0x84>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d12c      	bne.n	800102c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	4b18      	ldr	r3, [pc, #96]	; (8001038 <HAL_I2C_MspInit+0x88>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	4a17      	ldr	r2, [pc, #92]	; (8001038 <HAL_I2C_MspInit+0x88>)
 8000fdc:	f043 0302 	orr.w	r3, r3, #2
 8000fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe2:	4b15      	ldr	r3, [pc, #84]	; (8001038 <HAL_I2C_MspInit+0x88>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	f003 0302 	and.w	r3, r3, #2
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000fee:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ff2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ff4:	2312      	movs	r3, #18
 8000ff6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001000:	2304      	movs	r3, #4
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	4619      	mov	r1, r3
 800100a:	480c      	ldr	r0, [pc, #48]	; (800103c <HAL_I2C_MspInit+0x8c>)
 800100c:	f002 f996 	bl	800333c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001010:	2300      	movs	r3, #0
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	4b08      	ldr	r3, [pc, #32]	; (8001038 <HAL_I2C_MspInit+0x88>)
 8001016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001018:	4a07      	ldr	r2, [pc, #28]	; (8001038 <HAL_I2C_MspInit+0x88>)
 800101a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800101e:	6413      	str	r3, [r2, #64]	; 0x40
 8001020:	4b05      	ldr	r3, [pc, #20]	; (8001038 <HAL_I2C_MspInit+0x88>)
 8001022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001024:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800102c:	bf00      	nop
 800102e:	3728      	adds	r7, #40	; 0x28
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40005400 	.word	0x40005400
 8001038:	40023800 	.word	0x40023800
 800103c:	40020400 	.word	0x40020400

08001040 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001044:	e7fe      	b.n	8001044 <NMI_Handler+0x4>

08001046 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800104a:	e7fe      	b.n	800104a <HardFault_Handler+0x4>

0800104c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001050:	e7fe      	b.n	8001050 <MemManage_Handler+0x4>

08001052 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001052:	b480      	push	{r7}
 8001054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001056:	e7fe      	b.n	8001056 <BusFault_Handler+0x4>

08001058 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800105c:	e7fe      	b.n	800105c <UsageFault_Handler+0x4>

0800105e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800105e:	b480      	push	{r7}
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800108c:	f000 f8a4 	bl	80011d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}

08001094 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8001098:	4802      	ldr	r0, [pc, #8]	; (80010a4 <DMA2_Stream1_IRQHandler+0x10>)
 800109a:	f000 fd5d 	bl	8001b58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	2000008c 	.word	0x2000008c

080010a8 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 80010ac:	4802      	ldr	r0, [pc, #8]	; (80010b8 <DCMI_IRQHandler+0x10>)
 80010ae:	f000 fa89 	bl	80015c4 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	2000004c 	.word	0x2000004c

080010bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010c0:	4b06      	ldr	r3, [pc, #24]	; (80010dc <SystemInit+0x20>)
 80010c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010c6:	4a05      	ldr	r2, [pc, #20]	; (80010dc <SystemInit+0x20>)
 80010c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80010e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001118 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010e4:	480d      	ldr	r0, [pc, #52]	; (800111c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010e6:	490e      	ldr	r1, [pc, #56]	; (8001120 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010e8:	4a0e      	ldr	r2, [pc, #56]	; (8001124 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010ec:	e002      	b.n	80010f4 <LoopCopyDataInit>

080010ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010f2:	3304      	adds	r3, #4

080010f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f8:	d3f9      	bcc.n	80010ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010fa:	4a0b      	ldr	r2, [pc, #44]	; (8001128 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010fc:	4c0b      	ldr	r4, [pc, #44]	; (800112c <LoopFillZerobss+0x26>)
  movs r3, #0
 80010fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001100:	e001      	b.n	8001106 <LoopFillZerobss>

08001102 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001102:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001104:	3204      	adds	r2, #4

08001106 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001106:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001108:	d3fb      	bcc.n	8001102 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800110a:	f7ff ffd7 	bl	80010bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800110e:	f004 f8cb 	bl	80052a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001112:	f7ff fcbd 	bl	8000a90 <main>
  bx  lr    
 8001116:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001118:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800111c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001120:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001124:	080053ac 	.word	0x080053ac
  ldr r2, =_sbss
 8001128:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 800112c:	20004cd4 	.word	0x20004cd4

08001130 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001130:	e7fe      	b.n	8001130 <ADC_IRQHandler>
	...

08001134 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001138:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <HAL_Init+0x40>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a0d      	ldr	r2, [pc, #52]	; (8001174 <HAL_Init+0x40>)
 800113e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001142:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001144:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <HAL_Init+0x40>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a0a      	ldr	r2, [pc, #40]	; (8001174 <HAL_Init+0x40>)
 800114a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800114e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001150:	4b08      	ldr	r3, [pc, #32]	; (8001174 <HAL_Init+0x40>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a07      	ldr	r2, [pc, #28]	; (8001174 <HAL_Init+0x40>)
 8001156:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800115a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800115c:	2003      	movs	r0, #3
 800115e:	f000 f94f 	bl	8001400 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001162:	200f      	movs	r0, #15
 8001164:	f000 f808 	bl	8001178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001168:	f7ff fe16 	bl	8000d98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40023c00 	.word	0x40023c00

08001178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001180:	4b12      	ldr	r3, [pc, #72]	; (80011cc <HAL_InitTick+0x54>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <HAL_InitTick+0x58>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	4619      	mov	r1, r3
 800118a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800118e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001192:	fbb2 f3f3 	udiv	r3, r2, r3
 8001196:	4618      	mov	r0, r3
 8001198:	f000 f967 	bl	800146a <HAL_SYSTICK_Config>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e00e      	b.n	80011c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2b0f      	cmp	r3, #15
 80011aa:	d80a      	bhi.n	80011c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011ac:	2200      	movs	r2, #0
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	f04f 30ff 	mov.w	r0, #4294967295
 80011b4:	f000 f92f 	bl	8001416 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011b8:	4a06      	ldr	r2, [pc, #24]	; (80011d4 <HAL_InitTick+0x5c>)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011be:	2300      	movs	r3, #0
 80011c0:	e000      	b.n	80011c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	2000000c 	.word	0x2000000c
 80011d0:	20000014 	.word	0x20000014
 80011d4:	20000010 	.word	0x20000010

080011d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <HAL_IncTick+0x20>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	461a      	mov	r2, r3
 80011e2:	4b06      	ldr	r3, [pc, #24]	; (80011fc <HAL_IncTick+0x24>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4413      	add	r3, r2
 80011e8:	4a04      	ldr	r2, [pc, #16]	; (80011fc <HAL_IncTick+0x24>)
 80011ea:	6013      	str	r3, [r2, #0]
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	20000014 	.word	0x20000014
 80011fc:	20004cd0 	.word	0x20004cd0

08001200 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  return uwTick;
 8001204:	4b03      	ldr	r3, [pc, #12]	; (8001214 <HAL_GetTick+0x14>)
 8001206:	681b      	ldr	r3, [r3, #0]
}
 8001208:	4618      	mov	r0, r3
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	20004cd0 	.word	0x20004cd0

08001218 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001220:	f7ff ffee 	bl	8001200 <HAL_GetTick>
 8001224:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001230:	d005      	beq.n	800123e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001232:	4b0a      	ldr	r3, [pc, #40]	; (800125c <HAL_Delay+0x44>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	461a      	mov	r2, r3
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	4413      	add	r3, r2
 800123c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800123e:	bf00      	nop
 8001240:	f7ff ffde 	bl	8001200 <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	68fa      	ldr	r2, [r7, #12]
 800124c:	429a      	cmp	r2, r3
 800124e:	d8f7      	bhi.n	8001240 <HAL_Delay+0x28>
  {
  }
}
 8001250:	bf00      	nop
 8001252:	bf00      	nop
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20000014 	.word	0x20000014

08001260 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f003 0307 	and.w	r3, r3, #7
 800126e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001270:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001276:	68ba      	ldr	r2, [r7, #8]
 8001278:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800127c:	4013      	ands	r3, r2
 800127e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001288:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800128c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001290:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001292:	4a04      	ldr	r2, [pc, #16]	; (80012a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	60d3      	str	r3, [r2, #12]
}
 8001298:	bf00      	nop
 800129a:	3714      	adds	r7, #20
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	e000ed00 	.word	0xe000ed00

080012a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012ac:	4b04      	ldr	r3, [pc, #16]	; (80012c0 <__NVIC_GetPriorityGrouping+0x18>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	0a1b      	lsrs	r3, r3, #8
 80012b2:	f003 0307 	and.w	r3, r3, #7
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	db0b      	blt.n	80012ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	f003 021f 	and.w	r2, r3, #31
 80012dc:	4907      	ldr	r1, [pc, #28]	; (80012fc <__NVIC_EnableIRQ+0x38>)
 80012de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e2:	095b      	lsrs	r3, r3, #5
 80012e4:	2001      	movs	r0, #1
 80012e6:	fa00 f202 	lsl.w	r2, r0, r2
 80012ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	e000e100 	.word	0xe000e100

08001300 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	6039      	str	r1, [r7, #0]
 800130a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800130c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001310:	2b00      	cmp	r3, #0
 8001312:	db0a      	blt.n	800132a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	b2da      	uxtb	r2, r3
 8001318:	490c      	ldr	r1, [pc, #48]	; (800134c <__NVIC_SetPriority+0x4c>)
 800131a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131e:	0112      	lsls	r2, r2, #4
 8001320:	b2d2      	uxtb	r2, r2
 8001322:	440b      	add	r3, r1
 8001324:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001328:	e00a      	b.n	8001340 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	b2da      	uxtb	r2, r3
 800132e:	4908      	ldr	r1, [pc, #32]	; (8001350 <__NVIC_SetPriority+0x50>)
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	f003 030f 	and.w	r3, r3, #15
 8001336:	3b04      	subs	r3, #4
 8001338:	0112      	lsls	r2, r2, #4
 800133a:	b2d2      	uxtb	r2, r2
 800133c:	440b      	add	r3, r1
 800133e:	761a      	strb	r2, [r3, #24]
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	e000e100 	.word	0xe000e100
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001354:	b480      	push	{r7}
 8001356:	b089      	sub	sp, #36	; 0x24
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f003 0307 	and.w	r3, r3, #7
 8001366:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	f1c3 0307 	rsb	r3, r3, #7
 800136e:	2b04      	cmp	r3, #4
 8001370:	bf28      	it	cs
 8001372:	2304      	movcs	r3, #4
 8001374:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	3304      	adds	r3, #4
 800137a:	2b06      	cmp	r3, #6
 800137c:	d902      	bls.n	8001384 <NVIC_EncodePriority+0x30>
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	3b03      	subs	r3, #3
 8001382:	e000      	b.n	8001386 <NVIC_EncodePriority+0x32>
 8001384:	2300      	movs	r3, #0
 8001386:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001388:	f04f 32ff 	mov.w	r2, #4294967295
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43da      	mvns	r2, r3
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	401a      	ands	r2, r3
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800139c:	f04f 31ff 	mov.w	r1, #4294967295
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	fa01 f303 	lsl.w	r3, r1, r3
 80013a6:	43d9      	mvns	r1, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ac:	4313      	orrs	r3, r2
         );
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3724      	adds	r7, #36	; 0x24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
	...

080013bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013cc:	d301      	bcc.n	80013d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ce:	2301      	movs	r3, #1
 80013d0:	e00f      	b.n	80013f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013d2:	4a0a      	ldr	r2, [pc, #40]	; (80013fc <SysTick_Config+0x40>)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3b01      	subs	r3, #1
 80013d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013da:	210f      	movs	r1, #15
 80013dc:	f04f 30ff 	mov.w	r0, #4294967295
 80013e0:	f7ff ff8e 	bl	8001300 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013e4:	4b05      	ldr	r3, [pc, #20]	; (80013fc <SysTick_Config+0x40>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ea:	4b04      	ldr	r3, [pc, #16]	; (80013fc <SysTick_Config+0x40>)
 80013ec:	2207      	movs	r2, #7
 80013ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	e000e010 	.word	0xe000e010

08001400 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff ff29 	bl	8001260 <__NVIC_SetPriorityGrouping>
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001416:	b580      	push	{r7, lr}
 8001418:	b086      	sub	sp, #24
 800141a:	af00      	add	r7, sp, #0
 800141c:	4603      	mov	r3, r0
 800141e:	60b9      	str	r1, [r7, #8]
 8001420:	607a      	str	r2, [r7, #4]
 8001422:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001428:	f7ff ff3e 	bl	80012a8 <__NVIC_GetPriorityGrouping>
 800142c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	68b9      	ldr	r1, [r7, #8]
 8001432:	6978      	ldr	r0, [r7, #20]
 8001434:	f7ff ff8e 	bl	8001354 <NVIC_EncodePriority>
 8001438:	4602      	mov	r2, r0
 800143a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800143e:	4611      	mov	r1, r2
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff ff5d 	bl	8001300 <__NVIC_SetPriority>
}
 8001446:	bf00      	nop
 8001448:	3718      	adds	r7, #24
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b082      	sub	sp, #8
 8001452:	af00      	add	r7, sp, #0
 8001454:	4603      	mov	r3, r0
 8001456:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff ff31 	bl	80012c4 <__NVIC_EnableIRQ>
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b082      	sub	sp, #8
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f7ff ffa2 	bl	80013bc <SysTick_Config>
 8001478:	4603      	mov	r3, r0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
	...

08001484 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b088      	sub	sp, #32
 8001488:	af02      	add	r7, sp, #8
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
 8001490:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0U;
 8001492:	2300      	movs	r3, #0
 8001494:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800149c:	2b01      	cmp	r3, #1
 800149e:	d101      	bne.n	80014a4 <HAL_DCMI_Start_DMA+0x20>
 80014a0:	2302      	movs	r3, #2
 80014a2:	e086      	b.n	80015b2 <HAL_DCMI_Start_DMA+0x12e>
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2201      	movs	r2, #1
 80014a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	2202      	movs	r2, #2
 80014b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  
  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80014c2:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f022 0202 	bic.w	r2, r2, #2
 80014d2:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	6819      	ldr	r1, [r3, #0]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	68ba      	ldr	r2, [r7, #8]
 80014e0:	430a      	orrs	r2, r1
 80014e2:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014e8:	4a34      	ldr	r2, [pc, #208]	; (80015bc <HAL_DCMI_Start_DMA+0x138>)
 80014ea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014f0:	4a33      	ldr	r2, [pc, #204]	; (80015c0 <HAL_DCMI_Start_DMA+0x13c>)
 80014f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014f8:	2200      	movs	r2, #0
 80014fa:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Reset transfer counters value */ 
  hdcmi->XferCount = 0U;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	2200      	movs	r2, #0
 8001500:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi->XferTransferNumber = 0U;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	2200      	movs	r2, #0
 8001506:	631a      	str	r2, [r3, #48]	; 0x30

  if(Length <= 0xFFFFU)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800150e:	d20a      	bcs.n	8001526 <HAL_DCMI_Start_DMA+0xa2>
  {
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	3328      	adds	r3, #40	; 0x28
 800151a:	4619      	mov	r1, r3
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	f000 faa0 	bl	8001a64 <HAL_DMA_Start_IT>
 8001524:	e038      	b.n	8001598 <HAL_DCMI_Start_DMA+0x114>
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800152a:	4a24      	ldr	r2, [pc, #144]	; (80015bc <HAL_DCMI_Start_DMA+0x138>)
 800152c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1U;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2201      	movs	r2, #1
 8001532:	629a      	str	r2, [r3, #40]	; 0x28
    hdcmi->XferSize = Length;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	683a      	ldr	r2, [r7, #0]
 8001538:	62da      	str	r2, [r3, #44]	; 0x2c
    hdcmi->pBuffPtr = pData;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Get the number of buffer */
    while(hdcmi->XferSize > 0xFFFFU)
 8001540:	e009      	b.n	8001556 <HAL_DCMI_Start_DMA+0xd2>
    {
      hdcmi->XferSize = (hdcmi->XferSize/2U);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001546:	085a      	lsrs	r2, r3, #1
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	62da      	str	r2, [r3, #44]	; 0x2c
      hdcmi->XferCount = hdcmi->XferCount*2U;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001550:	005a      	lsls	r2, r3, #1
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	629a      	str	r2, [r3, #40]	; 0x28
    while(hdcmi->XferSize > 0xFFFFU)
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800155a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800155e:	d2f0      	bcs.n	8001542 <HAL_DCMI_Start_DMA+0xbe>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001564:	1e9a      	subs	r2, r3, #2
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	629a      	str	r2, [r3, #40]	; 0x28
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	631a      	str	r2, [r3, #48]	; 0x30

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U*hdcmi->XferSize));
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	4413      	add	r3, r2
 800157c:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	3328      	adds	r3, #40	; 0x28
 8001588:	4619      	mov	r1, r3
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158e:	9300      	str	r3, [sp, #0]
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	f000 fd4a 	bl	800202c <HAL_DMAEx_MultiBufferStart_IT>
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f042 0201 	orr.w	r2, r2, #1
 80015a6:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	2200      	movs	r2, #0
 80015ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Return function status */
  return HAL_OK;
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3718      	adds	r7, #24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	080016d5 	.word	0x080016d5
 80015c0:	080017ff 	.word	0x080017ff

080015c4 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f003 0304 	and.w	r3, r3, #4
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d016      	beq.n	800160c <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2204      	movs	r2, #4
 80015e4:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015ea:	f043 0202 	orr.w	r2, r3, #2
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2204      	movs	r2, #4
 80015f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015fe:	4a2f      	ldr	r2, [pc, #188]	; (80016bc <HAL_DCMI_IRQHandler+0xf8>)
 8001600:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001606:	4618      	mov	r0, r3
 8001608:	f000 fa84 	bl	8001b14 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d016      	beq.n	8001644 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2202      	movs	r2, #2
 800161c:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001622:	f043 0201 	orr.w	r2, r3, #1
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2204      	movs	r2, #4
 800162e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001636:	4a21      	ldr	r2, [pc, #132]	; (80016bc <HAL_DCMI_IRQHandler+0xf8>)
 8001638:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800163e:	4618      	mov	r0, r3
 8001640:	f000 fa68 	bl	8001b14 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f003 0310 	and.w	r3, r3, #16
 800164a:	2b00      	cmp	r3, #0
 800164c:	d006      	beq.n	800165c <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2210      	movs	r2, #16
 8001654:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else  
    HAL_DCMI_LineEventCallback(hdcmi);
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f7ff f9e2 	bl	8000a20 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */     
  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f003 0308 	and.w	r3, r3, #8
 8001662:	2b00      	cmp	r3, #0
 8001664:	d006      	beq.n	8001674 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2208      	movs	r2, #8
 800166c:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else  
    HAL_DCMI_VsyncEventCallback(hdcmi);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f7ff f9f2 	bl	8000a58 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */ 
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	2b00      	cmp	r3, #0
 800167c:	d019      	beq.n	80016b2 <HAL_DCMI_IRQHandler+0xee>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0302 	and.w	r3, r3, #2
 8001688:	2b02      	cmp	r3, #2
 800168a:	d107      	bne.n	800169c <HAL_DCMI_IRQHandler+0xd8>
    { 
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	68da      	ldr	r2, [r3, #12]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f022 021e 	bic.w	r2, r2, #30
 800169a:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	68da      	ldr	r2, [r3, #12]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f022 0201 	bic.w	r2, r2, #1
 80016aa:	60da      	str	r2, [r3, #12]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else  
    HAL_DCMI_FrameEventCallback(hdcmi);
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f7ff f98f 	bl	80009d0 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */      
  }
}
 80016b2:	bf00      	nop
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	080017ff 	.word	0x080017ff

080016c0 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 80016c8:	bf00      	nop
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80016dc:	2300      	movs	r3, #0
 80016de:	60fb      	str	r3, [r7, #12]
 
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016e4:	60bb      	str	r3, [r7, #8]
  
  if(hdcmi->XferCount != 0U)
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d043      	beq.n	8001776 <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016fa:	60fb      	str	r3, [r7, #12]
    if(((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001700:	f003 0301 	and.w	r3, r3, #1
 8001704:	2b00      	cmp	r3, #0
 8001706:	d118      	bne.n	800173a <DCMI_DMAXferCplt+0x66>
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d015      	beq.n	800173a <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY0);
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001720:	00da      	lsls	r2, r3, #3
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	4413      	add	r3, r2
 8001726:	2200      	movs	r2, #0
 8001728:	4619      	mov	r1, r3
 800172a:	f001 fdc7 	bl	80032bc <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001732:	1e5a      	subs	r2, r3, #1
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	629a      	str	r2, [r3, #40]	; 0x28
 8001738:	e044      	b.n	80017c4 <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d13c      	bne.n	80017c4 <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	691b      	ldr	r3, [r3, #16]
 8001752:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY1);
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175c:	00da      	lsls	r2, r3, #3
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	4413      	add	r3, r2
 8001762:	2201      	movs	r2, #1
 8001764:	4619      	mov	r1, r3
 8001766:	f001 fda9 	bl	80032bc <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176e:	1e5a      	subs	r2, r3, #1
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	629a      	str	r2, [r3, #40]	; 0x28
 8001774:	e026      	b.n	80017c4 <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0U)
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d006      	beq.n	8001794 <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	68ba      	ldr	r2, [r7, #8]
 800178e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001790:	60da      	str	r2, [r3, #12]
 8001792:	e017      	b.n	80017c4 <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d10f      	bne.n	80017c4 <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017a8:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4U*hdcmi->XferSize));
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ae:	0099      	lsls	r1, r3, #2
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	440a      	add	r2, r1
 80017ba:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	629a      	str	r2, [r3, #40]	; 0x28
  }
  
  /* Check if the frame is transferred */
  if(hdcmi->XferCount == hdcmi->XferTransferNumber)
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d112      	bne.n	80017f6 <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	68da      	ldr	r2, [r3, #12]
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f042 0201 	orr.w	r2, r2, #1
 80017de:	60da      	str	r2, [r3, #12]
    
    /* When snapshot mode, set dcmi state to ready */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d103      	bne.n	80017f6 <DCMI_DMAXferCplt+0x122>
    {  
      hdcmi->State= HAL_DCMI_STATE_READY;
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	2201      	movs	r2, #1
 80017f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }
}
 80017f6:	bf00      	nop
 80017f8:	3710      	adds	r7, #16
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b084      	sub	sp, #16
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800180a:	60fb      	str	r3, [r7, #12]
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001812:	2b02      	cmp	r3, #2
 8001814:	d003      	beq.n	800181e <DCMI_DMAError+0x20>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2201      	movs	r2, #1
 800181a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
  HAL_DCMI_ErrorCallback(hdcmi);
 800181e:	68f8      	ldr	r0, [r7, #12]
 8001820:	f7ff ff4e 	bl	80016c0 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */   

}
 8001824:	bf00      	nop
 8001826:	3710      	adds	r7, #16
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d101      	bne.n	800183e <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e05f      	b.n	80018fe <HAL_DCMI_Init+0xd2>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	d109      	bne.n	800185e <HAL_DCMI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f7ff fac8 	bl	8000de8 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
    HAL_DCMI_MspInit(hdcmi);
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f7ff fac5 	bl	8000de8 <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2202      	movs	r2, #2
 8001862:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	6812      	ldr	r2, [r2, #0]
 8001870:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001874:	f023 0308 	bic.w	r3, r3, #8
 8001878:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	6819      	ldr	r1, [r3, #0]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685a      	ldr	r2, [r3, #4]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	695b      	ldr	r3, [r3, #20]
 8001888:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800188e:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	691b      	ldr	r3, [r3, #16]
 8001894:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800189a:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80018a6:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	430a      	orrs	r2, r1
 80018ae:	601a      	str	r2, [r3, #0]
                                     | hdcmi->Init.ByteSelectMode |\
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
                                     hdcmi->Init.LineSelectStart
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	2b10      	cmp	r3, #16
 80018b6:	d112      	bne.n	80018de <HAL_DCMI_Init+0xb2>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	7f1b      	ldrb	r3, [r3, #28]
 80018bc:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	7f5b      	ldrb	r3, [r3, #29]
 80018c2:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80018c4:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	7f9b      	ldrb	r3, [r3, #30]
 80018ca:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 80018cc:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	7fdb      	ldrb	r3, [r3, #31]
 80018d4:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 80018da:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80018dc:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	68da      	ldr	r2, [r3, #12]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f042 021e 	orr.w	r2, r2, #30
 80018ec:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2201      	movs	r2, #1
 80018f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  return HAL_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
	...

08001908 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001914:	f7ff fc74 	bl	8001200 <HAL_GetTick>
 8001918:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d101      	bne.n	8001924 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e099      	b.n	8001a58 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2202      	movs	r2, #2
 8001928:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f022 0201 	bic.w	r2, r2, #1
 8001942:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001944:	e00f      	b.n	8001966 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001946:	f7ff fc5b 	bl	8001200 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b05      	cmp	r3, #5
 8001952:	d908      	bls.n	8001966 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2220      	movs	r2, #32
 8001958:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2203      	movs	r2, #3
 800195e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e078      	b.n	8001a58 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0301 	and.w	r3, r3, #1
 8001970:	2b00      	cmp	r3, #0
 8001972:	d1e8      	bne.n	8001946 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800197c:	697a      	ldr	r2, [r7, #20]
 800197e:	4b38      	ldr	r3, [pc, #224]	; (8001a60 <HAL_DMA_Init+0x158>)
 8001980:	4013      	ands	r3, r2
 8001982:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685a      	ldr	r2, [r3, #4]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001992:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	691b      	ldr	r3, [r3, #16]
 8001998:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800199e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a1b      	ldr	r3, [r3, #32]
 80019b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019b2:	697a      	ldr	r2, [r7, #20]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019bc:	2b04      	cmp	r3, #4
 80019be:	d107      	bne.n	80019d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c8:	4313      	orrs	r3, r2
 80019ca:	697a      	ldr	r2, [r7, #20]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	697a      	ldr	r2, [r7, #20]
 80019d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	f023 0307 	bic.w	r3, r3, #7
 80019e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ec:	697a      	ldr	r2, [r7, #20]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f6:	2b04      	cmp	r3, #4
 80019f8:	d117      	bne.n	8001a2a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fe:	697a      	ldr	r2, [r7, #20]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d00e      	beq.n	8001a2a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f000 fa91 	bl	8001f34 <DMA_CheckFifoParam>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d008      	beq.n	8001a2a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2240      	movs	r2, #64	; 0x40
 8001a1c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2201      	movs	r2, #1
 8001a22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001a26:	2301      	movs	r3, #1
 8001a28:	e016      	b.n	8001a58 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	697a      	ldr	r2, [r7, #20]
 8001a30:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f000 fa48 	bl	8001ec8 <DMA_CalcBaseAndBitshift>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a40:	223f      	movs	r2, #63	; 0x3f
 8001a42:	409a      	lsls	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2201      	movs	r2, #1
 8001a52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3718      	adds	r7, #24
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	f010803f 	.word	0xf010803f

08001a64 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
 8001a70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a72:	2300      	movs	r3, #0
 8001a74:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a7a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d101      	bne.n	8001a8a <HAL_DMA_Start_IT+0x26>
 8001a86:	2302      	movs	r3, #2
 8001a88:	e040      	b.n	8001b0c <HAL_DMA_Start_IT+0xa8>
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d12f      	bne.n	8001afe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2202      	movs	r2, #2
 8001aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	68b9      	ldr	r1, [r7, #8]
 8001ab2:	68f8      	ldr	r0, [r7, #12]
 8001ab4:	f000 f9da 	bl	8001e6c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001abc:	223f      	movs	r2, #63	; 0x3f
 8001abe:	409a      	lsls	r2, r3
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f042 0216 	orr.w	r2, r2, #22
 8001ad2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d007      	beq.n	8001aec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f042 0208 	orr.w	r2, r2, #8
 8001aea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f042 0201 	orr.w	r2, r2, #1
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	e005      	b.n	8001b0a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b06:	2302      	movs	r3, #2
 8001b08:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3718      	adds	r7, #24
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d004      	beq.n	8001b32 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2280      	movs	r2, #128	; 0x80
 8001b2c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e00c      	b.n	8001b4c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2205      	movs	r2, #5
 8001b36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f022 0201 	bic.w	r2, r2, #1
 8001b48:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001b60:	2300      	movs	r3, #0
 8001b62:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001b64:	4b8e      	ldr	r3, [pc, #568]	; (8001da0 <HAL_DMA_IRQHandler+0x248>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a8e      	ldr	r2, [pc, #568]	; (8001da4 <HAL_DMA_IRQHandler+0x24c>)
 8001b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6e:	0a9b      	lsrs	r3, r3, #10
 8001b70:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b76:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b82:	2208      	movs	r2, #8
 8001b84:	409a      	lsls	r2, r3
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d01a      	beq.n	8001bc4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0304 	and.w	r3, r3, #4
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d013      	beq.n	8001bc4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f022 0204 	bic.w	r2, r2, #4
 8001baa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bb0:	2208      	movs	r2, #8
 8001bb2:	409a      	lsls	r2, r3
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bbc:	f043 0201 	orr.w	r2, r3, #1
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc8:	2201      	movs	r2, #1
 8001bca:	409a      	lsls	r2, r3
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d012      	beq.n	8001bfa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	695b      	ldr	r3, [r3, #20]
 8001bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d00b      	beq.n	8001bfa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001be6:	2201      	movs	r2, #1
 8001be8:	409a      	lsls	r2, r3
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bf2:	f043 0202 	orr.w	r2, r3, #2
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bfe:	2204      	movs	r2, #4
 8001c00:	409a      	lsls	r2, r3
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	4013      	ands	r3, r2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d012      	beq.n	8001c30 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d00b      	beq.n	8001c30 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c1c:	2204      	movs	r2, #4
 8001c1e:	409a      	lsls	r2, r3
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c28:	f043 0204 	orr.w	r2, r3, #4
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c34:	2210      	movs	r2, #16
 8001c36:	409a      	lsls	r2, r3
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d043      	beq.n	8001cc8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0308 	and.w	r3, r3, #8
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d03c      	beq.n	8001cc8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c52:	2210      	movs	r2, #16
 8001c54:	409a      	lsls	r2, r3
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d018      	beq.n	8001c9a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d108      	bne.n	8001c88 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d024      	beq.n	8001cc8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	4798      	blx	r3
 8001c86:	e01f      	b.n	8001cc8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d01b      	beq.n	8001cc8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	4798      	blx	r3
 8001c98:	e016      	b.n	8001cc8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d107      	bne.n	8001cb8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f022 0208 	bic.w	r2, r2, #8
 8001cb6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d003      	beq.n	8001cc8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ccc:	2220      	movs	r2, #32
 8001cce:	409a      	lsls	r2, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f000 808f 	beq.w	8001df8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0310 	and.w	r3, r3, #16
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	f000 8087 	beq.w	8001df8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cee:	2220      	movs	r2, #32
 8001cf0:	409a      	lsls	r2, r3
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b05      	cmp	r3, #5
 8001d00:	d136      	bne.n	8001d70 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f022 0216 	bic.w	r2, r2, #22
 8001d10:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	695a      	ldr	r2, [r3, #20]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d20:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d103      	bne.n	8001d32 <HAL_DMA_IRQHandler+0x1da>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d007      	beq.n	8001d42 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f022 0208 	bic.w	r2, r2, #8
 8001d40:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d46:	223f      	movs	r2, #63	; 0x3f
 8001d48:	409a      	lsls	r2, r3
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2201      	movs	r2, #1
 8001d52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d07e      	beq.n	8001e64 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	4798      	blx	r3
        }
        return;
 8001d6e:	e079      	b.n	8001e64 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d01d      	beq.n	8001dba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d10d      	bne.n	8001da8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d031      	beq.n	8001df8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	4798      	blx	r3
 8001d9c:	e02c      	b.n	8001df8 <HAL_DMA_IRQHandler+0x2a0>
 8001d9e:	bf00      	nop
 8001da0:	2000000c 	.word	0x2000000c
 8001da4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d023      	beq.n	8001df8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	4798      	blx	r3
 8001db8:	e01e      	b.n	8001df8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d10f      	bne.n	8001de8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f022 0210 	bic.w	r2, r2, #16
 8001dd6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d003      	beq.n	8001df8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d032      	beq.n	8001e66 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d022      	beq.n	8001e52 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2205      	movs	r2, #5
 8001e10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f022 0201 	bic.w	r2, r2, #1
 8001e22:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	3301      	adds	r3, #1
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	697a      	ldr	r2, [r7, #20]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d307      	bcc.n	8001e40 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1f2      	bne.n	8001e24 <HAL_DMA_IRQHandler+0x2cc>
 8001e3e:	e000      	b.n	8001e42 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001e40:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2201      	movs	r2, #1
 8001e46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d005      	beq.n	8001e66 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	4798      	blx	r3
 8001e62:	e000      	b.n	8001e66 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001e64:	bf00      	nop
    }
  }
}
 8001e66:	3718      	adds	r7, #24
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
 8001e78:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e88:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	2b40      	cmp	r3, #64	; 0x40
 8001e98:	d108      	bne.n	8001eac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68ba      	ldr	r2, [r7, #8]
 8001ea8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001eaa:	e007      	b.n	8001ebc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	68ba      	ldr	r2, [r7, #8]
 8001eb2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	60da      	str	r2, [r3, #12]
}
 8001ebc:	bf00      	nop
 8001ebe:	3714      	adds	r7, #20
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	3b10      	subs	r3, #16
 8001ed8:	4a14      	ldr	r2, [pc, #80]	; (8001f2c <DMA_CalcBaseAndBitshift+0x64>)
 8001eda:	fba2 2303 	umull	r2, r3, r2, r3
 8001ede:	091b      	lsrs	r3, r3, #4
 8001ee0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ee2:	4a13      	ldr	r2, [pc, #76]	; (8001f30 <DMA_CalcBaseAndBitshift+0x68>)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	461a      	mov	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2b03      	cmp	r3, #3
 8001ef4:	d909      	bls.n	8001f0a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001efe:	f023 0303 	bic.w	r3, r3, #3
 8001f02:	1d1a      	adds	r2, r3, #4
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	659a      	str	r2, [r3, #88]	; 0x58
 8001f08:	e007      	b.n	8001f1a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f12:	f023 0303 	bic.w	r3, r3, #3
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3714      	adds	r7, #20
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	aaaaaaab 	.word	0xaaaaaaab
 8001f30:	08005394 	.word	0x08005394

08001f34 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f44:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d11f      	bne.n	8001f8e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	2b03      	cmp	r3, #3
 8001f52:	d856      	bhi.n	8002002 <DMA_CheckFifoParam+0xce>
 8001f54:	a201      	add	r2, pc, #4	; (adr r2, 8001f5c <DMA_CheckFifoParam+0x28>)
 8001f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f5a:	bf00      	nop
 8001f5c:	08001f6d 	.word	0x08001f6d
 8001f60:	08001f7f 	.word	0x08001f7f
 8001f64:	08001f6d 	.word	0x08001f6d
 8001f68:	08002003 	.word	0x08002003
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d046      	beq.n	8002006 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f7c:	e043      	b.n	8002006 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f82:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f86:	d140      	bne.n	800200a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f8c:	e03d      	b.n	800200a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f96:	d121      	bne.n	8001fdc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	2b03      	cmp	r3, #3
 8001f9c:	d837      	bhi.n	800200e <DMA_CheckFifoParam+0xda>
 8001f9e:	a201      	add	r2, pc, #4	; (adr r2, 8001fa4 <DMA_CheckFifoParam+0x70>)
 8001fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa4:	08001fb5 	.word	0x08001fb5
 8001fa8:	08001fbb 	.word	0x08001fbb
 8001fac:	08001fb5 	.word	0x08001fb5
 8001fb0:	08001fcd 	.word	0x08001fcd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	73fb      	strb	r3, [r7, #15]
      break;
 8001fb8:	e030      	b.n	800201c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d025      	beq.n	8002012 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fca:	e022      	b.n	8002012 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001fd4:	d11f      	bne.n	8002016 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001fda:	e01c      	b.n	8002016 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d903      	bls.n	8001fea <DMA_CheckFifoParam+0xb6>
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	2b03      	cmp	r3, #3
 8001fe6:	d003      	beq.n	8001ff0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001fe8:	e018      	b.n	800201c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	73fb      	strb	r3, [r7, #15]
      break;
 8001fee:	e015      	b.n	800201c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d00e      	beq.n	800201a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	73fb      	strb	r3, [r7, #15]
      break;
 8002000:	e00b      	b.n	800201a <DMA_CheckFifoParam+0xe6>
      break;
 8002002:	bf00      	nop
 8002004:	e00a      	b.n	800201c <DMA_CheckFifoParam+0xe8>
      break;
 8002006:	bf00      	nop
 8002008:	e008      	b.n	800201c <DMA_CheckFifoParam+0xe8>
      break;
 800200a:	bf00      	nop
 800200c:	e006      	b.n	800201c <DMA_CheckFifoParam+0xe8>
      break;
 800200e:	bf00      	nop
 8002010:	e004      	b.n	800201c <DMA_CheckFifoParam+0xe8>
      break;
 8002012:	bf00      	nop
 8002014:	e002      	b.n	800201c <DMA_CheckFifoParam+0xe8>
      break;   
 8002016:	bf00      	nop
 8002018:	e000      	b.n	800201c <DMA_CheckFifoParam+0xe8>
      break;
 800201a:	bf00      	nop
    }
  } 
  
  return status; 
 800201c:	7bfb      	ldrb	r3, [r7, #15]
}
 800201e:	4618      	mov	r0, r3
 8002020:	3714      	adds	r7, #20
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop

0800202c <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
 8002038:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800203a:	2300      	movs	r3, #0
 800203c:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	2b80      	cmp	r3, #128	; 0x80
 8002044:	d106      	bne.n	8002054 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f44f 7280 	mov.w	r2, #256	; 0x100
 800204c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	f001 b911 	b.w	8003276 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002058:	2b00      	cmp	r3, #0
 800205a:	d007      	beq.n	800206c <HAL_DMAEx_MultiBufferStart_IT+0x40>
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002060:	2b00      	cmp	r3, #0
 8002062:	d003      	beq.n	800206c <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002068:	2b00      	cmp	r3, #0
 800206a:	d105      	bne.n	8002078 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2240      	movs	r2, #64	; 0x40
 8002070:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	f001 b8ff 	b.w	8003276 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800207e:	2b01      	cmp	r3, #1
 8002080:	d102      	bne.n	8002088 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 8002082:	2302      	movs	r3, #2
 8002084:	f001 b8f7 	b.w	8003276 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002096:	b2db      	uxtb	r3, r3
 8002098:	2b01      	cmp	r3, #1
 800209a:	f041 80e5 	bne.w	8003268 <HAL_DMAEx_MultiBufferStart_IT+0x123c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2202      	movs	r2, #2
 80020a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2200      	movs	r2, #0
 80020aa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80020ba:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	683a      	ldr	r2, [r7, #0]
 80020c2:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 80020c4:	6a3b      	ldr	r3, [r7, #32]
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	68b9      	ldr	r1, [r7, #8]
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f001 f910 	bl	80032f0 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	461a      	mov	r2, r3
 80020d6:	4b8d      	ldr	r3, [pc, #564]	; (800230c <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 80020d8:	429a      	cmp	r2, r3
 80020da:	d960      	bls.n	800219e <HAL_DMAEx_MultiBufferStart_IT+0x172>
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a8b      	ldr	r2, [pc, #556]	; (8002310 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d057      	beq.n	8002196 <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a8a      	ldr	r2, [pc, #552]	; (8002314 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d050      	beq.n	8002192 <HAL_DMAEx_MultiBufferStart_IT+0x166>
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a88      	ldr	r2, [pc, #544]	; (8002318 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d049      	beq.n	800218e <HAL_DMAEx_MultiBufferStart_IT+0x162>
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a87      	ldr	r2, [pc, #540]	; (800231c <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d042      	beq.n	800218a <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a85      	ldr	r2, [pc, #532]	; (8002320 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d03a      	beq.n	8002184 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a84      	ldr	r2, [pc, #528]	; (8002324 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d032      	beq.n	800217e <HAL_DMAEx_MultiBufferStart_IT+0x152>
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a82      	ldr	r2, [pc, #520]	; (8002328 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d02a      	beq.n	8002178 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a81      	ldr	r2, [pc, #516]	; (800232c <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d022      	beq.n	8002172 <HAL_DMAEx_MultiBufferStart_IT+0x146>
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a7f      	ldr	r2, [pc, #508]	; (8002330 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d01a      	beq.n	800216c <HAL_DMAEx_MultiBufferStart_IT+0x140>
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a7e      	ldr	r2, [pc, #504]	; (8002334 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d012      	beq.n	8002166 <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a7c      	ldr	r2, [pc, #496]	; (8002338 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d00a      	beq.n	8002160 <HAL_DMAEx_MultiBufferStart_IT+0x134>
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a7b      	ldr	r2, [pc, #492]	; (800233c <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d102      	bne.n	800215a <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8002154:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002158:	e01e      	b.n	8002198 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800215a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800215e:	e01b      	b.n	8002198 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002160:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002164:	e018      	b.n	8002198 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002166:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800216a:	e015      	b.n	8002198 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800216c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002170:	e012      	b.n	8002198 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002172:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002176:	e00f      	b.n	8002198 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002178:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800217c:	e00c      	b.n	8002198 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800217e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002182:	e009      	b.n	8002198 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002184:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002188:	e006      	b.n	8002198 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800218a:	2320      	movs	r3, #32
 800218c:	e004      	b.n	8002198 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800218e:	2320      	movs	r3, #32
 8002190:	e002      	b.n	8002198 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002192:	2320      	movs	r3, #32
 8002194:	e000      	b.n	8002198 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002196:	2320      	movs	r3, #32
 8002198:	4a69      	ldr	r2, [pc, #420]	; (8002340 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 800219a:	60d3      	str	r3, [r2, #12]
 800219c:	e14f      	b.n	800243e <HAL_DMAEx_MultiBufferStart_IT+0x412>
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	461a      	mov	r2, r3
 80021a4:	4b67      	ldr	r3, [pc, #412]	; (8002344 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d960      	bls.n	800226c <HAL_DMAEx_MultiBufferStart_IT+0x240>
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a58      	ldr	r2, [pc, #352]	; (8002310 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d057      	beq.n	8002264 <HAL_DMAEx_MultiBufferStart_IT+0x238>
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a56      	ldr	r2, [pc, #344]	; (8002314 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d050      	beq.n	8002260 <HAL_DMAEx_MultiBufferStart_IT+0x234>
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a55      	ldr	r2, [pc, #340]	; (8002318 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d049      	beq.n	800225c <HAL_DMAEx_MultiBufferStart_IT+0x230>
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a53      	ldr	r2, [pc, #332]	; (800231c <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d042      	beq.n	8002258 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a52      	ldr	r2, [pc, #328]	; (8002320 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d03a      	beq.n	8002252 <HAL_DMAEx_MultiBufferStart_IT+0x226>
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a50      	ldr	r2, [pc, #320]	; (8002324 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d032      	beq.n	800224c <HAL_DMAEx_MultiBufferStart_IT+0x220>
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a4f      	ldr	r2, [pc, #316]	; (8002328 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d02a      	beq.n	8002246 <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a4d      	ldr	r2, [pc, #308]	; (800232c <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d022      	beq.n	8002240 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a4c      	ldr	r2, [pc, #304]	; (8002330 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d01a      	beq.n	800223a <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a4a      	ldr	r2, [pc, #296]	; (8002334 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d012      	beq.n	8002234 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a49      	ldr	r2, [pc, #292]	; (8002338 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d00a      	beq.n	800222e <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a47      	ldr	r2, [pc, #284]	; (800233c <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d102      	bne.n	8002228 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 8002222:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002226:	e01e      	b.n	8002266 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002228:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800222c:	e01b      	b.n	8002266 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800222e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002232:	e018      	b.n	8002266 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002234:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002238:	e015      	b.n	8002266 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800223a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800223e:	e012      	b.n	8002266 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002240:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002244:	e00f      	b.n	8002266 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002246:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800224a:	e00c      	b.n	8002266 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800224c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002250:	e009      	b.n	8002266 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002252:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002256:	e006      	b.n	8002266 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002258:	2320      	movs	r3, #32
 800225a:	e004      	b.n	8002266 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800225c:	2320      	movs	r3, #32
 800225e:	e002      	b.n	8002266 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002260:	2320      	movs	r3, #32
 8002262:	e000      	b.n	8002266 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002264:	2320      	movs	r3, #32
 8002266:	4a36      	ldr	r2, [pc, #216]	; (8002340 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8002268:	6093      	str	r3, [r2, #8]
 800226a:	e0e8      	b.n	800243e <HAL_DMAEx_MultiBufferStart_IT+0x412>
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	461a      	mov	r2, r3
 8002272:	4b35      	ldr	r3, [pc, #212]	; (8002348 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8002274:	429a      	cmp	r2, r3
 8002276:	f240 8082 	bls.w	800237e <HAL_DMAEx_MultiBufferStart_IT+0x352>
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a24      	ldr	r2, [pc, #144]	; (8002310 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d078      	beq.n	8002376 <HAL_DMAEx_MultiBufferStart_IT+0x34a>
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a22      	ldr	r2, [pc, #136]	; (8002314 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d071      	beq.n	8002372 <HAL_DMAEx_MultiBufferStart_IT+0x346>
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a21      	ldr	r2, [pc, #132]	; (8002318 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d06a      	beq.n	800236e <HAL_DMAEx_MultiBufferStart_IT+0x342>
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a1f      	ldr	r2, [pc, #124]	; (800231c <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d063      	beq.n	800236a <HAL_DMAEx_MultiBufferStart_IT+0x33e>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a1e      	ldr	r2, [pc, #120]	; (8002320 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d05b      	beq.n	8002364 <HAL_DMAEx_MultiBufferStart_IT+0x338>
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a1c      	ldr	r2, [pc, #112]	; (8002324 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d053      	beq.n	800235e <HAL_DMAEx_MultiBufferStart_IT+0x332>
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a1b      	ldr	r2, [pc, #108]	; (8002328 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d04b      	beq.n	8002358 <HAL_DMAEx_MultiBufferStart_IT+0x32c>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a19      	ldr	r2, [pc, #100]	; (800232c <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d043      	beq.n	8002352 <HAL_DMAEx_MultiBufferStart_IT+0x326>
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a18      	ldr	r2, [pc, #96]	; (8002330 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d03b      	beq.n	800234c <HAL_DMAEx_MultiBufferStart_IT+0x320>
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a16      	ldr	r2, [pc, #88]	; (8002334 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d012      	beq.n	8002304 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a15      	ldr	r2, [pc, #84]	; (8002338 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d00a      	beq.n	80022fe <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a13      	ldr	r2, [pc, #76]	; (800233c <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d102      	bne.n	80022f8 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 80022f2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80022f6:	e03f      	b.n	8002378 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80022f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80022fc:	e03c      	b.n	8002378 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80022fe:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002302:	e039      	b.n	8002378 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002304:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002308:	e036      	b.n	8002378 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800230a:	bf00      	nop
 800230c:	40026458 	.word	0x40026458
 8002310:	40026010 	.word	0x40026010
 8002314:	40026410 	.word	0x40026410
 8002318:	40026070 	.word	0x40026070
 800231c:	40026470 	.word	0x40026470
 8002320:	40026028 	.word	0x40026028
 8002324:	40026428 	.word	0x40026428
 8002328:	40026088 	.word	0x40026088
 800232c:	40026488 	.word	0x40026488
 8002330:	40026040 	.word	0x40026040
 8002334:	40026440 	.word	0x40026440
 8002338:	400260a0 	.word	0x400260a0
 800233c:	400264a0 	.word	0x400264a0
 8002340:	40026400 	.word	0x40026400
 8002344:	400260b8 	.word	0x400260b8
 8002348:	40026058 	.word	0x40026058
 800234c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002350:	e012      	b.n	8002378 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002352:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002356:	e00f      	b.n	8002378 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002358:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800235c:	e00c      	b.n	8002378 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800235e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002362:	e009      	b.n	8002378 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002364:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002368:	e006      	b.n	8002378 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800236a:	2320      	movs	r3, #32
 800236c:	e004      	b.n	8002378 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800236e:	2320      	movs	r3, #32
 8002370:	e002      	b.n	8002378 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002372:	2320      	movs	r3, #32
 8002374:	e000      	b.n	8002378 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002376:	2320      	movs	r3, #32
 8002378:	4a8c      	ldr	r2, [pc, #560]	; (80025ac <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 800237a:	60d3      	str	r3, [r2, #12]
 800237c:	e05f      	b.n	800243e <HAL_DMAEx_MultiBufferStart_IT+0x412>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a8b      	ldr	r2, [pc, #556]	; (80025b0 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d057      	beq.n	8002438 <HAL_DMAEx_MultiBufferStart_IT+0x40c>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a89      	ldr	r2, [pc, #548]	; (80025b4 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d050      	beq.n	8002434 <HAL_DMAEx_MultiBufferStart_IT+0x408>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a88      	ldr	r2, [pc, #544]	; (80025b8 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d049      	beq.n	8002430 <HAL_DMAEx_MultiBufferStart_IT+0x404>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a86      	ldr	r2, [pc, #536]	; (80025bc <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d042      	beq.n	800242c <HAL_DMAEx_MultiBufferStart_IT+0x400>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a85      	ldr	r2, [pc, #532]	; (80025c0 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d03a      	beq.n	8002426 <HAL_DMAEx_MultiBufferStart_IT+0x3fa>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a83      	ldr	r2, [pc, #524]	; (80025c4 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d032      	beq.n	8002420 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a82      	ldr	r2, [pc, #520]	; (80025c8 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d02a      	beq.n	800241a <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a80      	ldr	r2, [pc, #512]	; (80025cc <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d022      	beq.n	8002414 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a7f      	ldr	r2, [pc, #508]	; (80025d0 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d01a      	beq.n	800240e <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a7d      	ldr	r2, [pc, #500]	; (80025d4 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d012      	beq.n	8002408 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a7c      	ldr	r2, [pc, #496]	; (80025d8 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d00a      	beq.n	8002402 <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a7a      	ldr	r2, [pc, #488]	; (80025dc <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d102      	bne.n	80023fc <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
 80023f6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80023fa:	e01e      	b.n	800243a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80023fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002400:	e01b      	b.n	800243a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002402:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002406:	e018      	b.n	800243a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002408:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800240c:	e015      	b.n	800243a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800240e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002412:	e012      	b.n	800243a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002414:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002418:	e00f      	b.n	800243a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800241a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800241e:	e00c      	b.n	800243a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002420:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002424:	e009      	b.n	800243a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002426:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800242a:	e006      	b.n	800243a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800242c:	2320      	movs	r3, #32
 800242e:	e004      	b.n	800243a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002430:	2320      	movs	r3, #32
 8002432:	e002      	b.n	800243a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002434:	2320      	movs	r3, #32
 8002436:	e000      	b.n	800243a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002438:	2320      	movs	r3, #32
 800243a:	4a5c      	ldr	r2, [pc, #368]	; (80025ac <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 800243c:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	461a      	mov	r2, r3
 8002444:	4b66      	ldr	r3, [pc, #408]	; (80025e0 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8002446:	429a      	cmp	r2, r3
 8002448:	d960      	bls.n	800250c <HAL_DMAEx_MultiBufferStart_IT+0x4e0>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a58      	ldr	r2, [pc, #352]	; (80025b0 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d057      	beq.n	8002504 <HAL_DMAEx_MultiBufferStart_IT+0x4d8>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a56      	ldr	r2, [pc, #344]	; (80025b4 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d050      	beq.n	8002500 <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a55      	ldr	r2, [pc, #340]	; (80025b8 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d049      	beq.n	80024fc <HAL_DMAEx_MultiBufferStart_IT+0x4d0>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a53      	ldr	r2, [pc, #332]	; (80025bc <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d042      	beq.n	80024f8 <HAL_DMAEx_MultiBufferStart_IT+0x4cc>
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a52      	ldr	r2, [pc, #328]	; (80025c0 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d03a      	beq.n	80024f2 <HAL_DMAEx_MultiBufferStart_IT+0x4c6>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a50      	ldr	r2, [pc, #320]	; (80025c4 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d032      	beq.n	80024ec <HAL_DMAEx_MultiBufferStart_IT+0x4c0>
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a4f      	ldr	r2, [pc, #316]	; (80025c8 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d02a      	beq.n	80024e6 <HAL_DMAEx_MultiBufferStart_IT+0x4ba>
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a4d      	ldr	r2, [pc, #308]	; (80025cc <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d022      	beq.n	80024e0 <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a4c      	ldr	r2, [pc, #304]	; (80025d0 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d01a      	beq.n	80024da <HAL_DMAEx_MultiBufferStart_IT+0x4ae>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a4a      	ldr	r2, [pc, #296]	; (80025d4 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d012      	beq.n	80024d4 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a49      	ldr	r2, [pc, #292]	; (80025d8 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d00a      	beq.n	80024ce <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a47      	ldr	r2, [pc, #284]	; (80025dc <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d102      	bne.n	80024c8 <HAL_DMAEx_MultiBufferStart_IT+0x49c>
 80024c2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80024c6:	e01e      	b.n	8002506 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80024c8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80024cc:	e01b      	b.n	8002506 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80024ce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80024d2:	e018      	b.n	8002506 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80024d4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80024d8:	e015      	b.n	8002506 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80024da:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80024de:	e012      	b.n	8002506 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80024e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024e4:	e00f      	b.n	8002506 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80024e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024ea:	e00c      	b.n	8002506 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80024ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024f0:	e009      	b.n	8002506 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80024f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024f6:	e006      	b.n	8002506 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80024f8:	2310      	movs	r3, #16
 80024fa:	e004      	b.n	8002506 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80024fc:	2310      	movs	r3, #16
 80024fe:	e002      	b.n	8002506 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002500:	2310      	movs	r3, #16
 8002502:	e000      	b.n	8002506 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002504:	2310      	movs	r3, #16
 8002506:	4a37      	ldr	r2, [pc, #220]	; (80025e4 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8002508:	60d3      	str	r3, [r2, #12]
 800250a:	e14f      	b.n	80027ac <HAL_DMAEx_MultiBufferStart_IT+0x780>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	461a      	mov	r2, r3
 8002512:	4b35      	ldr	r3, [pc, #212]	; (80025e8 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8002514:	429a      	cmp	r2, r3
 8002516:	f240 8082 	bls.w	800261e <HAL_DMAEx_MultiBufferStart_IT+0x5f2>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a24      	ldr	r2, [pc, #144]	; (80025b0 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d078      	beq.n	8002616 <HAL_DMAEx_MultiBufferStart_IT+0x5ea>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a22      	ldr	r2, [pc, #136]	; (80025b4 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d071      	beq.n	8002612 <HAL_DMAEx_MultiBufferStart_IT+0x5e6>
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a21      	ldr	r2, [pc, #132]	; (80025b8 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d06a      	beq.n	800260e <HAL_DMAEx_MultiBufferStart_IT+0x5e2>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a1f      	ldr	r2, [pc, #124]	; (80025bc <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d063      	beq.n	800260a <HAL_DMAEx_MultiBufferStart_IT+0x5de>
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a1e      	ldr	r2, [pc, #120]	; (80025c0 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d05b      	beq.n	8002604 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a1c      	ldr	r2, [pc, #112]	; (80025c4 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d053      	beq.n	80025fe <HAL_DMAEx_MultiBufferStart_IT+0x5d2>
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a1b      	ldr	r2, [pc, #108]	; (80025c8 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d04b      	beq.n	80025f8 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a19      	ldr	r2, [pc, #100]	; (80025cc <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d043      	beq.n	80025f2 <HAL_DMAEx_MultiBufferStart_IT+0x5c6>
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a18      	ldr	r2, [pc, #96]	; (80025d0 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d03b      	beq.n	80025ec <HAL_DMAEx_MultiBufferStart_IT+0x5c0>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a16      	ldr	r2, [pc, #88]	; (80025d4 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d012      	beq.n	80025a4 <HAL_DMAEx_MultiBufferStart_IT+0x578>
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a15      	ldr	r2, [pc, #84]	; (80025d8 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d00a      	beq.n	800259e <HAL_DMAEx_MultiBufferStart_IT+0x572>
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a13      	ldr	r2, [pc, #76]	; (80025dc <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d102      	bne.n	8002598 <HAL_DMAEx_MultiBufferStart_IT+0x56c>
 8002592:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002596:	e03f      	b.n	8002618 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002598:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800259c:	e03c      	b.n	8002618 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800259e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80025a2:	e039      	b.n	8002618 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80025a4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80025a8:	e036      	b.n	8002618 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80025aa:	bf00      	nop
 80025ac:	40026000 	.word	0x40026000
 80025b0:	40026010 	.word	0x40026010
 80025b4:	40026410 	.word	0x40026410
 80025b8:	40026070 	.word	0x40026070
 80025bc:	40026470 	.word	0x40026470
 80025c0:	40026028 	.word	0x40026028
 80025c4:	40026428 	.word	0x40026428
 80025c8:	40026088 	.word	0x40026088
 80025cc:	40026488 	.word	0x40026488
 80025d0:	40026040 	.word	0x40026040
 80025d4:	40026440 	.word	0x40026440
 80025d8:	400260a0 	.word	0x400260a0
 80025dc:	400264a0 	.word	0x400264a0
 80025e0:	40026458 	.word	0x40026458
 80025e4:	40026400 	.word	0x40026400
 80025e8:	400260b8 	.word	0x400260b8
 80025ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80025f0:	e012      	b.n	8002618 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80025f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025f6:	e00f      	b.n	8002618 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80025f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025fc:	e00c      	b.n	8002618 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80025fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002602:	e009      	b.n	8002618 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002604:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002608:	e006      	b.n	8002618 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800260a:	2310      	movs	r3, #16
 800260c:	e004      	b.n	8002618 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800260e:	2310      	movs	r3, #16
 8002610:	e002      	b.n	8002618 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002612:	2310      	movs	r3, #16
 8002614:	e000      	b.n	8002618 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002616:	2310      	movs	r3, #16
 8002618:	4a8c      	ldr	r2, [pc, #560]	; (800284c <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 800261a:	6093      	str	r3, [r2, #8]
 800261c:	e0c6      	b.n	80027ac <HAL_DMAEx_MultiBufferStart_IT+0x780>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	461a      	mov	r2, r3
 8002624:	4b8a      	ldr	r3, [pc, #552]	; (8002850 <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 8002626:	429a      	cmp	r2, r3
 8002628:	d960      	bls.n	80026ec <HAL_DMAEx_MultiBufferStart_IT+0x6c0>
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a89      	ldr	r2, [pc, #548]	; (8002854 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d057      	beq.n	80026e4 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a87      	ldr	r2, [pc, #540]	; (8002858 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d050      	beq.n	80026e0 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a86      	ldr	r2, [pc, #536]	; (800285c <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d049      	beq.n	80026dc <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a84      	ldr	r2, [pc, #528]	; (8002860 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d042      	beq.n	80026d8 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a83      	ldr	r2, [pc, #524]	; (8002864 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d03a      	beq.n	80026d2 <HAL_DMAEx_MultiBufferStart_IT+0x6a6>
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a81      	ldr	r2, [pc, #516]	; (8002868 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d032      	beq.n	80026cc <HAL_DMAEx_MultiBufferStart_IT+0x6a0>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a80      	ldr	r2, [pc, #512]	; (800286c <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d02a      	beq.n	80026c6 <HAL_DMAEx_MultiBufferStart_IT+0x69a>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a7e      	ldr	r2, [pc, #504]	; (8002870 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d022      	beq.n	80026c0 <HAL_DMAEx_MultiBufferStart_IT+0x694>
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a7d      	ldr	r2, [pc, #500]	; (8002874 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d01a      	beq.n	80026ba <HAL_DMAEx_MultiBufferStart_IT+0x68e>
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a7b      	ldr	r2, [pc, #492]	; (8002878 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d012      	beq.n	80026b4 <HAL_DMAEx_MultiBufferStart_IT+0x688>
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a7a      	ldr	r2, [pc, #488]	; (800287c <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d00a      	beq.n	80026ae <HAL_DMAEx_MultiBufferStart_IT+0x682>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a78      	ldr	r2, [pc, #480]	; (8002880 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d102      	bne.n	80026a8 <HAL_DMAEx_MultiBufferStart_IT+0x67c>
 80026a2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80026a6:	e01e      	b.n	80026e6 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80026a8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80026ac:	e01b      	b.n	80026e6 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80026ae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80026b2:	e018      	b.n	80026e6 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80026b4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80026b8:	e015      	b.n	80026e6 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80026ba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80026be:	e012      	b.n	80026e6 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80026c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026c4:	e00f      	b.n	80026e6 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80026c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026ca:	e00c      	b.n	80026e6 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80026cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026d0:	e009      	b.n	80026e6 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80026d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026d6:	e006      	b.n	80026e6 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80026d8:	2310      	movs	r3, #16
 80026da:	e004      	b.n	80026e6 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80026dc:	2310      	movs	r3, #16
 80026de:	e002      	b.n	80026e6 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80026e0:	2310      	movs	r3, #16
 80026e2:	e000      	b.n	80026e6 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80026e4:	2310      	movs	r3, #16
 80026e6:	4a67      	ldr	r2, [pc, #412]	; (8002884 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 80026e8:	60d3      	str	r3, [r2, #12]
 80026ea:	e05f      	b.n	80027ac <HAL_DMAEx_MultiBufferStart_IT+0x780>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a58      	ldr	r2, [pc, #352]	; (8002854 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d057      	beq.n	80027a6 <HAL_DMAEx_MultiBufferStart_IT+0x77a>
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a57      	ldr	r2, [pc, #348]	; (8002858 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d050      	beq.n	80027a2 <HAL_DMAEx_MultiBufferStart_IT+0x776>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a55      	ldr	r2, [pc, #340]	; (800285c <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d049      	beq.n	800279e <HAL_DMAEx_MultiBufferStart_IT+0x772>
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a54      	ldr	r2, [pc, #336]	; (8002860 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d042      	beq.n	800279a <HAL_DMAEx_MultiBufferStart_IT+0x76e>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a52      	ldr	r2, [pc, #328]	; (8002864 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d03a      	beq.n	8002794 <HAL_DMAEx_MultiBufferStart_IT+0x768>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a51      	ldr	r2, [pc, #324]	; (8002868 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d032      	beq.n	800278e <HAL_DMAEx_MultiBufferStart_IT+0x762>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a4f      	ldr	r2, [pc, #316]	; (800286c <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d02a      	beq.n	8002788 <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a4e      	ldr	r2, [pc, #312]	; (8002870 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d022      	beq.n	8002782 <HAL_DMAEx_MultiBufferStart_IT+0x756>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a4c      	ldr	r2, [pc, #304]	; (8002874 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d01a      	beq.n	800277c <HAL_DMAEx_MultiBufferStart_IT+0x750>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a4b      	ldr	r2, [pc, #300]	; (8002878 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d012      	beq.n	8002776 <HAL_DMAEx_MultiBufferStart_IT+0x74a>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a49      	ldr	r2, [pc, #292]	; (800287c <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d00a      	beq.n	8002770 <HAL_DMAEx_MultiBufferStart_IT+0x744>
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a48      	ldr	r2, [pc, #288]	; (8002880 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d102      	bne.n	800276a <HAL_DMAEx_MultiBufferStart_IT+0x73e>
 8002764:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002768:	e01e      	b.n	80027a8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800276a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800276e:	e01b      	b.n	80027a8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002770:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002774:	e018      	b.n	80027a8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002776:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800277a:	e015      	b.n	80027a8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800277c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002780:	e012      	b.n	80027a8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002782:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002786:	e00f      	b.n	80027a8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002788:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800278c:	e00c      	b.n	80027a8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800278e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002792:	e009      	b.n	80027a8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002794:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002798:	e006      	b.n	80027a8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800279a:	2310      	movs	r3, #16
 800279c:	e004      	b.n	80027a8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800279e:	2310      	movs	r3, #16
 80027a0:	e002      	b.n	80027a8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80027a2:	2310      	movs	r3, #16
 80027a4:	e000      	b.n	80027a8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80027a6:	2310      	movs	r3, #16
 80027a8:	4a36      	ldr	r2, [pc, #216]	; (8002884 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 80027aa:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	461a      	mov	r2, r3
 80027b2:	4b35      	ldr	r3, [pc, #212]	; (8002888 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 80027b4:	429a      	cmp	r2, r3
 80027b6:	f240 8082 	bls.w	80028be <HAL_DMAEx_MultiBufferStart_IT+0x892>
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a25      	ldr	r2, [pc, #148]	; (8002854 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d078      	beq.n	80028b6 <HAL_DMAEx_MultiBufferStart_IT+0x88a>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a23      	ldr	r2, [pc, #140]	; (8002858 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d071      	beq.n	80028b2 <HAL_DMAEx_MultiBufferStart_IT+0x886>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a22      	ldr	r2, [pc, #136]	; (800285c <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d06a      	beq.n	80028ae <HAL_DMAEx_MultiBufferStart_IT+0x882>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a20      	ldr	r2, [pc, #128]	; (8002860 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d063      	beq.n	80028aa <HAL_DMAEx_MultiBufferStart_IT+0x87e>
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a1f      	ldr	r2, [pc, #124]	; (8002864 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d05b      	beq.n	80028a4 <HAL_DMAEx_MultiBufferStart_IT+0x878>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a1d      	ldr	r2, [pc, #116]	; (8002868 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d053      	beq.n	800289e <HAL_DMAEx_MultiBufferStart_IT+0x872>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a1c      	ldr	r2, [pc, #112]	; (800286c <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d04b      	beq.n	8002898 <HAL_DMAEx_MultiBufferStart_IT+0x86c>
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a1a      	ldr	r2, [pc, #104]	; (8002870 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d043      	beq.n	8002892 <HAL_DMAEx_MultiBufferStart_IT+0x866>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a19      	ldr	r2, [pc, #100]	; (8002874 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d03b      	beq.n	800288c <HAL_DMAEx_MultiBufferStart_IT+0x860>
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a17      	ldr	r2, [pc, #92]	; (8002878 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d012      	beq.n	8002844 <HAL_DMAEx_MultiBufferStart_IT+0x818>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a16      	ldr	r2, [pc, #88]	; (800287c <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d00a      	beq.n	800283e <HAL_DMAEx_MultiBufferStart_IT+0x812>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a14      	ldr	r2, [pc, #80]	; (8002880 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d102      	bne.n	8002838 <HAL_DMAEx_MultiBufferStart_IT+0x80c>
 8002832:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002836:	e03f      	b.n	80028b8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002838:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800283c:	e03c      	b.n	80028b8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800283e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002842:	e039      	b.n	80028b8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002844:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002848:	e036      	b.n	80028b8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800284a:	bf00      	nop
 800284c:	40026400 	.word	0x40026400
 8002850:	40026058 	.word	0x40026058
 8002854:	40026010 	.word	0x40026010
 8002858:	40026410 	.word	0x40026410
 800285c:	40026070 	.word	0x40026070
 8002860:	40026470 	.word	0x40026470
 8002864:	40026028 	.word	0x40026028
 8002868:	40026428 	.word	0x40026428
 800286c:	40026088 	.word	0x40026088
 8002870:	40026488 	.word	0x40026488
 8002874:	40026040 	.word	0x40026040
 8002878:	40026440 	.word	0x40026440
 800287c:	400260a0 	.word	0x400260a0
 8002880:	400264a0 	.word	0x400264a0
 8002884:	40026000 	.word	0x40026000
 8002888:	40026458 	.word	0x40026458
 800288c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002890:	e012      	b.n	80028b8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002892:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002896:	e00f      	b.n	80028b8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002898:	f44f 7300 	mov.w	r3, #512	; 0x200
 800289c:	e00c      	b.n	80028b8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800289e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028a2:	e009      	b.n	80028b8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80028a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028a8:	e006      	b.n	80028b8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80028aa:	2308      	movs	r3, #8
 80028ac:	e004      	b.n	80028b8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80028ae:	2308      	movs	r3, #8
 80028b0:	e002      	b.n	80028b8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80028b2:	2308      	movs	r3, #8
 80028b4:	e000      	b.n	80028b8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80028b6:	2308      	movs	r3, #8
 80028b8:	4a8c      	ldr	r2, [pc, #560]	; (8002aec <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 80028ba:	60d3      	str	r3, [r2, #12]
 80028bc:	e14e      	b.n	8002b5c <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	461a      	mov	r2, r3
 80028c4:	4b8a      	ldr	r3, [pc, #552]	; (8002af0 <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d960      	bls.n	800298c <HAL_DMAEx_MultiBufferStart_IT+0x960>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a89      	ldr	r2, [pc, #548]	; (8002af4 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d057      	beq.n	8002984 <HAL_DMAEx_MultiBufferStart_IT+0x958>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a87      	ldr	r2, [pc, #540]	; (8002af8 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d050      	beq.n	8002980 <HAL_DMAEx_MultiBufferStart_IT+0x954>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a86      	ldr	r2, [pc, #536]	; (8002afc <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d049      	beq.n	800297c <HAL_DMAEx_MultiBufferStart_IT+0x950>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a84      	ldr	r2, [pc, #528]	; (8002b00 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d042      	beq.n	8002978 <HAL_DMAEx_MultiBufferStart_IT+0x94c>
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a83      	ldr	r2, [pc, #524]	; (8002b04 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d03a      	beq.n	8002972 <HAL_DMAEx_MultiBufferStart_IT+0x946>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a81      	ldr	r2, [pc, #516]	; (8002b08 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d032      	beq.n	800296c <HAL_DMAEx_MultiBufferStart_IT+0x940>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a80      	ldr	r2, [pc, #512]	; (8002b0c <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d02a      	beq.n	8002966 <HAL_DMAEx_MultiBufferStart_IT+0x93a>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a7e      	ldr	r2, [pc, #504]	; (8002b10 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d022      	beq.n	8002960 <HAL_DMAEx_MultiBufferStart_IT+0x934>
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a7d      	ldr	r2, [pc, #500]	; (8002b14 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d01a      	beq.n	800295a <HAL_DMAEx_MultiBufferStart_IT+0x92e>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a7b      	ldr	r2, [pc, #492]	; (8002b18 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d012      	beq.n	8002954 <HAL_DMAEx_MultiBufferStart_IT+0x928>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a7a      	ldr	r2, [pc, #488]	; (8002b1c <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d00a      	beq.n	800294e <HAL_DMAEx_MultiBufferStart_IT+0x922>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a78      	ldr	r2, [pc, #480]	; (8002b20 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d102      	bne.n	8002948 <HAL_DMAEx_MultiBufferStart_IT+0x91c>
 8002942:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002946:	e01e      	b.n	8002986 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002948:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800294c:	e01b      	b.n	8002986 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800294e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002952:	e018      	b.n	8002986 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002954:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002958:	e015      	b.n	8002986 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800295a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800295e:	e012      	b.n	8002986 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002960:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002964:	e00f      	b.n	8002986 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002966:	f44f 7300 	mov.w	r3, #512	; 0x200
 800296a:	e00c      	b.n	8002986 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800296c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002970:	e009      	b.n	8002986 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002972:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002976:	e006      	b.n	8002986 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002978:	2308      	movs	r3, #8
 800297a:	e004      	b.n	8002986 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800297c:	2308      	movs	r3, #8
 800297e:	e002      	b.n	8002986 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002980:	2308      	movs	r3, #8
 8002982:	e000      	b.n	8002986 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002984:	2308      	movs	r3, #8
 8002986:	4a59      	ldr	r2, [pc, #356]	; (8002aec <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8002988:	6093      	str	r3, [r2, #8]
 800298a:	e0e7      	b.n	8002b5c <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	461a      	mov	r2, r3
 8002992:	4b64      	ldr	r3, [pc, #400]	; (8002b24 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8002994:	429a      	cmp	r2, r3
 8002996:	d960      	bls.n	8002a5a <HAL_DMAEx_MultiBufferStart_IT+0xa2e>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a55      	ldr	r2, [pc, #340]	; (8002af4 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d057      	beq.n	8002a52 <HAL_DMAEx_MultiBufferStart_IT+0xa26>
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a54      	ldr	r2, [pc, #336]	; (8002af8 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d050      	beq.n	8002a4e <HAL_DMAEx_MultiBufferStart_IT+0xa22>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a52      	ldr	r2, [pc, #328]	; (8002afc <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d049      	beq.n	8002a4a <HAL_DMAEx_MultiBufferStart_IT+0xa1e>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a51      	ldr	r2, [pc, #324]	; (8002b00 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d042      	beq.n	8002a46 <HAL_DMAEx_MultiBufferStart_IT+0xa1a>
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a4f      	ldr	r2, [pc, #316]	; (8002b04 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d03a      	beq.n	8002a40 <HAL_DMAEx_MultiBufferStart_IT+0xa14>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a4e      	ldr	r2, [pc, #312]	; (8002b08 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d032      	beq.n	8002a3a <HAL_DMAEx_MultiBufferStart_IT+0xa0e>
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a4c      	ldr	r2, [pc, #304]	; (8002b0c <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d02a      	beq.n	8002a34 <HAL_DMAEx_MultiBufferStart_IT+0xa08>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a4b      	ldr	r2, [pc, #300]	; (8002b10 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d022      	beq.n	8002a2e <HAL_DMAEx_MultiBufferStart_IT+0xa02>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a49      	ldr	r2, [pc, #292]	; (8002b14 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d01a      	beq.n	8002a28 <HAL_DMAEx_MultiBufferStart_IT+0x9fc>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a48      	ldr	r2, [pc, #288]	; (8002b18 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d012      	beq.n	8002a22 <HAL_DMAEx_MultiBufferStart_IT+0x9f6>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a46      	ldr	r2, [pc, #280]	; (8002b1c <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d00a      	beq.n	8002a1c <HAL_DMAEx_MultiBufferStart_IT+0x9f0>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a45      	ldr	r2, [pc, #276]	; (8002b20 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d102      	bne.n	8002a16 <HAL_DMAEx_MultiBufferStart_IT+0x9ea>
 8002a10:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002a14:	e01e      	b.n	8002a54 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002a16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a1a:	e01b      	b.n	8002a54 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002a1c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002a20:	e018      	b.n	8002a54 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002a22:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002a26:	e015      	b.n	8002a54 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002a28:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002a2c:	e012      	b.n	8002a54 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002a2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a32:	e00f      	b.n	8002a54 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002a34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a38:	e00c      	b.n	8002a54 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002a3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a3e:	e009      	b.n	8002a54 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002a40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a44:	e006      	b.n	8002a54 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002a46:	2308      	movs	r3, #8
 8002a48:	e004      	b.n	8002a54 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002a4a:	2308      	movs	r3, #8
 8002a4c:	e002      	b.n	8002a54 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002a4e:	2308      	movs	r3, #8
 8002a50:	e000      	b.n	8002a54 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002a52:	2308      	movs	r3, #8
 8002a54:	4a34      	ldr	r2, [pc, #208]	; (8002b28 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8002a56:	60d3      	str	r3, [r2, #12]
 8002a58:	e080      	b.n	8002b5c <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a25      	ldr	r2, [pc, #148]	; (8002af4 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d078      	beq.n	8002b56 <HAL_DMAEx_MultiBufferStart_IT+0xb2a>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a23      	ldr	r2, [pc, #140]	; (8002af8 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d071      	beq.n	8002b52 <HAL_DMAEx_MultiBufferStart_IT+0xb26>
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a22      	ldr	r2, [pc, #136]	; (8002afc <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d06a      	beq.n	8002b4e <HAL_DMAEx_MultiBufferStart_IT+0xb22>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a20      	ldr	r2, [pc, #128]	; (8002b00 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d063      	beq.n	8002b4a <HAL_DMAEx_MultiBufferStart_IT+0xb1e>
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a1f      	ldr	r2, [pc, #124]	; (8002b04 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d05b      	beq.n	8002b44 <HAL_DMAEx_MultiBufferStart_IT+0xb18>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a1d      	ldr	r2, [pc, #116]	; (8002b08 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d053      	beq.n	8002b3e <HAL_DMAEx_MultiBufferStart_IT+0xb12>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a1c      	ldr	r2, [pc, #112]	; (8002b0c <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d04b      	beq.n	8002b38 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a1a      	ldr	r2, [pc, #104]	; (8002b10 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d043      	beq.n	8002b32 <HAL_DMAEx_MultiBufferStart_IT+0xb06>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a19      	ldr	r2, [pc, #100]	; (8002b14 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d03b      	beq.n	8002b2c <HAL_DMAEx_MultiBufferStart_IT+0xb00>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a17      	ldr	r2, [pc, #92]	; (8002b18 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d012      	beq.n	8002ae4 <HAL_DMAEx_MultiBufferStart_IT+0xab8>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a16      	ldr	r2, [pc, #88]	; (8002b1c <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d00a      	beq.n	8002ade <HAL_DMAEx_MultiBufferStart_IT+0xab2>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a14      	ldr	r2, [pc, #80]	; (8002b20 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d102      	bne.n	8002ad8 <HAL_DMAEx_MultiBufferStart_IT+0xaac>
 8002ad2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002ad6:	e03f      	b.n	8002b58 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002ad8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002adc:	e03c      	b.n	8002b58 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002ade:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002ae2:	e039      	b.n	8002b58 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002ae4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002ae8:	e036      	b.n	8002b58 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002aea:	bf00      	nop
 8002aec:	40026400 	.word	0x40026400
 8002af0:	400260b8 	.word	0x400260b8
 8002af4:	40026010 	.word	0x40026010
 8002af8:	40026410 	.word	0x40026410
 8002afc:	40026070 	.word	0x40026070
 8002b00:	40026470 	.word	0x40026470
 8002b04:	40026028 	.word	0x40026028
 8002b08:	40026428 	.word	0x40026428
 8002b0c:	40026088 	.word	0x40026088
 8002b10:	40026488 	.word	0x40026488
 8002b14:	40026040 	.word	0x40026040
 8002b18:	40026440 	.word	0x40026440
 8002b1c:	400260a0 	.word	0x400260a0
 8002b20:	400264a0 	.word	0x400264a0
 8002b24:	40026058 	.word	0x40026058
 8002b28:	40026000 	.word	0x40026000
 8002b2c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002b30:	e012      	b.n	8002b58 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002b32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b36:	e00f      	b.n	8002b58 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002b38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b3c:	e00c      	b.n	8002b58 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002b3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b42:	e009      	b.n	8002b58 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002b44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b48:	e006      	b.n	8002b58 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002b4a:	2308      	movs	r3, #8
 8002b4c:	e004      	b.n	8002b58 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002b4e:	2308      	movs	r3, #8
 8002b50:	e002      	b.n	8002b58 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002b52:	2308      	movs	r3, #8
 8002b54:	e000      	b.n	8002b58 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002b56:	2308      	movs	r3, #8
 8002b58:	4a8a      	ldr	r2, [pc, #552]	; (8002d84 <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 8002b5a:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	461a      	mov	r2, r3
 8002b62:	4b89      	ldr	r3, [pc, #548]	; (8002d88 <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d960      	bls.n	8002c2a <HAL_DMAEx_MultiBufferStart_IT+0xbfe>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a87      	ldr	r2, [pc, #540]	; (8002d8c <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d057      	beq.n	8002c22 <HAL_DMAEx_MultiBufferStart_IT+0xbf6>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a86      	ldr	r2, [pc, #536]	; (8002d90 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d050      	beq.n	8002c1e <HAL_DMAEx_MultiBufferStart_IT+0xbf2>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a84      	ldr	r2, [pc, #528]	; (8002d94 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d049      	beq.n	8002c1a <HAL_DMAEx_MultiBufferStart_IT+0xbee>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a83      	ldr	r2, [pc, #524]	; (8002d98 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d042      	beq.n	8002c16 <HAL_DMAEx_MultiBufferStart_IT+0xbea>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a81      	ldr	r2, [pc, #516]	; (8002d9c <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d03a      	beq.n	8002c10 <HAL_DMAEx_MultiBufferStart_IT+0xbe4>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a80      	ldr	r2, [pc, #512]	; (8002da0 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d032      	beq.n	8002c0a <HAL_DMAEx_MultiBufferStart_IT+0xbde>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a7e      	ldr	r2, [pc, #504]	; (8002da4 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d02a      	beq.n	8002c04 <HAL_DMAEx_MultiBufferStart_IT+0xbd8>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a7d      	ldr	r2, [pc, #500]	; (8002da8 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d022      	beq.n	8002bfe <HAL_DMAEx_MultiBufferStart_IT+0xbd2>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a7b      	ldr	r2, [pc, #492]	; (8002dac <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d01a      	beq.n	8002bf8 <HAL_DMAEx_MultiBufferStart_IT+0xbcc>
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a7a      	ldr	r2, [pc, #488]	; (8002db0 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d012      	beq.n	8002bf2 <HAL_DMAEx_MultiBufferStart_IT+0xbc6>
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a78      	ldr	r2, [pc, #480]	; (8002db4 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d00a      	beq.n	8002bec <HAL_DMAEx_MultiBufferStart_IT+0xbc0>
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a77      	ldr	r2, [pc, #476]	; (8002db8 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d102      	bne.n	8002be6 <HAL_DMAEx_MultiBufferStart_IT+0xbba>
 8002be0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002be4:	e01e      	b.n	8002c24 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002be6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bea:	e01b      	b.n	8002c24 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002bec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002bf0:	e018      	b.n	8002c24 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002bf2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002bf6:	e015      	b.n	8002c24 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002bf8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002bfc:	e012      	b.n	8002c24 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002bfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c02:	e00f      	b.n	8002c24 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002c04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c08:	e00c      	b.n	8002c24 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002c0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c0e:	e009      	b.n	8002c24 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002c10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c14:	e006      	b.n	8002c24 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002c16:	2304      	movs	r3, #4
 8002c18:	e004      	b.n	8002c24 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002c1a:	2304      	movs	r3, #4
 8002c1c:	e002      	b.n	8002c24 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002c1e:	2304      	movs	r3, #4
 8002c20:	e000      	b.n	8002c24 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002c22:	2304      	movs	r3, #4
 8002c24:	4a65      	ldr	r2, [pc, #404]	; (8002dbc <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8002c26:	60d3      	str	r3, [r2, #12]
 8002c28:	e150      	b.n	8002ecc <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	461a      	mov	r2, r3
 8002c30:	4b63      	ldr	r3, [pc, #396]	; (8002dc0 <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d960      	bls.n	8002cf8 <HAL_DMAEx_MultiBufferStart_IT+0xccc>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a54      	ldr	r2, [pc, #336]	; (8002d8c <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d057      	beq.n	8002cf0 <HAL_DMAEx_MultiBufferStart_IT+0xcc4>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a52      	ldr	r2, [pc, #328]	; (8002d90 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d050      	beq.n	8002cec <HAL_DMAEx_MultiBufferStart_IT+0xcc0>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a51      	ldr	r2, [pc, #324]	; (8002d94 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d049      	beq.n	8002ce8 <HAL_DMAEx_MultiBufferStart_IT+0xcbc>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a4f      	ldr	r2, [pc, #316]	; (8002d98 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d042      	beq.n	8002ce4 <HAL_DMAEx_MultiBufferStart_IT+0xcb8>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a4e      	ldr	r2, [pc, #312]	; (8002d9c <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d03a      	beq.n	8002cde <HAL_DMAEx_MultiBufferStart_IT+0xcb2>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a4c      	ldr	r2, [pc, #304]	; (8002da0 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d032      	beq.n	8002cd8 <HAL_DMAEx_MultiBufferStart_IT+0xcac>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a4b      	ldr	r2, [pc, #300]	; (8002da4 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d02a      	beq.n	8002cd2 <HAL_DMAEx_MultiBufferStart_IT+0xca6>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a49      	ldr	r2, [pc, #292]	; (8002da8 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d022      	beq.n	8002ccc <HAL_DMAEx_MultiBufferStart_IT+0xca0>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a48      	ldr	r2, [pc, #288]	; (8002dac <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d01a      	beq.n	8002cc6 <HAL_DMAEx_MultiBufferStart_IT+0xc9a>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a46      	ldr	r2, [pc, #280]	; (8002db0 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d012      	beq.n	8002cc0 <HAL_DMAEx_MultiBufferStart_IT+0xc94>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a45      	ldr	r2, [pc, #276]	; (8002db4 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d00a      	beq.n	8002cba <HAL_DMAEx_MultiBufferStart_IT+0xc8e>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a43      	ldr	r2, [pc, #268]	; (8002db8 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d102      	bne.n	8002cb4 <HAL_DMAEx_MultiBufferStart_IT+0xc88>
 8002cae:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002cb2:	e01e      	b.n	8002cf2 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8002cb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cb8:	e01b      	b.n	8002cf2 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8002cba:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002cbe:	e018      	b.n	8002cf2 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8002cc0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002cc4:	e015      	b.n	8002cf2 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8002cc6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002cca:	e012      	b.n	8002cf2 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8002ccc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cd0:	e00f      	b.n	8002cf2 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8002cd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cd6:	e00c      	b.n	8002cf2 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8002cd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cdc:	e009      	b.n	8002cf2 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8002cde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ce2:	e006      	b.n	8002cf2 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8002ce4:	2304      	movs	r3, #4
 8002ce6:	e004      	b.n	8002cf2 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8002ce8:	2304      	movs	r3, #4
 8002cea:	e002      	b.n	8002cf2 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8002cec:	2304      	movs	r3, #4
 8002cee:	e000      	b.n	8002cf2 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8002cf0:	2304      	movs	r3, #4
 8002cf2:	4a32      	ldr	r2, [pc, #200]	; (8002dbc <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8002cf4:	6093      	str	r3, [r2, #8]
 8002cf6:	e0e9      	b.n	8002ecc <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	4b31      	ldr	r3, [pc, #196]	; (8002dc4 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 8002d00:	429a      	cmp	r2, r3
 8002d02:	f240 8083 	bls.w	8002e0c <HAL_DMAEx_MultiBufferStart_IT+0xde0>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a20      	ldr	r2, [pc, #128]	; (8002d8c <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d079      	beq.n	8002e04 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a1e      	ldr	r2, [pc, #120]	; (8002d90 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d072      	beq.n	8002e00 <HAL_DMAEx_MultiBufferStart_IT+0xdd4>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a1d      	ldr	r2, [pc, #116]	; (8002d94 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d06b      	beq.n	8002dfc <HAL_DMAEx_MultiBufferStart_IT+0xdd0>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a1b      	ldr	r2, [pc, #108]	; (8002d98 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d064      	beq.n	8002df8 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a1a      	ldr	r2, [pc, #104]	; (8002d9c <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d05c      	beq.n	8002df2 <HAL_DMAEx_MultiBufferStart_IT+0xdc6>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a18      	ldr	r2, [pc, #96]	; (8002da0 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d054      	beq.n	8002dec <HAL_DMAEx_MultiBufferStart_IT+0xdc0>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a17      	ldr	r2, [pc, #92]	; (8002da4 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d04c      	beq.n	8002de6 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a15      	ldr	r2, [pc, #84]	; (8002da8 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d044      	beq.n	8002de0 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a14      	ldr	r2, [pc, #80]	; (8002dac <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d03c      	beq.n	8002dda <HAL_DMAEx_MultiBufferStart_IT+0xdae>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a12      	ldr	r2, [pc, #72]	; (8002db0 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d034      	beq.n	8002dd4 <HAL_DMAEx_MultiBufferStart_IT+0xda8>
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a11      	ldr	r2, [pc, #68]	; (8002db4 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d02c      	beq.n	8002dce <HAL_DMAEx_MultiBufferStart_IT+0xda2>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a0f      	ldr	r2, [pc, #60]	; (8002db8 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d124      	bne.n	8002dc8 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>
 8002d7e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d82:	e040      	b.n	8002e06 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8002d84:	40026000 	.word	0x40026000
 8002d88:	40026458 	.word	0x40026458
 8002d8c:	40026010 	.word	0x40026010
 8002d90:	40026410 	.word	0x40026410
 8002d94:	40026070 	.word	0x40026070
 8002d98:	40026470 	.word	0x40026470
 8002d9c:	40026028 	.word	0x40026028
 8002da0:	40026428 	.word	0x40026428
 8002da4:	40026088 	.word	0x40026088
 8002da8:	40026488 	.word	0x40026488
 8002dac:	40026040 	.word	0x40026040
 8002db0:	40026440 	.word	0x40026440
 8002db4:	400260a0 	.word	0x400260a0
 8002db8:	400264a0 	.word	0x400264a0
 8002dbc:	40026400 	.word	0x40026400
 8002dc0:	400260b8 	.word	0x400260b8
 8002dc4:	40026058 	.word	0x40026058
 8002dc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002dcc:	e01b      	b.n	8002e06 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8002dce:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002dd2:	e018      	b.n	8002e06 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8002dd4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002dd8:	e015      	b.n	8002e06 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8002dda:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002dde:	e012      	b.n	8002e06 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8002de0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002de4:	e00f      	b.n	8002e06 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8002de6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002dea:	e00c      	b.n	8002e06 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8002dec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002df0:	e009      	b.n	8002e06 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8002df2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002df6:	e006      	b.n	8002e06 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8002df8:	2304      	movs	r3, #4
 8002dfa:	e004      	b.n	8002e06 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8002dfc:	2304      	movs	r3, #4
 8002dfe:	e002      	b.n	8002e06 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8002e00:	2304      	movs	r3, #4
 8002e02:	e000      	b.n	8002e06 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8002e04:	2304      	movs	r3, #4
 8002e06:	4a8b      	ldr	r2, [pc, #556]	; (8003034 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8002e08:	60d3      	str	r3, [r2, #12]
 8002e0a:	e05f      	b.n	8002ecc <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a89      	ldr	r2, [pc, #548]	; (8003038 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d057      	beq.n	8002ec6 <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a88      	ldr	r2, [pc, #544]	; (800303c <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d050      	beq.n	8002ec2 <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a86      	ldr	r2, [pc, #536]	; (8003040 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d049      	beq.n	8002ebe <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a85      	ldr	r2, [pc, #532]	; (8003044 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d042      	beq.n	8002eba <HAL_DMAEx_MultiBufferStart_IT+0xe8e>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a83      	ldr	r2, [pc, #524]	; (8003048 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d03a      	beq.n	8002eb4 <HAL_DMAEx_MultiBufferStart_IT+0xe88>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a82      	ldr	r2, [pc, #520]	; (800304c <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d032      	beq.n	8002eae <HAL_DMAEx_MultiBufferStart_IT+0xe82>
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a80      	ldr	r2, [pc, #512]	; (8003050 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d02a      	beq.n	8002ea8 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a7f      	ldr	r2, [pc, #508]	; (8003054 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d022      	beq.n	8002ea2 <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a7d      	ldr	r2, [pc, #500]	; (8003058 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d01a      	beq.n	8002e9c <HAL_DMAEx_MultiBufferStart_IT+0xe70>
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a7c      	ldr	r2, [pc, #496]	; (800305c <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d012      	beq.n	8002e96 <HAL_DMAEx_MultiBufferStart_IT+0xe6a>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a7a      	ldr	r2, [pc, #488]	; (8003060 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d00a      	beq.n	8002e90 <HAL_DMAEx_MultiBufferStart_IT+0xe64>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a79      	ldr	r2, [pc, #484]	; (8003064 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d102      	bne.n	8002e8a <HAL_DMAEx_MultiBufferStart_IT+0xe5e>
 8002e84:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002e88:	e01e      	b.n	8002ec8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8002e8a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e8e:	e01b      	b.n	8002ec8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8002e90:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002e94:	e018      	b.n	8002ec8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8002e96:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002e9a:	e015      	b.n	8002ec8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8002e9c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002ea0:	e012      	b.n	8002ec8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8002ea2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ea6:	e00f      	b.n	8002ec8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8002ea8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002eac:	e00c      	b.n	8002ec8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8002eae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002eb2:	e009      	b.n	8002ec8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8002eb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002eb8:	e006      	b.n	8002ec8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8002eba:	2304      	movs	r3, #4
 8002ebc:	e004      	b.n	8002ec8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8002ebe:	2304      	movs	r3, #4
 8002ec0:	e002      	b.n	8002ec8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8002ec2:	2304      	movs	r3, #4
 8002ec4:	e000      	b.n	8002ec8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8002ec6:	2304      	movs	r3, #4
 8002ec8:	4a5a      	ldr	r2, [pc, #360]	; (8003034 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8002eca:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	4b65      	ldr	r3, [pc, #404]	; (8003068 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d95c      	bls.n	8002f92 <HAL_DMAEx_MultiBufferStart_IT+0xf66>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a56      	ldr	r2, [pc, #344]	; (8003038 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d053      	beq.n	8002f8a <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a55      	ldr	r2, [pc, #340]	; (800303c <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d04c      	beq.n	8002f86 <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a53      	ldr	r2, [pc, #332]	; (8003040 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d045      	beq.n	8002f82 <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a52      	ldr	r2, [pc, #328]	; (8003044 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d03e      	beq.n	8002f7e <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a50      	ldr	r2, [pc, #320]	; (8003048 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d037      	beq.n	8002f7a <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a4f      	ldr	r2, [pc, #316]	; (800304c <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d030      	beq.n	8002f76 <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a4d      	ldr	r2, [pc, #308]	; (8003050 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d029      	beq.n	8002f72 <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a4c      	ldr	r2, [pc, #304]	; (8003054 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d022      	beq.n	8002f6e <HAL_DMAEx_MultiBufferStart_IT+0xf42>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a4a      	ldr	r2, [pc, #296]	; (8003058 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d01a      	beq.n	8002f68 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a49      	ldr	r2, [pc, #292]	; (800305c <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d012      	beq.n	8002f62 <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a47      	ldr	r2, [pc, #284]	; (8003060 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d00a      	beq.n	8002f5c <HAL_DMAEx_MultiBufferStart_IT+0xf30>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a46      	ldr	r2, [pc, #280]	; (8003064 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d102      	bne.n	8002f56 <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 8002f50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f54:	e01a      	b.n	8002f8c <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8002f56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002f5a:	e017      	b.n	8002f8c <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8002f5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f60:	e014      	b.n	8002f8c <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8002f62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f66:	e011      	b.n	8002f8c <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8002f68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f6c:	e00e      	b.n	8002f8c <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8002f6e:	2340      	movs	r3, #64	; 0x40
 8002f70:	e00c      	b.n	8002f8c <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8002f72:	2340      	movs	r3, #64	; 0x40
 8002f74:	e00a      	b.n	8002f8c <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8002f76:	2340      	movs	r3, #64	; 0x40
 8002f78:	e008      	b.n	8002f8c <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8002f7a:	2340      	movs	r3, #64	; 0x40
 8002f7c:	e006      	b.n	8002f8c <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e004      	b.n	8002f8c <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8002f82:	2301      	movs	r3, #1
 8002f84:	e002      	b.n	8002f8c <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8002f86:	2301      	movs	r3, #1
 8002f88:	e000      	b.n	8002f8c <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	4a37      	ldr	r2, [pc, #220]	; (800306c <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8002f8e:	60d3      	str	r3, [r2, #12]
 8002f90:	e141      	b.n	8003216 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	461a      	mov	r2, r3
 8002f98:	4b35      	ldr	r3, [pc, #212]	; (8003070 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d97c      	bls.n	8003098 <HAL_DMAEx_MultiBufferStart_IT+0x106c>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a25      	ldr	r2, [pc, #148]	; (8003038 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d073      	beq.n	8003090 <HAL_DMAEx_MultiBufferStart_IT+0x1064>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a23      	ldr	r2, [pc, #140]	; (800303c <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d06c      	beq.n	800308c <HAL_DMAEx_MultiBufferStart_IT+0x1060>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a22      	ldr	r2, [pc, #136]	; (8003040 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d065      	beq.n	8003088 <HAL_DMAEx_MultiBufferStart_IT+0x105c>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a20      	ldr	r2, [pc, #128]	; (8003044 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d05e      	beq.n	8003084 <HAL_DMAEx_MultiBufferStart_IT+0x1058>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a1f      	ldr	r2, [pc, #124]	; (8003048 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d057      	beq.n	8003080 <HAL_DMAEx_MultiBufferStart_IT+0x1054>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a1d      	ldr	r2, [pc, #116]	; (800304c <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d050      	beq.n	800307c <HAL_DMAEx_MultiBufferStart_IT+0x1050>
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a1c      	ldr	r2, [pc, #112]	; (8003050 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d049      	beq.n	8003078 <HAL_DMAEx_MultiBufferStart_IT+0x104c>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a1a      	ldr	r2, [pc, #104]	; (8003054 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d042      	beq.n	8003074 <HAL_DMAEx_MultiBufferStart_IT+0x1048>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a19      	ldr	r2, [pc, #100]	; (8003058 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d01a      	beq.n	800302e <HAL_DMAEx_MultiBufferStart_IT+0x1002>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a17      	ldr	r2, [pc, #92]	; (800305c <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d012      	beq.n	8003028 <HAL_DMAEx_MultiBufferStart_IT+0xffc>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a16      	ldr	r2, [pc, #88]	; (8003060 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d00a      	beq.n	8003022 <HAL_DMAEx_MultiBufferStart_IT+0xff6>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a14      	ldr	r2, [pc, #80]	; (8003064 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d102      	bne.n	800301c <HAL_DMAEx_MultiBufferStart_IT+0xff0>
 8003016:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800301a:	e03a      	b.n	8003092 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800301c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003020:	e037      	b.n	8003092 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003022:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003026:	e034      	b.n	8003092 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003028:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800302c:	e031      	b.n	8003092 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800302e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003032:	e02e      	b.n	8003092 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003034:	40026000 	.word	0x40026000
 8003038:	40026010 	.word	0x40026010
 800303c:	40026410 	.word	0x40026410
 8003040:	40026070 	.word	0x40026070
 8003044:	40026470 	.word	0x40026470
 8003048:	40026028 	.word	0x40026028
 800304c:	40026428 	.word	0x40026428
 8003050:	40026088 	.word	0x40026088
 8003054:	40026488 	.word	0x40026488
 8003058:	40026040 	.word	0x40026040
 800305c:	40026440 	.word	0x40026440
 8003060:	400260a0 	.word	0x400260a0
 8003064:	400264a0 	.word	0x400264a0
 8003068:	40026458 	.word	0x40026458
 800306c:	40026400 	.word	0x40026400
 8003070:	400260b8 	.word	0x400260b8
 8003074:	2340      	movs	r3, #64	; 0x40
 8003076:	e00c      	b.n	8003092 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003078:	2340      	movs	r3, #64	; 0x40
 800307a:	e00a      	b.n	8003092 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800307c:	2340      	movs	r3, #64	; 0x40
 800307e:	e008      	b.n	8003092 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003080:	2340      	movs	r3, #64	; 0x40
 8003082:	e006      	b.n	8003092 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003084:	2301      	movs	r3, #1
 8003086:	e004      	b.n	8003092 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003088:	2301      	movs	r3, #1
 800308a:	e002      	b.n	8003092 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800308c:	2301      	movs	r3, #1
 800308e:	e000      	b.n	8003092 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003090:	2301      	movs	r3, #1
 8003092:	4a7b      	ldr	r2, [pc, #492]	; (8003280 <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 8003094:	6093      	str	r3, [r2, #8]
 8003096:	e0be      	b.n	8003216 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	461a      	mov	r2, r3
 800309e:	4b79      	ldr	r3, [pc, #484]	; (8003284 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d95c      	bls.n	800315e <HAL_DMAEx_MultiBufferStart_IT+0x1132>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a77      	ldr	r2, [pc, #476]	; (8003288 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d053      	beq.n	8003156 <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a76      	ldr	r2, [pc, #472]	; (800328c <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d04c      	beq.n	8003152 <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a74      	ldr	r2, [pc, #464]	; (8003290 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d045      	beq.n	800314e <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a73      	ldr	r2, [pc, #460]	; (8003294 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d03e      	beq.n	800314a <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a71      	ldr	r2, [pc, #452]	; (8003298 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d037      	beq.n	8003146 <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a70      	ldr	r2, [pc, #448]	; (800329c <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d030      	beq.n	8003142 <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a6e      	ldr	r2, [pc, #440]	; (80032a0 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d029      	beq.n	800313e <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a6d      	ldr	r2, [pc, #436]	; (80032a4 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d022      	beq.n	800313a <HAL_DMAEx_MultiBufferStart_IT+0x110e>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a6b      	ldr	r2, [pc, #428]	; (80032a8 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d01a      	beq.n	8003134 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a6a      	ldr	r2, [pc, #424]	; (80032ac <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d012      	beq.n	800312e <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a68      	ldr	r2, [pc, #416]	; (80032b0 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d00a      	beq.n	8003128 <HAL_DMAEx_MultiBufferStart_IT+0x10fc>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a67      	ldr	r2, [pc, #412]	; (80032b4 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d102      	bne.n	8003122 <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 800311c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003120:	e01a      	b.n	8003158 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003122:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003126:	e017      	b.n	8003158 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003128:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800312c:	e014      	b.n	8003158 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800312e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003132:	e011      	b.n	8003158 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003134:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003138:	e00e      	b.n	8003158 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800313a:	2340      	movs	r3, #64	; 0x40
 800313c:	e00c      	b.n	8003158 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800313e:	2340      	movs	r3, #64	; 0x40
 8003140:	e00a      	b.n	8003158 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003142:	2340      	movs	r3, #64	; 0x40
 8003144:	e008      	b.n	8003158 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003146:	2340      	movs	r3, #64	; 0x40
 8003148:	e006      	b.n	8003158 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800314a:	2301      	movs	r3, #1
 800314c:	e004      	b.n	8003158 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800314e:	2301      	movs	r3, #1
 8003150:	e002      	b.n	8003158 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003152:	2301      	movs	r3, #1
 8003154:	e000      	b.n	8003158 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003156:	2301      	movs	r3, #1
 8003158:	4a57      	ldr	r2, [pc, #348]	; (80032b8 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 800315a:	60d3      	str	r3, [r2, #12]
 800315c:	e05b      	b.n	8003216 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a49      	ldr	r2, [pc, #292]	; (8003288 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d053      	beq.n	8003210 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a47      	ldr	r2, [pc, #284]	; (800328c <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d04c      	beq.n	800320c <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a46      	ldr	r2, [pc, #280]	; (8003290 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d045      	beq.n	8003208 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a44      	ldr	r2, [pc, #272]	; (8003294 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d03e      	beq.n	8003204 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a43      	ldr	r2, [pc, #268]	; (8003298 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d037      	beq.n	8003200 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a41      	ldr	r2, [pc, #260]	; (800329c <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d030      	beq.n	80031fc <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a40      	ldr	r2, [pc, #256]	; (80032a0 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d029      	beq.n	80031f8 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a3e      	ldr	r2, [pc, #248]	; (80032a4 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d022      	beq.n	80031f4 <HAL_DMAEx_MultiBufferStart_IT+0x11c8>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a3d      	ldr	r2, [pc, #244]	; (80032a8 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d01a      	beq.n	80031ee <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a3b      	ldr	r2, [pc, #236]	; (80032ac <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d012      	beq.n	80031e8 <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a3a      	ldr	r2, [pc, #232]	; (80032b0 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d00a      	beq.n	80031e2 <HAL_DMAEx_MultiBufferStart_IT+0x11b6>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a38      	ldr	r2, [pc, #224]	; (80032b4 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d102      	bne.n	80031dc <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 80031d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031da:	e01a      	b.n	8003212 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80031dc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80031e0:	e017      	b.n	8003212 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80031e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031e6:	e014      	b.n	8003212 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80031e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031ec:	e011      	b.n	8003212 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80031ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031f2:	e00e      	b.n	8003212 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80031f4:	2340      	movs	r3, #64	; 0x40
 80031f6:	e00c      	b.n	8003212 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80031f8:	2340      	movs	r3, #64	; 0x40
 80031fa:	e00a      	b.n	8003212 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80031fc:	2340      	movs	r3, #64	; 0x40
 80031fe:	e008      	b.n	8003212 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003200:	2340      	movs	r3, #64	; 0x40
 8003202:	e006      	b.n	8003212 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003204:	2301      	movs	r3, #1
 8003206:	e004      	b.n	8003212 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003208:	2301      	movs	r3, #1
 800320a:	e002      	b.n	8003212 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800320c:	2301      	movs	r3, #1
 800320e:	e000      	b.n	8003212 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003210:	2301      	movs	r3, #1
 8003212:	4a29      	ldr	r2, [pc, #164]	; (80032b8 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8003214:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f042 0216 	orr.w	r2, r2, #22
 8003224:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	695a      	ldr	r2, [r3, #20]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003234:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323a:	2b00      	cmp	r3, #0
 800323c:	d103      	bne.n	8003246 <HAL_DMAEx_MultiBufferStart_IT+0x121a>
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003242:	2b00      	cmp	r3, #0
 8003244:	d007      	beq.n	8003256 <HAL_DMAEx_MultiBufferStart_IT+0x122a>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f042 0208 	orr.w	r2, r2, #8
 8003254:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f042 0201 	orr.w	r2, r2, #1
 8003264:	601a      	str	r2, [r3, #0]
 8003266:	e005      	b.n	8003274 <HAL_DMAEx_MultiBufferStart_IT+0x1248>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003270:	2302      	movs	r3, #2
 8003272:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 8003274:	7dfb      	ldrb	r3, [r7, #23]
}
 8003276:	4618      	mov	r0, r3
 8003278:	3718      	adds	r7, #24
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	40026400 	.word	0x40026400
 8003284:	40026058 	.word	0x40026058
 8003288:	40026010 	.word	0x40026010
 800328c:	40026410 	.word	0x40026410
 8003290:	40026070 	.word	0x40026070
 8003294:	40026470 	.word	0x40026470
 8003298:	40026028 	.word	0x40026028
 800329c:	40026428 	.word	0x40026428
 80032a0:	40026088 	.word	0x40026088
 80032a4:	40026488 	.word	0x40026488
 80032a8:	40026040 	.word	0x40026040
 80032ac:	40026440 	.word	0x40026440
 80032b0:	400260a0 	.word	0x400260a0
 80032b4:	400264a0 	.word	0x400264a0
 80032b8:	40026000 	.word	0x40026000

080032bc <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	4613      	mov	r3, r2
 80032c8:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 80032ca:	79fb      	ldrb	r3, [r7, #7]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d104      	bne.n	80032da <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68ba      	ldr	r2, [r7, #8]
 80032d6:	60da      	str	r2, [r3, #12]
 80032d8:	e003      	b.n	80032e2 <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68ba      	ldr	r2, [r7, #8]
 80032e0:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3714      	adds	r7, #20
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 80032f0:	b480      	push	{r7}
 80032f2:	b085      	sub	sp, #20
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]
 80032fc:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	683a      	ldr	r2, [r7, #0]
 8003304:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	2b40      	cmp	r3, #64	; 0x40
 800330c:	d108      	bne.n	8003320 <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68ba      	ldr	r2, [r7, #8]
 800331c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800331e:	e007      	b.n	8003330 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68ba      	ldr	r2, [r7, #8]
 8003326:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	60da      	str	r2, [r3, #12]
}
 8003330:	bf00      	nop
 8003332:	3714      	adds	r7, #20
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800333c:	b480      	push	{r7}
 800333e:	b089      	sub	sp, #36	; 0x24
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003346:	2300      	movs	r3, #0
 8003348:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800334a:	2300      	movs	r3, #0
 800334c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800334e:	2300      	movs	r3, #0
 8003350:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003352:	2300      	movs	r3, #0
 8003354:	61fb      	str	r3, [r7, #28]
 8003356:	e16b      	b.n	8003630 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003358:	2201      	movs	r2, #1
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	fa02 f303 	lsl.w	r3, r2, r3
 8003360:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	697a      	ldr	r2, [r7, #20]
 8003368:	4013      	ands	r3, r2
 800336a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	429a      	cmp	r2, r3
 8003372:	f040 815a 	bne.w	800362a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f003 0303 	and.w	r3, r3, #3
 800337e:	2b01      	cmp	r3, #1
 8003380:	d005      	beq.n	800338e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800338a:	2b02      	cmp	r3, #2
 800338c:	d130      	bne.n	80033f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	2203      	movs	r2, #3
 800339a:	fa02 f303 	lsl.w	r3, r2, r3
 800339e:	43db      	mvns	r3, r3
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	4013      	ands	r3, r2
 80033a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	68da      	ldr	r2, [r3, #12]
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	fa02 f303 	lsl.w	r3, r2, r3
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	69ba      	ldr	r2, [r7, #24]
 80033bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033c4:	2201      	movs	r2, #1
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	fa02 f303 	lsl.w	r3, r2, r3
 80033cc:	43db      	mvns	r3, r3
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	4013      	ands	r3, r2
 80033d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	091b      	lsrs	r3, r3, #4
 80033da:	f003 0201 	and.w	r2, r3, #1
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	fa02 f303 	lsl.w	r3, r2, r3
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f003 0303 	and.w	r3, r3, #3
 80033f8:	2b03      	cmp	r3, #3
 80033fa:	d017      	beq.n	800342c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	005b      	lsls	r3, r3, #1
 8003406:	2203      	movs	r2, #3
 8003408:	fa02 f303 	lsl.w	r3, r2, r3
 800340c:	43db      	mvns	r3, r3
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	4013      	ands	r3, r2
 8003412:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	689a      	ldr	r2, [r3, #8]
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	4313      	orrs	r3, r2
 8003424:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f003 0303 	and.w	r3, r3, #3
 8003434:	2b02      	cmp	r3, #2
 8003436:	d123      	bne.n	8003480 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	08da      	lsrs	r2, r3, #3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	3208      	adds	r2, #8
 8003440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003444:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	f003 0307 	and.w	r3, r3, #7
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	220f      	movs	r2, #15
 8003450:	fa02 f303 	lsl.w	r3, r2, r3
 8003454:	43db      	mvns	r3, r3
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	4013      	ands	r3, r2
 800345a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	691a      	ldr	r2, [r3, #16]
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	f003 0307 	and.w	r3, r3, #7
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	fa02 f303 	lsl.w	r3, r2, r3
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	4313      	orrs	r3, r2
 8003470:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	08da      	lsrs	r2, r3, #3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	3208      	adds	r2, #8
 800347a:	69b9      	ldr	r1, [r7, #24]
 800347c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	2203      	movs	r2, #3
 800348c:	fa02 f303 	lsl.w	r3, r2, r3
 8003490:	43db      	mvns	r3, r3
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	4013      	ands	r3, r2
 8003496:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f003 0203 	and.w	r2, r3, #3
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	005b      	lsls	r3, r3, #1
 80034a4:	fa02 f303 	lsl.w	r3, r2, r3
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f000 80b4 	beq.w	800362a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034c2:	2300      	movs	r3, #0
 80034c4:	60fb      	str	r3, [r7, #12]
 80034c6:	4b60      	ldr	r3, [pc, #384]	; (8003648 <HAL_GPIO_Init+0x30c>)
 80034c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ca:	4a5f      	ldr	r2, [pc, #380]	; (8003648 <HAL_GPIO_Init+0x30c>)
 80034cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034d0:	6453      	str	r3, [r2, #68]	; 0x44
 80034d2:	4b5d      	ldr	r3, [pc, #372]	; (8003648 <HAL_GPIO_Init+0x30c>)
 80034d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034da:	60fb      	str	r3, [r7, #12]
 80034dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034de:	4a5b      	ldr	r2, [pc, #364]	; (800364c <HAL_GPIO_Init+0x310>)
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	089b      	lsrs	r3, r3, #2
 80034e4:	3302      	adds	r3, #2
 80034e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	f003 0303 	and.w	r3, r3, #3
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	220f      	movs	r2, #15
 80034f6:	fa02 f303 	lsl.w	r3, r2, r3
 80034fa:	43db      	mvns	r3, r3
 80034fc:	69ba      	ldr	r2, [r7, #24]
 80034fe:	4013      	ands	r3, r2
 8003500:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a52      	ldr	r2, [pc, #328]	; (8003650 <HAL_GPIO_Init+0x314>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d02b      	beq.n	8003562 <HAL_GPIO_Init+0x226>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a51      	ldr	r2, [pc, #324]	; (8003654 <HAL_GPIO_Init+0x318>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d025      	beq.n	800355e <HAL_GPIO_Init+0x222>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a50      	ldr	r2, [pc, #320]	; (8003658 <HAL_GPIO_Init+0x31c>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d01f      	beq.n	800355a <HAL_GPIO_Init+0x21e>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a4f      	ldr	r2, [pc, #316]	; (800365c <HAL_GPIO_Init+0x320>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d019      	beq.n	8003556 <HAL_GPIO_Init+0x21a>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a4e      	ldr	r2, [pc, #312]	; (8003660 <HAL_GPIO_Init+0x324>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d013      	beq.n	8003552 <HAL_GPIO_Init+0x216>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a4d      	ldr	r2, [pc, #308]	; (8003664 <HAL_GPIO_Init+0x328>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d00d      	beq.n	800354e <HAL_GPIO_Init+0x212>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a4c      	ldr	r2, [pc, #304]	; (8003668 <HAL_GPIO_Init+0x32c>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d007      	beq.n	800354a <HAL_GPIO_Init+0x20e>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a4b      	ldr	r2, [pc, #300]	; (800366c <HAL_GPIO_Init+0x330>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d101      	bne.n	8003546 <HAL_GPIO_Init+0x20a>
 8003542:	2307      	movs	r3, #7
 8003544:	e00e      	b.n	8003564 <HAL_GPIO_Init+0x228>
 8003546:	2308      	movs	r3, #8
 8003548:	e00c      	b.n	8003564 <HAL_GPIO_Init+0x228>
 800354a:	2306      	movs	r3, #6
 800354c:	e00a      	b.n	8003564 <HAL_GPIO_Init+0x228>
 800354e:	2305      	movs	r3, #5
 8003550:	e008      	b.n	8003564 <HAL_GPIO_Init+0x228>
 8003552:	2304      	movs	r3, #4
 8003554:	e006      	b.n	8003564 <HAL_GPIO_Init+0x228>
 8003556:	2303      	movs	r3, #3
 8003558:	e004      	b.n	8003564 <HAL_GPIO_Init+0x228>
 800355a:	2302      	movs	r3, #2
 800355c:	e002      	b.n	8003564 <HAL_GPIO_Init+0x228>
 800355e:	2301      	movs	r3, #1
 8003560:	e000      	b.n	8003564 <HAL_GPIO_Init+0x228>
 8003562:	2300      	movs	r3, #0
 8003564:	69fa      	ldr	r2, [r7, #28]
 8003566:	f002 0203 	and.w	r2, r2, #3
 800356a:	0092      	lsls	r2, r2, #2
 800356c:	4093      	lsls	r3, r2
 800356e:	69ba      	ldr	r2, [r7, #24]
 8003570:	4313      	orrs	r3, r2
 8003572:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003574:	4935      	ldr	r1, [pc, #212]	; (800364c <HAL_GPIO_Init+0x310>)
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	089b      	lsrs	r3, r3, #2
 800357a:	3302      	adds	r3, #2
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003582:	4b3b      	ldr	r3, [pc, #236]	; (8003670 <HAL_GPIO_Init+0x334>)
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	43db      	mvns	r3, r3
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	4013      	ands	r3, r2
 8003590:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d003      	beq.n	80035a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800359e:	69ba      	ldr	r2, [r7, #24]
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035a6:	4a32      	ldr	r2, [pc, #200]	; (8003670 <HAL_GPIO_Init+0x334>)
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035ac:	4b30      	ldr	r3, [pc, #192]	; (8003670 <HAL_GPIO_Init+0x334>)
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	43db      	mvns	r3, r3
 80035b6:	69ba      	ldr	r2, [r7, #24]
 80035b8:	4013      	ands	r3, r2
 80035ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d003      	beq.n	80035d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035d0:	4a27      	ldr	r2, [pc, #156]	; (8003670 <HAL_GPIO_Init+0x334>)
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80035d6:	4b26      	ldr	r3, [pc, #152]	; (8003670 <HAL_GPIO_Init+0x334>)
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	43db      	mvns	r3, r3
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	4013      	ands	r3, r2
 80035e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d003      	beq.n	80035fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035fa:	4a1d      	ldr	r2, [pc, #116]	; (8003670 <HAL_GPIO_Init+0x334>)
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003600:	4b1b      	ldr	r3, [pc, #108]	; (8003670 <HAL_GPIO_Init+0x334>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	43db      	mvns	r3, r3
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	4013      	ands	r3, r2
 800360e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d003      	beq.n	8003624 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	4313      	orrs	r3, r2
 8003622:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003624:	4a12      	ldr	r2, [pc, #72]	; (8003670 <HAL_GPIO_Init+0x334>)
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	3301      	adds	r3, #1
 800362e:	61fb      	str	r3, [r7, #28]
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	2b0f      	cmp	r3, #15
 8003634:	f67f ae90 	bls.w	8003358 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003638:	bf00      	nop
 800363a:	bf00      	nop
 800363c:	3724      	adds	r7, #36	; 0x24
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	40023800 	.word	0x40023800
 800364c:	40013800 	.word	0x40013800
 8003650:	40020000 	.word	0x40020000
 8003654:	40020400 	.word	0x40020400
 8003658:	40020800 	.word	0x40020800
 800365c:	40020c00 	.word	0x40020c00
 8003660:	40021000 	.word	0x40021000
 8003664:	40021400 	.word	0x40021400
 8003668:	40021800 	.word	0x40021800
 800366c:	40021c00 	.word	0x40021c00
 8003670:	40013c00 	.word	0x40013c00

08003674 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e12b      	b.n	80038de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d106      	bne.n	80036a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f7fd fc88 	bl	8000fb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2224      	movs	r2, #36	; 0x24
 80036a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 0201 	bic.w	r2, r2, #1
 80036b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036d8:	f001 fdca 	bl	8005270 <HAL_RCC_GetPCLK1Freq>
 80036dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	4a81      	ldr	r2, [pc, #516]	; (80038e8 <HAL_I2C_Init+0x274>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d807      	bhi.n	80036f8 <HAL_I2C_Init+0x84>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	4a80      	ldr	r2, [pc, #512]	; (80038ec <HAL_I2C_Init+0x278>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	bf94      	ite	ls
 80036f0:	2301      	movls	r3, #1
 80036f2:	2300      	movhi	r3, #0
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	e006      	b.n	8003706 <HAL_I2C_Init+0x92>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	4a7d      	ldr	r2, [pc, #500]	; (80038f0 <HAL_I2C_Init+0x27c>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	bf94      	ite	ls
 8003700:	2301      	movls	r3, #1
 8003702:	2300      	movhi	r3, #0
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e0e7      	b.n	80038de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	4a78      	ldr	r2, [pc, #480]	; (80038f4 <HAL_I2C_Init+0x280>)
 8003712:	fba2 2303 	umull	r2, r3, r2, r3
 8003716:	0c9b      	lsrs	r3, r3, #18
 8003718:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68ba      	ldr	r2, [r7, #8]
 800372a:	430a      	orrs	r2, r1
 800372c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	6a1b      	ldr	r3, [r3, #32]
 8003734:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	4a6a      	ldr	r2, [pc, #424]	; (80038e8 <HAL_I2C_Init+0x274>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d802      	bhi.n	8003748 <HAL_I2C_Init+0xd4>
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	3301      	adds	r3, #1
 8003746:	e009      	b.n	800375c <HAL_I2C_Init+0xe8>
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800374e:	fb02 f303 	mul.w	r3, r2, r3
 8003752:	4a69      	ldr	r2, [pc, #420]	; (80038f8 <HAL_I2C_Init+0x284>)
 8003754:	fba2 2303 	umull	r2, r3, r2, r3
 8003758:	099b      	lsrs	r3, r3, #6
 800375a:	3301      	adds	r3, #1
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	6812      	ldr	r2, [r2, #0]
 8003760:	430b      	orrs	r3, r1
 8003762:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	69db      	ldr	r3, [r3, #28]
 800376a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800376e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	495c      	ldr	r1, [pc, #368]	; (80038e8 <HAL_I2C_Init+0x274>)
 8003778:	428b      	cmp	r3, r1
 800377a:	d819      	bhi.n	80037b0 <HAL_I2C_Init+0x13c>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	1e59      	subs	r1, r3, #1
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	005b      	lsls	r3, r3, #1
 8003786:	fbb1 f3f3 	udiv	r3, r1, r3
 800378a:	1c59      	adds	r1, r3, #1
 800378c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003790:	400b      	ands	r3, r1
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00a      	beq.n	80037ac <HAL_I2C_Init+0x138>
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	1e59      	subs	r1, r3, #1
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80037a4:	3301      	adds	r3, #1
 80037a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037aa:	e051      	b.n	8003850 <HAL_I2C_Init+0x1dc>
 80037ac:	2304      	movs	r3, #4
 80037ae:	e04f      	b.n	8003850 <HAL_I2C_Init+0x1dc>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d111      	bne.n	80037dc <HAL_I2C_Init+0x168>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	1e58      	subs	r0, r3, #1
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6859      	ldr	r1, [r3, #4]
 80037c0:	460b      	mov	r3, r1
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	440b      	add	r3, r1
 80037c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80037ca:	3301      	adds	r3, #1
 80037cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	bf0c      	ite	eq
 80037d4:	2301      	moveq	r3, #1
 80037d6:	2300      	movne	r3, #0
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	e012      	b.n	8003802 <HAL_I2C_Init+0x18e>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	1e58      	subs	r0, r3, #1
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6859      	ldr	r1, [r3, #4]
 80037e4:	460b      	mov	r3, r1
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	440b      	add	r3, r1
 80037ea:	0099      	lsls	r1, r3, #2
 80037ec:	440b      	add	r3, r1
 80037ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80037f2:	3301      	adds	r3, #1
 80037f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	bf0c      	ite	eq
 80037fc:	2301      	moveq	r3, #1
 80037fe:	2300      	movne	r3, #0
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <HAL_I2C_Init+0x196>
 8003806:	2301      	movs	r3, #1
 8003808:	e022      	b.n	8003850 <HAL_I2C_Init+0x1dc>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d10e      	bne.n	8003830 <HAL_I2C_Init+0x1bc>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	1e58      	subs	r0, r3, #1
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6859      	ldr	r1, [r3, #4]
 800381a:	460b      	mov	r3, r1
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	440b      	add	r3, r1
 8003820:	fbb0 f3f3 	udiv	r3, r0, r3
 8003824:	3301      	adds	r3, #1
 8003826:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800382a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800382e:	e00f      	b.n	8003850 <HAL_I2C_Init+0x1dc>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	1e58      	subs	r0, r3, #1
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6859      	ldr	r1, [r3, #4]
 8003838:	460b      	mov	r3, r1
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	440b      	add	r3, r1
 800383e:	0099      	lsls	r1, r3, #2
 8003840:	440b      	add	r3, r1
 8003842:	fbb0 f3f3 	udiv	r3, r0, r3
 8003846:	3301      	adds	r3, #1
 8003848:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800384c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003850:	6879      	ldr	r1, [r7, #4]
 8003852:	6809      	ldr	r1, [r1, #0]
 8003854:	4313      	orrs	r3, r2
 8003856:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	69da      	ldr	r2, [r3, #28]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a1b      	ldr	r3, [r3, #32]
 800386a:	431a      	orrs	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	430a      	orrs	r2, r1
 8003872:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800387e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	6911      	ldr	r1, [r2, #16]
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	68d2      	ldr	r2, [r2, #12]
 800388a:	4311      	orrs	r1, r2
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	6812      	ldr	r2, [r2, #0]
 8003890:	430b      	orrs	r3, r1
 8003892:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	695a      	ldr	r2, [r3, #20]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	431a      	orrs	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	430a      	orrs	r2, r1
 80038ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f042 0201 	orr.w	r2, r2, #1
 80038be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2220      	movs	r2, #32
 80038ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	000186a0 	.word	0x000186a0
 80038ec:	001e847f 	.word	0x001e847f
 80038f0:	003d08ff 	.word	0x003d08ff
 80038f4:	431bde83 	.word	0x431bde83
 80038f8:	10624dd3 	.word	0x10624dd3

080038fc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b088      	sub	sp, #32
 8003900:	af02      	add	r7, sp, #8
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	607a      	str	r2, [r7, #4]
 8003906:	461a      	mov	r2, r3
 8003908:	460b      	mov	r3, r1
 800390a:	817b      	strh	r3, [r7, #10]
 800390c:	4613      	mov	r3, r2
 800390e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003910:	f7fd fc76 	bl	8001200 <HAL_GetTick>
 8003914:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b20      	cmp	r3, #32
 8003920:	f040 80e0 	bne.w	8003ae4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	9300      	str	r3, [sp, #0]
 8003928:	2319      	movs	r3, #25
 800392a:	2201      	movs	r2, #1
 800392c:	4970      	ldr	r1, [pc, #448]	; (8003af0 <HAL_I2C_Master_Transmit+0x1f4>)
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	f000 fde8 	bl	8004504 <I2C_WaitOnFlagUntilTimeout>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800393a:	2302      	movs	r3, #2
 800393c:	e0d3      	b.n	8003ae6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003944:	2b01      	cmp	r3, #1
 8003946:	d101      	bne.n	800394c <HAL_I2C_Master_Transmit+0x50>
 8003948:	2302      	movs	r3, #2
 800394a:	e0cc      	b.n	8003ae6 <HAL_I2C_Master_Transmit+0x1ea>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b01      	cmp	r3, #1
 8003960:	d007      	beq.n	8003972 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f042 0201 	orr.w	r2, r2, #1
 8003970:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003980:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2221      	movs	r2, #33	; 0x21
 8003986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2210      	movs	r2, #16
 800398e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	893a      	ldrh	r2, [r7, #8]
 80039a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	4a50      	ldr	r2, [pc, #320]	; (8003af4 <HAL_I2C_Master_Transmit+0x1f8>)
 80039b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80039b4:	8979      	ldrh	r1, [r7, #10]
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	6a3a      	ldr	r2, [r7, #32]
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f000 fbbc 	bl	8004138 <I2C_MasterRequestWrite>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e08d      	b.n	8003ae6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039ca:	2300      	movs	r3, #0
 80039cc:	613b      	str	r3, [r7, #16]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	695b      	ldr	r3, [r3, #20]
 80039d4:	613b      	str	r3, [r7, #16]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	613b      	str	r3, [r7, #16]
 80039de:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80039e0:	e066      	b.n	8003ab0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039e2:	697a      	ldr	r2, [r7, #20]
 80039e4:	6a39      	ldr	r1, [r7, #32]
 80039e6:	68f8      	ldr	r0, [r7, #12]
 80039e8:	f000 fe62 	bl	80046b0 <I2C_WaitOnTXEFlagUntilTimeout>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00d      	beq.n	8003a0e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f6:	2b04      	cmp	r3, #4
 80039f8:	d107      	bne.n	8003a0a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a08:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e06b      	b.n	8003ae6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a12:	781a      	ldrb	r2, [r3, #0]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1e:	1c5a      	adds	r2, r3, #1
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	b29a      	uxth	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a36:	3b01      	subs	r3, #1
 8003a38:	b29a      	uxth	r2, r3
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	695b      	ldr	r3, [r3, #20]
 8003a44:	f003 0304 	and.w	r3, r3, #4
 8003a48:	2b04      	cmp	r3, #4
 8003a4a:	d11b      	bne.n	8003a84 <HAL_I2C_Master_Transmit+0x188>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d017      	beq.n	8003a84 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a58:	781a      	ldrb	r2, [r3, #0]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a64:	1c5a      	adds	r2, r3, #1
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	3b01      	subs	r3, #1
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	b29a      	uxth	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	6a39      	ldr	r1, [r7, #32]
 8003a88:	68f8      	ldr	r0, [r7, #12]
 8003a8a:	f000 fe52 	bl	8004732 <I2C_WaitOnBTFFlagUntilTimeout>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d00d      	beq.n	8003ab0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a98:	2b04      	cmp	r3, #4
 8003a9a:	d107      	bne.n	8003aac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aaa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e01a      	b.n	8003ae6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d194      	bne.n	80039e2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ac6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2220      	movs	r2, #32
 8003acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	e000      	b.n	8003ae6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003ae4:	2302      	movs	r3, #2
  }
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3718      	adds	r7, #24
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	00100002 	.word	0x00100002
 8003af4:	ffff0000 	.word	0xffff0000

08003af8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b08c      	sub	sp, #48	; 0x30
 8003afc:	af02      	add	r7, sp, #8
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	607a      	str	r2, [r7, #4]
 8003b02:	461a      	mov	r2, r3
 8003b04:	460b      	mov	r3, r1
 8003b06:	817b      	strh	r3, [r7, #10]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b0c:	f7fd fb78 	bl	8001200 <HAL_GetTick>
 8003b10:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b20      	cmp	r3, #32
 8003b1c:	f040 820b 	bne.w	8003f36 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b22:	9300      	str	r3, [sp, #0]
 8003b24:	2319      	movs	r3, #25
 8003b26:	2201      	movs	r2, #1
 8003b28:	497c      	ldr	r1, [pc, #496]	; (8003d1c <HAL_I2C_Master_Receive+0x224>)
 8003b2a:	68f8      	ldr	r0, [r7, #12]
 8003b2c:	f000 fcea 	bl	8004504 <I2C_WaitOnFlagUntilTimeout>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d001      	beq.n	8003b3a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003b36:	2302      	movs	r3, #2
 8003b38:	e1fe      	b.n	8003f38 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d101      	bne.n	8003b48 <HAL_I2C_Master_Receive+0x50>
 8003b44:	2302      	movs	r3, #2
 8003b46:	e1f7      	b.n	8003f38 <HAL_I2C_Master_Receive+0x440>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d007      	beq.n	8003b6e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f042 0201 	orr.w	r2, r2, #1
 8003b6c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b7c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2222      	movs	r2, #34	; 0x22
 8003b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2210      	movs	r2, #16
 8003b8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2200      	movs	r2, #0
 8003b92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	893a      	ldrh	r2, [r7, #8]
 8003b9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	4a5c      	ldr	r2, [pc, #368]	; (8003d20 <HAL_I2C_Master_Receive+0x228>)
 8003bae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003bb0:	8979      	ldrh	r1, [r7, #10]
 8003bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	f000 fb40 	bl	800423c <I2C_MasterRequestRead>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e1b8      	b.n	8003f38 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d113      	bne.n	8003bf6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bce:	2300      	movs	r3, #0
 8003bd0:	623b      	str	r3, [r7, #32]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	695b      	ldr	r3, [r3, #20]
 8003bd8:	623b      	str	r3, [r7, #32]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	623b      	str	r3, [r7, #32]
 8003be2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bf2:	601a      	str	r2, [r3, #0]
 8003bf4:	e18c      	b.n	8003f10 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d11b      	bne.n	8003c36 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c0e:	2300      	movs	r3, #0
 8003c10:	61fb      	str	r3, [r7, #28]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	695b      	ldr	r3, [r3, #20]
 8003c18:	61fb      	str	r3, [r7, #28]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	61fb      	str	r3, [r7, #28]
 8003c22:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c32:	601a      	str	r2, [r3, #0]
 8003c34:	e16c      	b.n	8003f10 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d11b      	bne.n	8003c76 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c4c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c5e:	2300      	movs	r3, #0
 8003c60:	61bb      	str	r3, [r7, #24]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	695b      	ldr	r3, [r3, #20]
 8003c68:	61bb      	str	r3, [r7, #24]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	61bb      	str	r3, [r7, #24]
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	e14c      	b.n	8003f10 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c86:	2300      	movs	r3, #0
 8003c88:	617b      	str	r3, [r7, #20]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	695b      	ldr	r3, [r3, #20]
 8003c90:	617b      	str	r3, [r7, #20]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	617b      	str	r3, [r7, #20]
 8003c9a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003c9c:	e138      	b.n	8003f10 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca2:	2b03      	cmp	r3, #3
 8003ca4:	f200 80f1 	bhi.w	8003e8a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d123      	bne.n	8003cf8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cb2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003cb4:	68f8      	ldr	r0, [r7, #12]
 8003cb6:	f000 fd7d 	bl	80047b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d001      	beq.n	8003cc4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e139      	b.n	8003f38 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	691a      	ldr	r2, [r3, #16]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cce:	b2d2      	uxtb	r2, r2
 8003cd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd6:	1c5a      	adds	r2, r3, #1
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003cf6:	e10b      	b.n	8003f10 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d14e      	bne.n	8003d9e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d02:	9300      	str	r3, [sp, #0]
 8003d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d06:	2200      	movs	r2, #0
 8003d08:	4906      	ldr	r1, [pc, #24]	; (8003d24 <HAL_I2C_Master_Receive+0x22c>)
 8003d0a:	68f8      	ldr	r0, [r7, #12]
 8003d0c:	f000 fbfa 	bl	8004504 <I2C_WaitOnFlagUntilTimeout>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d008      	beq.n	8003d28 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e10e      	b.n	8003f38 <HAL_I2C_Master_Receive+0x440>
 8003d1a:	bf00      	nop
 8003d1c:	00100002 	.word	0x00100002
 8003d20:	ffff0000 	.word	0xffff0000
 8003d24:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	691a      	ldr	r2, [r3, #16]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d42:	b2d2      	uxtb	r2, r2
 8003d44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4a:	1c5a      	adds	r2, r3, #1
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d54:	3b01      	subs	r3, #1
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	3b01      	subs	r3, #1
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	691a      	ldr	r2, [r3, #16]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d74:	b2d2      	uxtb	r2, r2
 8003d76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7c:	1c5a      	adds	r2, r3, #1
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d86:	3b01      	subs	r3, #1
 8003d88:	b29a      	uxth	r2, r3
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	3b01      	subs	r3, #1
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d9c:	e0b8      	b.n	8003f10 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da4:	2200      	movs	r2, #0
 8003da6:	4966      	ldr	r1, [pc, #408]	; (8003f40 <HAL_I2C_Master_Receive+0x448>)
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f000 fbab 	bl	8004504 <I2C_WaitOnFlagUntilTimeout>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d001      	beq.n	8003db8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e0bf      	b.n	8003f38 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dc6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	691a      	ldr	r2, [r3, #16]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd2:	b2d2      	uxtb	r2, r2
 8003dd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dda:	1c5a      	adds	r2, r3, #1
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003de4:	3b01      	subs	r3, #1
 8003de6:	b29a      	uxth	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	3b01      	subs	r3, #1
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfc:	9300      	str	r3, [sp, #0]
 8003dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e00:	2200      	movs	r2, #0
 8003e02:	494f      	ldr	r1, [pc, #316]	; (8003f40 <HAL_I2C_Master_Receive+0x448>)
 8003e04:	68f8      	ldr	r0, [r7, #12]
 8003e06:	f000 fb7d 	bl	8004504 <I2C_WaitOnFlagUntilTimeout>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d001      	beq.n	8003e14 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e091      	b.n	8003f38 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	691a      	ldr	r2, [r3, #16]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2e:	b2d2      	uxtb	r2, r2
 8003e30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e36:	1c5a      	adds	r2, r3, #1
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e40:	3b01      	subs	r3, #1
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	691a      	ldr	r2, [r3, #16]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e60:	b2d2      	uxtb	r2, r2
 8003e62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e68:	1c5a      	adds	r2, r3, #1
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e72:	3b01      	subs	r3, #1
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	3b01      	subs	r3, #1
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e88:	e042      	b.n	8003f10 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e8e:	68f8      	ldr	r0, [r7, #12]
 8003e90:	f000 fc90 	bl	80047b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d001      	beq.n	8003e9e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e04c      	b.n	8003f38 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	691a      	ldr	r2, [r3, #16]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea8:	b2d2      	uxtb	r2, r2
 8003eaa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb0:	1c5a      	adds	r2, r3, #1
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	b29a      	uxth	r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	b29a      	uxth	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	f003 0304 	and.w	r3, r3, #4
 8003eda:	2b04      	cmp	r3, #4
 8003edc:	d118      	bne.n	8003f10 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	691a      	ldr	r2, [r3, #16]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee8:	b2d2      	uxtb	r2, r2
 8003eea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef0:	1c5a      	adds	r2, r3, #1
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003efa:	3b01      	subs	r3, #1
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	b29a      	uxth	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f47f aec2 	bne.w	8003c9e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2220      	movs	r2, #32
 8003f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f32:	2300      	movs	r3, #0
 8003f34:	e000      	b.n	8003f38 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003f36:	2302      	movs	r3, #2
  }
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3728      	adds	r7, #40	; 0x28
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	00010004 	.word	0x00010004

08003f44 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b088      	sub	sp, #32
 8003f48:	af02      	add	r7, sp, #8
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	4608      	mov	r0, r1
 8003f4e:	4611      	mov	r1, r2
 8003f50:	461a      	mov	r2, r3
 8003f52:	4603      	mov	r3, r0
 8003f54:	817b      	strh	r3, [r7, #10]
 8003f56:	460b      	mov	r3, r1
 8003f58:	813b      	strh	r3, [r7, #8]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f5e:	f7fd f94f 	bl	8001200 <HAL_GetTick>
 8003f62:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	2b20      	cmp	r3, #32
 8003f6e:	f040 80d9 	bne.w	8004124 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	9300      	str	r3, [sp, #0]
 8003f76:	2319      	movs	r3, #25
 8003f78:	2201      	movs	r2, #1
 8003f7a:	496d      	ldr	r1, [pc, #436]	; (8004130 <HAL_I2C_Mem_Write+0x1ec>)
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	f000 fac1 	bl	8004504 <I2C_WaitOnFlagUntilTimeout>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d001      	beq.n	8003f8c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003f88:	2302      	movs	r3, #2
 8003f8a:	e0cc      	b.n	8004126 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d101      	bne.n	8003f9a <HAL_I2C_Mem_Write+0x56>
 8003f96:	2302      	movs	r3, #2
 8003f98:	e0c5      	b.n	8004126 <HAL_I2C_Mem_Write+0x1e2>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0301 	and.w	r3, r3, #1
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d007      	beq.n	8003fc0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f042 0201 	orr.w	r2, r2, #1
 8003fbe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2221      	movs	r2, #33	; 0x21
 8003fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2240      	movs	r2, #64	; 0x40
 8003fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6a3a      	ldr	r2, [r7, #32]
 8003fea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003ff0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	4a4d      	ldr	r2, [pc, #308]	; (8004134 <HAL_I2C_Mem_Write+0x1f0>)
 8004000:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004002:	88f8      	ldrh	r0, [r7, #6]
 8004004:	893a      	ldrh	r2, [r7, #8]
 8004006:	8979      	ldrh	r1, [r7, #10]
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	9301      	str	r3, [sp, #4]
 800400c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800400e:	9300      	str	r3, [sp, #0]
 8004010:	4603      	mov	r3, r0
 8004012:	68f8      	ldr	r0, [r7, #12]
 8004014:	f000 f9e0 	bl	80043d8 <I2C_RequestMemoryWrite>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d052      	beq.n	80040c4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e081      	b.n	8004126 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004026:	68f8      	ldr	r0, [r7, #12]
 8004028:	f000 fb42 	bl	80046b0 <I2C_WaitOnTXEFlagUntilTimeout>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00d      	beq.n	800404e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004036:	2b04      	cmp	r3, #4
 8004038:	d107      	bne.n	800404a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004048:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e06b      	b.n	8004126 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004052:	781a      	ldrb	r2, [r3, #0]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405e:	1c5a      	adds	r2, r3, #1
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004068:	3b01      	subs	r3, #1
 800406a:	b29a      	uxth	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004074:	b29b      	uxth	r3, r3
 8004076:	3b01      	subs	r3, #1
 8004078:	b29a      	uxth	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	695b      	ldr	r3, [r3, #20]
 8004084:	f003 0304 	and.w	r3, r3, #4
 8004088:	2b04      	cmp	r3, #4
 800408a:	d11b      	bne.n	80040c4 <HAL_I2C_Mem_Write+0x180>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004090:	2b00      	cmp	r3, #0
 8004092:	d017      	beq.n	80040c4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004098:	781a      	ldrb	r2, [r3, #0]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a4:	1c5a      	adds	r2, r3, #1
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ae:	3b01      	subs	r3, #1
 80040b0:	b29a      	uxth	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	3b01      	subs	r3, #1
 80040be:	b29a      	uxth	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1aa      	bne.n	8004022 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040d0:	68f8      	ldr	r0, [r7, #12]
 80040d2:	f000 fb2e 	bl	8004732 <I2C_WaitOnBTFFlagUntilTimeout>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00d      	beq.n	80040f8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e0:	2b04      	cmp	r3, #4
 80040e2:	d107      	bne.n	80040f4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040f2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e016      	b.n	8004126 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004106:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2220      	movs	r2, #32
 800410c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2200      	movs	r2, #0
 800411c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004120:	2300      	movs	r3, #0
 8004122:	e000      	b.n	8004126 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004124:	2302      	movs	r3, #2
  }
}
 8004126:	4618      	mov	r0, r3
 8004128:	3718      	adds	r7, #24
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	00100002 	.word	0x00100002
 8004134:	ffff0000 	.word	0xffff0000

08004138 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b088      	sub	sp, #32
 800413c:	af02      	add	r7, sp, #8
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	607a      	str	r2, [r7, #4]
 8004142:	603b      	str	r3, [r7, #0]
 8004144:	460b      	mov	r3, r1
 8004146:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	2b08      	cmp	r3, #8
 8004152:	d006      	beq.n	8004162 <I2C_MasterRequestWrite+0x2a>
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d003      	beq.n	8004162 <I2C_MasterRequestWrite+0x2a>
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004160:	d108      	bne.n	8004174 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004170:	601a      	str	r2, [r3, #0]
 8004172:	e00b      	b.n	800418c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004178:	2b12      	cmp	r3, #18
 800417a:	d107      	bne.n	800418c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800418a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	9300      	str	r3, [sp, #0]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f000 f9b3 	bl	8004504 <I2C_WaitOnFlagUntilTimeout>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00d      	beq.n	80041c0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041b2:	d103      	bne.n	80041bc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e035      	b.n	800422c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041c8:	d108      	bne.n	80041dc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041ca:	897b      	ldrh	r3, [r7, #10]
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	461a      	mov	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80041d8:	611a      	str	r2, [r3, #16]
 80041da:	e01b      	b.n	8004214 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80041dc:	897b      	ldrh	r3, [r7, #10]
 80041de:	11db      	asrs	r3, r3, #7
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	f003 0306 	and.w	r3, r3, #6
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	f063 030f 	orn	r3, r3, #15
 80041ec:	b2da      	uxtb	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	490e      	ldr	r1, [pc, #56]	; (8004234 <I2C_MasterRequestWrite+0xfc>)
 80041fa:	68f8      	ldr	r0, [r7, #12]
 80041fc:	f000 f9d9 	bl	80045b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d001      	beq.n	800420a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e010      	b.n	800422c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800420a:	897b      	ldrh	r3, [r7, #10]
 800420c:	b2da      	uxtb	r2, r3
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	4907      	ldr	r1, [pc, #28]	; (8004238 <I2C_MasterRequestWrite+0x100>)
 800421a:	68f8      	ldr	r0, [r7, #12]
 800421c:	f000 f9c9 	bl	80045b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d001      	beq.n	800422a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e000      	b.n	800422c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	3718      	adds	r7, #24
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	00010008 	.word	0x00010008
 8004238:	00010002 	.word	0x00010002

0800423c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b088      	sub	sp, #32
 8004240:	af02      	add	r7, sp, #8
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	607a      	str	r2, [r7, #4]
 8004246:	603b      	str	r3, [r7, #0]
 8004248:	460b      	mov	r3, r1
 800424a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004250:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004260:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	2b08      	cmp	r3, #8
 8004266:	d006      	beq.n	8004276 <I2C_MasterRequestRead+0x3a>
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d003      	beq.n	8004276 <I2C_MasterRequestRead+0x3a>
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004274:	d108      	bne.n	8004288 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004284:	601a      	str	r2, [r3, #0]
 8004286:	e00b      	b.n	80042a0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428c:	2b11      	cmp	r3, #17
 800428e:	d107      	bne.n	80042a0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800429e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	9300      	str	r3, [sp, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042ac:	68f8      	ldr	r0, [r7, #12]
 80042ae:	f000 f929 	bl	8004504 <I2C_WaitOnFlagUntilTimeout>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00d      	beq.n	80042d4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042c6:	d103      	bne.n	80042d0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e079      	b.n	80043c8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042dc:	d108      	bne.n	80042f0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80042de:	897b      	ldrh	r3, [r7, #10]
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	f043 0301 	orr.w	r3, r3, #1
 80042e6:	b2da      	uxtb	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	611a      	str	r2, [r3, #16]
 80042ee:	e05f      	b.n	80043b0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80042f0:	897b      	ldrh	r3, [r7, #10]
 80042f2:	11db      	asrs	r3, r3, #7
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	f003 0306 	and.w	r3, r3, #6
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	f063 030f 	orn	r3, r3, #15
 8004300:	b2da      	uxtb	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	4930      	ldr	r1, [pc, #192]	; (80043d0 <I2C_MasterRequestRead+0x194>)
 800430e:	68f8      	ldr	r0, [r7, #12]
 8004310:	f000 f94f 	bl	80045b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d001      	beq.n	800431e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e054      	b.n	80043c8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800431e:	897b      	ldrh	r3, [r7, #10]
 8004320:	b2da      	uxtb	r2, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	4929      	ldr	r1, [pc, #164]	; (80043d4 <I2C_MasterRequestRead+0x198>)
 800432e:	68f8      	ldr	r0, [r7, #12]
 8004330:	f000 f93f 	bl	80045b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d001      	beq.n	800433e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e044      	b.n	80043c8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800433e:	2300      	movs	r3, #0
 8004340:	613b      	str	r3, [r7, #16]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	695b      	ldr	r3, [r3, #20]
 8004348:	613b      	str	r3, [r7, #16]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	613b      	str	r3, [r7, #16]
 8004352:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004362:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	9300      	str	r3, [sp, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	f000 f8c7 	bl	8004504 <I2C_WaitOnFlagUntilTimeout>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d00d      	beq.n	8004398 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004386:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800438a:	d103      	bne.n	8004394 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004392:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e017      	b.n	80043c8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004398:	897b      	ldrh	r3, [r7, #10]
 800439a:	11db      	asrs	r3, r3, #7
 800439c:	b2db      	uxtb	r3, r3
 800439e:	f003 0306 	and.w	r3, r3, #6
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	f063 030e 	orn	r3, r3, #14
 80043a8:	b2da      	uxtb	r2, r3
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	4907      	ldr	r1, [pc, #28]	; (80043d4 <I2C_MasterRequestRead+0x198>)
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f000 f8fb 	bl	80045b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d001      	beq.n	80043c6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e000      	b.n	80043c8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3718      	adds	r7, #24
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	00010008 	.word	0x00010008
 80043d4:	00010002 	.word	0x00010002

080043d8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b088      	sub	sp, #32
 80043dc:	af02      	add	r7, sp, #8
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	4608      	mov	r0, r1
 80043e2:	4611      	mov	r1, r2
 80043e4:	461a      	mov	r2, r3
 80043e6:	4603      	mov	r3, r0
 80043e8:	817b      	strh	r3, [r7, #10]
 80043ea:	460b      	mov	r3, r1
 80043ec:	813b      	strh	r3, [r7, #8]
 80043ee:	4613      	mov	r3, r2
 80043f0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004400:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004404:	9300      	str	r3, [sp, #0]
 8004406:	6a3b      	ldr	r3, [r7, #32]
 8004408:	2200      	movs	r2, #0
 800440a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800440e:	68f8      	ldr	r0, [r7, #12]
 8004410:	f000 f878 	bl	8004504 <I2C_WaitOnFlagUntilTimeout>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00d      	beq.n	8004436 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004424:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004428:	d103      	bne.n	8004432 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004430:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e05f      	b.n	80044f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004436:	897b      	ldrh	r3, [r7, #10]
 8004438:	b2db      	uxtb	r3, r3
 800443a:	461a      	mov	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004444:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004448:	6a3a      	ldr	r2, [r7, #32]
 800444a:	492d      	ldr	r1, [pc, #180]	; (8004500 <I2C_RequestMemoryWrite+0x128>)
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	f000 f8b0 	bl	80045b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d001      	beq.n	800445c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e04c      	b.n	80044f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800445c:	2300      	movs	r3, #0
 800445e:	617b      	str	r3, [r7, #20]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	617b      	str	r3, [r7, #20]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	617b      	str	r3, [r7, #20]
 8004470:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004474:	6a39      	ldr	r1, [r7, #32]
 8004476:	68f8      	ldr	r0, [r7, #12]
 8004478:	f000 f91a 	bl	80046b0 <I2C_WaitOnTXEFlagUntilTimeout>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00d      	beq.n	800449e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004486:	2b04      	cmp	r3, #4
 8004488:	d107      	bne.n	800449a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004498:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e02b      	b.n	80044f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800449e:	88fb      	ldrh	r3, [r7, #6]
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d105      	bne.n	80044b0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044a4:	893b      	ldrh	r3, [r7, #8]
 80044a6:	b2da      	uxtb	r2, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	611a      	str	r2, [r3, #16]
 80044ae:	e021      	b.n	80044f4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80044b0:	893b      	ldrh	r3, [r7, #8]
 80044b2:	0a1b      	lsrs	r3, r3, #8
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	b2da      	uxtb	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044c0:	6a39      	ldr	r1, [r7, #32]
 80044c2:	68f8      	ldr	r0, [r7, #12]
 80044c4:	f000 f8f4 	bl	80046b0 <I2C_WaitOnTXEFlagUntilTimeout>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00d      	beq.n	80044ea <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d2:	2b04      	cmp	r3, #4
 80044d4:	d107      	bne.n	80044e6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e005      	b.n	80044f6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044ea:	893b      	ldrh	r3, [r7, #8]
 80044ec:	b2da      	uxtb	r2, r3
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3718      	adds	r7, #24
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	00010002 	.word	0x00010002

08004504 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	603b      	str	r3, [r7, #0]
 8004510:	4613      	mov	r3, r2
 8004512:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004514:	e025      	b.n	8004562 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800451c:	d021      	beq.n	8004562 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800451e:	f7fc fe6f 	bl	8001200 <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	683a      	ldr	r2, [r7, #0]
 800452a:	429a      	cmp	r2, r3
 800452c:	d302      	bcc.n	8004534 <I2C_WaitOnFlagUntilTimeout+0x30>
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d116      	bne.n	8004562 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2220      	movs	r2, #32
 800453e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454e:	f043 0220 	orr.w	r2, r3, #32
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e023      	b.n	80045aa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	0c1b      	lsrs	r3, r3, #16
 8004566:	b2db      	uxtb	r3, r3
 8004568:	2b01      	cmp	r3, #1
 800456a:	d10d      	bne.n	8004588 <I2C_WaitOnFlagUntilTimeout+0x84>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	43da      	mvns	r2, r3
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	4013      	ands	r3, r2
 8004578:	b29b      	uxth	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	bf0c      	ite	eq
 800457e:	2301      	moveq	r3, #1
 8004580:	2300      	movne	r3, #0
 8004582:	b2db      	uxtb	r3, r3
 8004584:	461a      	mov	r2, r3
 8004586:	e00c      	b.n	80045a2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	43da      	mvns	r2, r3
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	4013      	ands	r3, r2
 8004594:	b29b      	uxth	r3, r3
 8004596:	2b00      	cmp	r3, #0
 8004598:	bf0c      	ite	eq
 800459a:	2301      	moveq	r3, #1
 800459c:	2300      	movne	r3, #0
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	461a      	mov	r2, r3
 80045a2:	79fb      	ldrb	r3, [r7, #7]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d0b6      	beq.n	8004516 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b084      	sub	sp, #16
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	60f8      	str	r0, [r7, #12]
 80045ba:	60b9      	str	r1, [r7, #8]
 80045bc:	607a      	str	r2, [r7, #4]
 80045be:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045c0:	e051      	b.n	8004666 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	695b      	ldr	r3, [r3, #20]
 80045c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045d0:	d123      	bne.n	800461a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045e0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80045ea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2220      	movs	r2, #32
 80045f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004606:	f043 0204 	orr.w	r2, r3, #4
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e046      	b.n	80046a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004620:	d021      	beq.n	8004666 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004622:	f7fc fded 	bl	8001200 <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	429a      	cmp	r2, r3
 8004630:	d302      	bcc.n	8004638 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d116      	bne.n	8004666 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2200      	movs	r2, #0
 800463c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2220      	movs	r2, #32
 8004642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004652:	f043 0220 	orr.w	r2, r3, #32
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e020      	b.n	80046a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	0c1b      	lsrs	r3, r3, #16
 800466a:	b2db      	uxtb	r3, r3
 800466c:	2b01      	cmp	r3, #1
 800466e:	d10c      	bne.n	800468a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	43da      	mvns	r2, r3
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	4013      	ands	r3, r2
 800467c:	b29b      	uxth	r3, r3
 800467e:	2b00      	cmp	r3, #0
 8004680:	bf14      	ite	ne
 8004682:	2301      	movne	r3, #1
 8004684:	2300      	moveq	r3, #0
 8004686:	b2db      	uxtb	r3, r3
 8004688:	e00b      	b.n	80046a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	699b      	ldr	r3, [r3, #24]
 8004690:	43da      	mvns	r2, r3
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	4013      	ands	r3, r2
 8004696:	b29b      	uxth	r3, r3
 8004698:	2b00      	cmp	r3, #0
 800469a:	bf14      	ite	ne
 800469c:	2301      	movne	r3, #1
 800469e:	2300      	moveq	r3, #0
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d18d      	bne.n	80045c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3710      	adds	r7, #16
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046bc:	e02d      	b.n	800471a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80046be:	68f8      	ldr	r0, [r7, #12]
 80046c0:	f000 f8ce 	bl	8004860 <I2C_IsAcknowledgeFailed>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d001      	beq.n	80046ce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e02d      	b.n	800472a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d4:	d021      	beq.n	800471a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046d6:	f7fc fd93 	bl	8001200 <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	68ba      	ldr	r2, [r7, #8]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d302      	bcc.n	80046ec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d116      	bne.n	800471a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2200      	movs	r2, #0
 80046f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2220      	movs	r2, #32
 80046f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004706:	f043 0220 	orr.w	r2, r3, #32
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e007      	b.n	800472a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	695b      	ldr	r3, [r3, #20]
 8004720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004724:	2b80      	cmp	r3, #128	; 0x80
 8004726:	d1ca      	bne.n	80046be <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3710      	adds	r7, #16
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}

08004732 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004732:	b580      	push	{r7, lr}
 8004734:	b084      	sub	sp, #16
 8004736:	af00      	add	r7, sp, #0
 8004738:	60f8      	str	r0, [r7, #12]
 800473a:	60b9      	str	r1, [r7, #8]
 800473c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800473e:	e02d      	b.n	800479c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004740:	68f8      	ldr	r0, [r7, #12]
 8004742:	f000 f88d 	bl	8004860 <I2C_IsAcknowledgeFailed>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d001      	beq.n	8004750 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e02d      	b.n	80047ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004756:	d021      	beq.n	800479c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004758:	f7fc fd52 	bl	8001200 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	68ba      	ldr	r2, [r7, #8]
 8004764:	429a      	cmp	r2, r3
 8004766:	d302      	bcc.n	800476e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d116      	bne.n	800479c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2220      	movs	r2, #32
 8004778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004788:	f043 0220 	orr.w	r2, r3, #32
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e007      	b.n	80047ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	f003 0304 	and.w	r3, r3, #4
 80047a6:	2b04      	cmp	r3, #4
 80047a8:	d1ca      	bne.n	8004740 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047aa:	2300      	movs	r3, #0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3710      	adds	r7, #16
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80047c0:	e042      	b.n	8004848 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	695b      	ldr	r3, [r3, #20]
 80047c8:	f003 0310 	and.w	r3, r3, #16
 80047cc:	2b10      	cmp	r3, #16
 80047ce:	d119      	bne.n	8004804 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f06f 0210 	mvn.w	r2, #16
 80047d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2220      	movs	r2, #32
 80047e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e029      	b.n	8004858 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004804:	f7fc fcfc 	bl	8001200 <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	68ba      	ldr	r2, [r7, #8]
 8004810:	429a      	cmp	r2, r3
 8004812:	d302      	bcc.n	800481a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d116      	bne.n	8004848 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2220      	movs	r2, #32
 8004824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2200      	movs	r2, #0
 800482c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004834:	f043 0220 	orr.w	r2, r3, #32
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e007      	b.n	8004858 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	695b      	ldr	r3, [r3, #20]
 800484e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004852:	2b40      	cmp	r3, #64	; 0x40
 8004854:	d1b5      	bne.n	80047c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	3710      	adds	r7, #16
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004872:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004876:	d11b      	bne.n	80048b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004880:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2220      	movs	r2, #32
 800488c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489c:	f043 0204 	orr.w	r2, r3, #4
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e000      	b.n	80048b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	370c      	adds	r7, #12
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
	...

080048c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b086      	sub	sp, #24
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d101      	bne.n	80048d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e267      	b.n	8004da2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d075      	beq.n	80049ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048de:	4b88      	ldr	r3, [pc, #544]	; (8004b00 <HAL_RCC_OscConfig+0x240>)
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f003 030c 	and.w	r3, r3, #12
 80048e6:	2b04      	cmp	r3, #4
 80048e8:	d00c      	beq.n	8004904 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048ea:	4b85      	ldr	r3, [pc, #532]	; (8004b00 <HAL_RCC_OscConfig+0x240>)
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048f2:	2b08      	cmp	r3, #8
 80048f4:	d112      	bne.n	800491c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048f6:	4b82      	ldr	r3, [pc, #520]	; (8004b00 <HAL_RCC_OscConfig+0x240>)
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004902:	d10b      	bne.n	800491c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004904:	4b7e      	ldr	r3, [pc, #504]	; (8004b00 <HAL_RCC_OscConfig+0x240>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d05b      	beq.n	80049c8 <HAL_RCC_OscConfig+0x108>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d157      	bne.n	80049c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e242      	b.n	8004da2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004924:	d106      	bne.n	8004934 <HAL_RCC_OscConfig+0x74>
 8004926:	4b76      	ldr	r3, [pc, #472]	; (8004b00 <HAL_RCC_OscConfig+0x240>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a75      	ldr	r2, [pc, #468]	; (8004b00 <HAL_RCC_OscConfig+0x240>)
 800492c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004930:	6013      	str	r3, [r2, #0]
 8004932:	e01d      	b.n	8004970 <HAL_RCC_OscConfig+0xb0>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800493c:	d10c      	bne.n	8004958 <HAL_RCC_OscConfig+0x98>
 800493e:	4b70      	ldr	r3, [pc, #448]	; (8004b00 <HAL_RCC_OscConfig+0x240>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a6f      	ldr	r2, [pc, #444]	; (8004b00 <HAL_RCC_OscConfig+0x240>)
 8004944:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004948:	6013      	str	r3, [r2, #0]
 800494a:	4b6d      	ldr	r3, [pc, #436]	; (8004b00 <HAL_RCC_OscConfig+0x240>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a6c      	ldr	r2, [pc, #432]	; (8004b00 <HAL_RCC_OscConfig+0x240>)
 8004950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004954:	6013      	str	r3, [r2, #0]
 8004956:	e00b      	b.n	8004970 <HAL_RCC_OscConfig+0xb0>
 8004958:	4b69      	ldr	r3, [pc, #420]	; (8004b00 <HAL_RCC_OscConfig+0x240>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a68      	ldr	r2, [pc, #416]	; (8004b00 <HAL_RCC_OscConfig+0x240>)
 800495e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004962:	6013      	str	r3, [r2, #0]
 8004964:	4b66      	ldr	r3, [pc, #408]	; (8004b00 <HAL_RCC_OscConfig+0x240>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a65      	ldr	r2, [pc, #404]	; (8004b00 <HAL_RCC_OscConfig+0x240>)
 800496a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800496e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d013      	beq.n	80049a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004978:	f7fc fc42 	bl	8001200 <HAL_GetTick>
 800497c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800497e:	e008      	b.n	8004992 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004980:	f7fc fc3e 	bl	8001200 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b64      	cmp	r3, #100	; 0x64
 800498c:	d901      	bls.n	8004992 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e207      	b.n	8004da2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004992:	4b5b      	ldr	r3, [pc, #364]	; (8004b00 <HAL_RCC_OscConfig+0x240>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d0f0      	beq.n	8004980 <HAL_RCC_OscConfig+0xc0>
 800499e:	e014      	b.n	80049ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049a0:	f7fc fc2e 	bl	8001200 <HAL_GetTick>
 80049a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049a6:	e008      	b.n	80049ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049a8:	f7fc fc2a 	bl	8001200 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b64      	cmp	r3, #100	; 0x64
 80049b4:	d901      	bls.n	80049ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e1f3      	b.n	8004da2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049ba:	4b51      	ldr	r3, [pc, #324]	; (8004b00 <HAL_RCC_OscConfig+0x240>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1f0      	bne.n	80049a8 <HAL_RCC_OscConfig+0xe8>
 80049c6:	e000      	b.n	80049ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0302 	and.w	r3, r3, #2
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d063      	beq.n	8004a9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049d6:	4b4a      	ldr	r3, [pc, #296]	; (8004b00 <HAL_RCC_OscConfig+0x240>)
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	f003 030c 	and.w	r3, r3, #12
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00b      	beq.n	80049fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049e2:	4b47      	ldr	r3, [pc, #284]	; (8004b00 <HAL_RCC_OscConfig+0x240>)
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049ea:	2b08      	cmp	r3, #8
 80049ec:	d11c      	bne.n	8004a28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049ee:	4b44      	ldr	r3, [pc, #272]	; (8004b00 <HAL_RCC_OscConfig+0x240>)
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d116      	bne.n	8004a28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049fa:	4b41      	ldr	r3, [pc, #260]	; (8004b00 <HAL_RCC_OscConfig+0x240>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0302 	and.w	r3, r3, #2
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d005      	beq.n	8004a12 <HAL_RCC_OscConfig+0x152>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d001      	beq.n	8004a12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e1c7      	b.n	8004da2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a12:	4b3b      	ldr	r3, [pc, #236]	; (8004b00 <HAL_RCC_OscConfig+0x240>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	00db      	lsls	r3, r3, #3
 8004a20:	4937      	ldr	r1, [pc, #220]	; (8004b00 <HAL_RCC_OscConfig+0x240>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a26:	e03a      	b.n	8004a9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d020      	beq.n	8004a72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a30:	4b34      	ldr	r3, [pc, #208]	; (8004b04 <HAL_RCC_OscConfig+0x244>)
 8004a32:	2201      	movs	r2, #1
 8004a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a36:	f7fc fbe3 	bl	8001200 <HAL_GetTick>
 8004a3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a3c:	e008      	b.n	8004a50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a3e:	f7fc fbdf 	bl	8001200 <HAL_GetTick>
 8004a42:	4602      	mov	r2, r0
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d901      	bls.n	8004a50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e1a8      	b.n	8004da2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a50:	4b2b      	ldr	r3, [pc, #172]	; (8004b00 <HAL_RCC_OscConfig+0x240>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0302 	and.w	r3, r3, #2
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d0f0      	beq.n	8004a3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a5c:	4b28      	ldr	r3, [pc, #160]	; (8004b00 <HAL_RCC_OscConfig+0x240>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	00db      	lsls	r3, r3, #3
 8004a6a:	4925      	ldr	r1, [pc, #148]	; (8004b00 <HAL_RCC_OscConfig+0x240>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	600b      	str	r3, [r1, #0]
 8004a70:	e015      	b.n	8004a9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a72:	4b24      	ldr	r3, [pc, #144]	; (8004b04 <HAL_RCC_OscConfig+0x244>)
 8004a74:	2200      	movs	r2, #0
 8004a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a78:	f7fc fbc2 	bl	8001200 <HAL_GetTick>
 8004a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a7e:	e008      	b.n	8004a92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a80:	f7fc fbbe 	bl	8001200 <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e187      	b.n	8004da2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a92:	4b1b      	ldr	r3, [pc, #108]	; (8004b00 <HAL_RCC_OscConfig+0x240>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1f0      	bne.n	8004a80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0308 	and.w	r3, r3, #8
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d036      	beq.n	8004b18 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d016      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ab2:	4b15      	ldr	r3, [pc, #84]	; (8004b08 <HAL_RCC_OscConfig+0x248>)
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ab8:	f7fc fba2 	bl	8001200 <HAL_GetTick>
 8004abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004abe:	e008      	b.n	8004ad2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ac0:	f7fc fb9e 	bl	8001200 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d901      	bls.n	8004ad2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e167      	b.n	8004da2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ad2:	4b0b      	ldr	r3, [pc, #44]	; (8004b00 <HAL_RCC_OscConfig+0x240>)
 8004ad4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ad6:	f003 0302 	and.w	r3, r3, #2
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d0f0      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x200>
 8004ade:	e01b      	b.n	8004b18 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ae0:	4b09      	ldr	r3, [pc, #36]	; (8004b08 <HAL_RCC_OscConfig+0x248>)
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ae6:	f7fc fb8b 	bl	8001200 <HAL_GetTick>
 8004aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004aec:	e00e      	b.n	8004b0c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004aee:	f7fc fb87 	bl	8001200 <HAL_GetTick>
 8004af2:	4602      	mov	r2, r0
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d907      	bls.n	8004b0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	e150      	b.n	8004da2 <HAL_RCC_OscConfig+0x4e2>
 8004b00:	40023800 	.word	0x40023800
 8004b04:	42470000 	.word	0x42470000
 8004b08:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b0c:	4b88      	ldr	r3, [pc, #544]	; (8004d30 <HAL_RCC_OscConfig+0x470>)
 8004b0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b10:	f003 0302 	and.w	r3, r3, #2
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d1ea      	bne.n	8004aee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0304 	and.w	r3, r3, #4
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	f000 8097 	beq.w	8004c54 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b26:	2300      	movs	r3, #0
 8004b28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b2a:	4b81      	ldr	r3, [pc, #516]	; (8004d30 <HAL_RCC_OscConfig+0x470>)
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d10f      	bne.n	8004b56 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b36:	2300      	movs	r3, #0
 8004b38:	60bb      	str	r3, [r7, #8]
 8004b3a:	4b7d      	ldr	r3, [pc, #500]	; (8004d30 <HAL_RCC_OscConfig+0x470>)
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3e:	4a7c      	ldr	r2, [pc, #496]	; (8004d30 <HAL_RCC_OscConfig+0x470>)
 8004b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b44:	6413      	str	r3, [r2, #64]	; 0x40
 8004b46:	4b7a      	ldr	r3, [pc, #488]	; (8004d30 <HAL_RCC_OscConfig+0x470>)
 8004b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b4e:	60bb      	str	r3, [r7, #8]
 8004b50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b52:	2301      	movs	r3, #1
 8004b54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b56:	4b77      	ldr	r3, [pc, #476]	; (8004d34 <HAL_RCC_OscConfig+0x474>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d118      	bne.n	8004b94 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b62:	4b74      	ldr	r3, [pc, #464]	; (8004d34 <HAL_RCC_OscConfig+0x474>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a73      	ldr	r2, [pc, #460]	; (8004d34 <HAL_RCC_OscConfig+0x474>)
 8004b68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b6e:	f7fc fb47 	bl	8001200 <HAL_GetTick>
 8004b72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b74:	e008      	b.n	8004b88 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b76:	f7fc fb43 	bl	8001200 <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d901      	bls.n	8004b88 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e10c      	b.n	8004da2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b88:	4b6a      	ldr	r3, [pc, #424]	; (8004d34 <HAL_RCC_OscConfig+0x474>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d0f0      	beq.n	8004b76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d106      	bne.n	8004baa <HAL_RCC_OscConfig+0x2ea>
 8004b9c:	4b64      	ldr	r3, [pc, #400]	; (8004d30 <HAL_RCC_OscConfig+0x470>)
 8004b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba0:	4a63      	ldr	r2, [pc, #396]	; (8004d30 <HAL_RCC_OscConfig+0x470>)
 8004ba2:	f043 0301 	orr.w	r3, r3, #1
 8004ba6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ba8:	e01c      	b.n	8004be4 <HAL_RCC_OscConfig+0x324>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	2b05      	cmp	r3, #5
 8004bb0:	d10c      	bne.n	8004bcc <HAL_RCC_OscConfig+0x30c>
 8004bb2:	4b5f      	ldr	r3, [pc, #380]	; (8004d30 <HAL_RCC_OscConfig+0x470>)
 8004bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb6:	4a5e      	ldr	r2, [pc, #376]	; (8004d30 <HAL_RCC_OscConfig+0x470>)
 8004bb8:	f043 0304 	orr.w	r3, r3, #4
 8004bbc:	6713      	str	r3, [r2, #112]	; 0x70
 8004bbe:	4b5c      	ldr	r3, [pc, #368]	; (8004d30 <HAL_RCC_OscConfig+0x470>)
 8004bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc2:	4a5b      	ldr	r2, [pc, #364]	; (8004d30 <HAL_RCC_OscConfig+0x470>)
 8004bc4:	f043 0301 	orr.w	r3, r3, #1
 8004bc8:	6713      	str	r3, [r2, #112]	; 0x70
 8004bca:	e00b      	b.n	8004be4 <HAL_RCC_OscConfig+0x324>
 8004bcc:	4b58      	ldr	r3, [pc, #352]	; (8004d30 <HAL_RCC_OscConfig+0x470>)
 8004bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd0:	4a57      	ldr	r2, [pc, #348]	; (8004d30 <HAL_RCC_OscConfig+0x470>)
 8004bd2:	f023 0301 	bic.w	r3, r3, #1
 8004bd6:	6713      	str	r3, [r2, #112]	; 0x70
 8004bd8:	4b55      	ldr	r3, [pc, #340]	; (8004d30 <HAL_RCC_OscConfig+0x470>)
 8004bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bdc:	4a54      	ldr	r2, [pc, #336]	; (8004d30 <HAL_RCC_OscConfig+0x470>)
 8004bde:	f023 0304 	bic.w	r3, r3, #4
 8004be2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d015      	beq.n	8004c18 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bec:	f7fc fb08 	bl	8001200 <HAL_GetTick>
 8004bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bf2:	e00a      	b.n	8004c0a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bf4:	f7fc fb04 	bl	8001200 <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e0cb      	b.n	8004da2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c0a:	4b49      	ldr	r3, [pc, #292]	; (8004d30 <HAL_RCC_OscConfig+0x470>)
 8004c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c0e:	f003 0302 	and.w	r3, r3, #2
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d0ee      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x334>
 8004c16:	e014      	b.n	8004c42 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c18:	f7fc faf2 	bl	8001200 <HAL_GetTick>
 8004c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c1e:	e00a      	b.n	8004c36 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c20:	f7fc faee 	bl	8001200 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d901      	bls.n	8004c36 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e0b5      	b.n	8004da2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c36:	4b3e      	ldr	r3, [pc, #248]	; (8004d30 <HAL_RCC_OscConfig+0x470>)
 8004c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c3a:	f003 0302 	and.w	r3, r3, #2
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d1ee      	bne.n	8004c20 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c42:	7dfb      	ldrb	r3, [r7, #23]
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d105      	bne.n	8004c54 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c48:	4b39      	ldr	r3, [pc, #228]	; (8004d30 <HAL_RCC_OscConfig+0x470>)
 8004c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4c:	4a38      	ldr	r2, [pc, #224]	; (8004d30 <HAL_RCC_OscConfig+0x470>)
 8004c4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c52:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	699b      	ldr	r3, [r3, #24]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	f000 80a1 	beq.w	8004da0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c5e:	4b34      	ldr	r3, [pc, #208]	; (8004d30 <HAL_RCC_OscConfig+0x470>)
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f003 030c 	and.w	r3, r3, #12
 8004c66:	2b08      	cmp	r3, #8
 8004c68:	d05c      	beq.n	8004d24 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d141      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c72:	4b31      	ldr	r3, [pc, #196]	; (8004d38 <HAL_RCC_OscConfig+0x478>)
 8004c74:	2200      	movs	r2, #0
 8004c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c78:	f7fc fac2 	bl	8001200 <HAL_GetTick>
 8004c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c7e:	e008      	b.n	8004c92 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c80:	f7fc fabe 	bl	8001200 <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d901      	bls.n	8004c92 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e087      	b.n	8004da2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c92:	4b27      	ldr	r3, [pc, #156]	; (8004d30 <HAL_RCC_OscConfig+0x470>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d1f0      	bne.n	8004c80 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	69da      	ldr	r2, [r3, #28]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a1b      	ldr	r3, [r3, #32]
 8004ca6:	431a      	orrs	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cac:	019b      	lsls	r3, r3, #6
 8004cae:	431a      	orrs	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb4:	085b      	lsrs	r3, r3, #1
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	041b      	lsls	r3, r3, #16
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc0:	061b      	lsls	r3, r3, #24
 8004cc2:	491b      	ldr	r1, [pc, #108]	; (8004d30 <HAL_RCC_OscConfig+0x470>)
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cc8:	4b1b      	ldr	r3, [pc, #108]	; (8004d38 <HAL_RCC_OscConfig+0x478>)
 8004cca:	2201      	movs	r2, #1
 8004ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cce:	f7fc fa97 	bl	8001200 <HAL_GetTick>
 8004cd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cd4:	e008      	b.n	8004ce8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cd6:	f7fc fa93 	bl	8001200 <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d901      	bls.n	8004ce8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e05c      	b.n	8004da2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ce8:	4b11      	ldr	r3, [pc, #68]	; (8004d30 <HAL_RCC_OscConfig+0x470>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d0f0      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x416>
 8004cf4:	e054      	b.n	8004da0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cf6:	4b10      	ldr	r3, [pc, #64]	; (8004d38 <HAL_RCC_OscConfig+0x478>)
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cfc:	f7fc fa80 	bl	8001200 <HAL_GetTick>
 8004d00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d02:	e008      	b.n	8004d16 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d04:	f7fc fa7c 	bl	8001200 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d901      	bls.n	8004d16 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e045      	b.n	8004da2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d16:	4b06      	ldr	r3, [pc, #24]	; (8004d30 <HAL_RCC_OscConfig+0x470>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d1f0      	bne.n	8004d04 <HAL_RCC_OscConfig+0x444>
 8004d22:	e03d      	b.n	8004da0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d107      	bne.n	8004d3c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e038      	b.n	8004da2 <HAL_RCC_OscConfig+0x4e2>
 8004d30:	40023800 	.word	0x40023800
 8004d34:	40007000 	.word	0x40007000
 8004d38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d3c:	4b1b      	ldr	r3, [pc, #108]	; (8004dac <HAL_RCC_OscConfig+0x4ec>)
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d028      	beq.n	8004d9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d121      	bne.n	8004d9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d11a      	bne.n	8004d9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d111      	bne.n	8004d9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d82:	085b      	lsrs	r3, r3, #1
 8004d84:	3b01      	subs	r3, #1
 8004d86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d107      	bne.n	8004d9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d001      	beq.n	8004da0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e000      	b.n	8004da2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3718      	adds	r7, #24
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	40023800 	.word	0x40023800

08004db0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d101      	bne.n	8004dc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e0cc      	b.n	8004f5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004dc4:	4b68      	ldr	r3, [pc, #416]	; (8004f68 <HAL_RCC_ClockConfig+0x1b8>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0307 	and.w	r3, r3, #7
 8004dcc:	683a      	ldr	r2, [r7, #0]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d90c      	bls.n	8004dec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dd2:	4b65      	ldr	r3, [pc, #404]	; (8004f68 <HAL_RCC_ClockConfig+0x1b8>)
 8004dd4:	683a      	ldr	r2, [r7, #0]
 8004dd6:	b2d2      	uxtb	r2, r2
 8004dd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dda:	4b63      	ldr	r3, [pc, #396]	; (8004f68 <HAL_RCC_ClockConfig+0x1b8>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0307 	and.w	r3, r3, #7
 8004de2:	683a      	ldr	r2, [r7, #0]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d001      	beq.n	8004dec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e0b8      	b.n	8004f5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0302 	and.w	r3, r3, #2
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d020      	beq.n	8004e3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0304 	and.w	r3, r3, #4
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d005      	beq.n	8004e10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e04:	4b59      	ldr	r3, [pc, #356]	; (8004f6c <HAL_RCC_ClockConfig+0x1bc>)
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	4a58      	ldr	r2, [pc, #352]	; (8004f6c <HAL_RCC_ClockConfig+0x1bc>)
 8004e0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 0308 	and.w	r3, r3, #8
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d005      	beq.n	8004e28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e1c:	4b53      	ldr	r3, [pc, #332]	; (8004f6c <HAL_RCC_ClockConfig+0x1bc>)
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	4a52      	ldr	r2, [pc, #328]	; (8004f6c <HAL_RCC_ClockConfig+0x1bc>)
 8004e22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e28:	4b50      	ldr	r3, [pc, #320]	; (8004f6c <HAL_RCC_ClockConfig+0x1bc>)
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	494d      	ldr	r1, [pc, #308]	; (8004f6c <HAL_RCC_ClockConfig+0x1bc>)
 8004e36:	4313      	orrs	r3, r2
 8004e38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0301 	and.w	r3, r3, #1
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d044      	beq.n	8004ed0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d107      	bne.n	8004e5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e4e:	4b47      	ldr	r3, [pc, #284]	; (8004f6c <HAL_RCC_ClockConfig+0x1bc>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d119      	bne.n	8004e8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e07f      	b.n	8004f5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d003      	beq.n	8004e6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e6a:	2b03      	cmp	r3, #3
 8004e6c:	d107      	bne.n	8004e7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e6e:	4b3f      	ldr	r3, [pc, #252]	; (8004f6c <HAL_RCC_ClockConfig+0x1bc>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d109      	bne.n	8004e8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e06f      	b.n	8004f5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e7e:	4b3b      	ldr	r3, [pc, #236]	; (8004f6c <HAL_RCC_ClockConfig+0x1bc>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0302 	and.w	r3, r3, #2
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d101      	bne.n	8004e8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e067      	b.n	8004f5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e8e:	4b37      	ldr	r3, [pc, #220]	; (8004f6c <HAL_RCC_ClockConfig+0x1bc>)
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	f023 0203 	bic.w	r2, r3, #3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	4934      	ldr	r1, [pc, #208]	; (8004f6c <HAL_RCC_ClockConfig+0x1bc>)
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ea0:	f7fc f9ae 	bl	8001200 <HAL_GetTick>
 8004ea4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ea6:	e00a      	b.n	8004ebe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ea8:	f7fc f9aa 	bl	8001200 <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d901      	bls.n	8004ebe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e04f      	b.n	8004f5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ebe:	4b2b      	ldr	r3, [pc, #172]	; (8004f6c <HAL_RCC_ClockConfig+0x1bc>)
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	f003 020c 	and.w	r2, r3, #12
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d1eb      	bne.n	8004ea8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ed0:	4b25      	ldr	r3, [pc, #148]	; (8004f68 <HAL_RCC_ClockConfig+0x1b8>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0307 	and.w	r3, r3, #7
 8004ed8:	683a      	ldr	r2, [r7, #0]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d20c      	bcs.n	8004ef8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ede:	4b22      	ldr	r3, [pc, #136]	; (8004f68 <HAL_RCC_ClockConfig+0x1b8>)
 8004ee0:	683a      	ldr	r2, [r7, #0]
 8004ee2:	b2d2      	uxtb	r2, r2
 8004ee4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ee6:	4b20      	ldr	r3, [pc, #128]	; (8004f68 <HAL_RCC_ClockConfig+0x1b8>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0307 	and.w	r3, r3, #7
 8004eee:	683a      	ldr	r2, [r7, #0]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d001      	beq.n	8004ef8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e032      	b.n	8004f5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0304 	and.w	r3, r3, #4
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d008      	beq.n	8004f16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f04:	4b19      	ldr	r3, [pc, #100]	; (8004f6c <HAL_RCC_ClockConfig+0x1bc>)
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	4916      	ldr	r1, [pc, #88]	; (8004f6c <HAL_RCC_ClockConfig+0x1bc>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0308 	and.w	r3, r3, #8
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d009      	beq.n	8004f36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f22:	4b12      	ldr	r3, [pc, #72]	; (8004f6c <HAL_RCC_ClockConfig+0x1bc>)
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	00db      	lsls	r3, r3, #3
 8004f30:	490e      	ldr	r1, [pc, #56]	; (8004f6c <HAL_RCC_ClockConfig+0x1bc>)
 8004f32:	4313      	orrs	r3, r2
 8004f34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f36:	f000 f889 	bl	800504c <HAL_RCC_GetSysClockFreq>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	4b0b      	ldr	r3, [pc, #44]	; (8004f6c <HAL_RCC_ClockConfig+0x1bc>)
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	091b      	lsrs	r3, r3, #4
 8004f42:	f003 030f 	and.w	r3, r3, #15
 8004f46:	490a      	ldr	r1, [pc, #40]	; (8004f70 <HAL_RCC_ClockConfig+0x1c0>)
 8004f48:	5ccb      	ldrb	r3, [r1, r3]
 8004f4a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f4e:	4a09      	ldr	r2, [pc, #36]	; (8004f74 <HAL_RCC_ClockConfig+0x1c4>)
 8004f50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f52:	4b09      	ldr	r3, [pc, #36]	; (8004f78 <HAL_RCC_ClockConfig+0x1c8>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4618      	mov	r0, r3
 8004f58:	f7fc f90e 	bl	8001178 <HAL_InitTick>

  return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3710      	adds	r7, #16
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	40023c00 	.word	0x40023c00
 8004f6c:	40023800 	.word	0x40023800
 8004f70:	0800537c 	.word	0x0800537c
 8004f74:	2000000c 	.word	0x2000000c
 8004f78:	20000010 	.word	0x20000010

08004f7c <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b08c      	sub	sp, #48	; 0x30
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d129      	bne.n	8004fe2 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8004f8e:	2300      	movs	r3, #0
 8004f90:	61bb      	str	r3, [r7, #24]
 8004f92:	4b2b      	ldr	r3, [pc, #172]	; (8005040 <HAL_RCC_MCOConfig+0xc4>)
 8004f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f96:	4a2a      	ldr	r2, [pc, #168]	; (8005040 <HAL_RCC_MCOConfig+0xc4>)
 8004f98:	f043 0301 	orr.w	r3, r3, #1
 8004f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8004f9e:	4b28      	ldr	r3, [pc, #160]	; (8005040 <HAL_RCC_MCOConfig+0xc4>)
 8004fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa2:	f003 0301 	and.w	r3, r3, #1
 8004fa6:	61bb      	str	r3, [r7, #24]
 8004fa8:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8004faa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004fae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fb0:	2302      	movs	r3, #2
 8004fb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8004fc0:	f107 031c 	add.w	r3, r7, #28
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	481f      	ldr	r0, [pc, #124]	; (8005044 <HAL_RCC_MCOConfig+0xc8>)
 8004fc8:	f7fe f9b8 	bl	800333c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8004fcc:	4b1c      	ldr	r3, [pc, #112]	; (8005040 <HAL_RCC_MCOConfig+0xc4>)
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8004fd4:	68b9      	ldr	r1, [r7, #8]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	430b      	orrs	r3, r1
 8004fda:	4919      	ldr	r1, [pc, #100]	; (8005040 <HAL_RCC_MCOConfig+0xc4>)
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8004fe0:	e029      	b.n	8005036 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	617b      	str	r3, [r7, #20]
 8004fe6:	4b16      	ldr	r3, [pc, #88]	; (8005040 <HAL_RCC_MCOConfig+0xc4>)
 8004fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fea:	4a15      	ldr	r2, [pc, #84]	; (8005040 <HAL_RCC_MCOConfig+0xc4>)
 8004fec:	f043 0304 	orr.w	r3, r3, #4
 8004ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8004ff2:	4b13      	ldr	r3, [pc, #76]	; (8005040 <HAL_RCC_MCOConfig+0xc4>)
 8004ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff6:	f003 0304 	and.w	r3, r3, #4
 8004ffa:	617b      	str	r3, [r7, #20]
 8004ffc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8004ffe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005002:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005004:	2302      	movs	r3, #2
 8005006:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005008:	2303      	movs	r3, #3
 800500a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800500c:	2300      	movs	r3, #0
 800500e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005010:	2300      	movs	r3, #0
 8005012:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8005014:	f107 031c 	add.w	r3, r7, #28
 8005018:	4619      	mov	r1, r3
 800501a:	480b      	ldr	r0, [pc, #44]	; (8005048 <HAL_RCC_MCOConfig+0xcc>)
 800501c:	f7fe f98e 	bl	800333c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8005020:	4b07      	ldr	r3, [pc, #28]	; (8005040 <HAL_RCC_MCOConfig+0xc4>)
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	00d9      	lsls	r1, r3, #3
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	430b      	orrs	r3, r1
 8005030:	4903      	ldr	r1, [pc, #12]	; (8005040 <HAL_RCC_MCOConfig+0xc4>)
 8005032:	4313      	orrs	r3, r2
 8005034:	608b      	str	r3, [r1, #8]
}
 8005036:	bf00      	nop
 8005038:	3730      	adds	r7, #48	; 0x30
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	40023800 	.word	0x40023800
 8005044:	40020000 	.word	0x40020000
 8005048:	40020800 	.word	0x40020800

0800504c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800504c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005050:	b094      	sub	sp, #80	; 0x50
 8005052:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005054:	2300      	movs	r3, #0
 8005056:	647b      	str	r3, [r7, #68]	; 0x44
 8005058:	2300      	movs	r3, #0
 800505a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800505c:	2300      	movs	r3, #0
 800505e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005060:	2300      	movs	r3, #0
 8005062:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005064:	4b79      	ldr	r3, [pc, #484]	; (800524c <HAL_RCC_GetSysClockFreq+0x200>)
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	f003 030c 	and.w	r3, r3, #12
 800506c:	2b08      	cmp	r3, #8
 800506e:	d00d      	beq.n	800508c <HAL_RCC_GetSysClockFreq+0x40>
 8005070:	2b08      	cmp	r3, #8
 8005072:	f200 80e1 	bhi.w	8005238 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005076:	2b00      	cmp	r3, #0
 8005078:	d002      	beq.n	8005080 <HAL_RCC_GetSysClockFreq+0x34>
 800507a:	2b04      	cmp	r3, #4
 800507c:	d003      	beq.n	8005086 <HAL_RCC_GetSysClockFreq+0x3a>
 800507e:	e0db      	b.n	8005238 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005080:	4b73      	ldr	r3, [pc, #460]	; (8005250 <HAL_RCC_GetSysClockFreq+0x204>)
 8005082:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005084:	e0db      	b.n	800523e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005086:	4b73      	ldr	r3, [pc, #460]	; (8005254 <HAL_RCC_GetSysClockFreq+0x208>)
 8005088:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800508a:	e0d8      	b.n	800523e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800508c:	4b6f      	ldr	r3, [pc, #444]	; (800524c <HAL_RCC_GetSysClockFreq+0x200>)
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005094:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005096:	4b6d      	ldr	r3, [pc, #436]	; (800524c <HAL_RCC_GetSysClockFreq+0x200>)
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d063      	beq.n	800516a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050a2:	4b6a      	ldr	r3, [pc, #424]	; (800524c <HAL_RCC_GetSysClockFreq+0x200>)
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	099b      	lsrs	r3, r3, #6
 80050a8:	2200      	movs	r2, #0
 80050aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80050ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80050ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050b4:	633b      	str	r3, [r7, #48]	; 0x30
 80050b6:	2300      	movs	r3, #0
 80050b8:	637b      	str	r3, [r7, #52]	; 0x34
 80050ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80050be:	4622      	mov	r2, r4
 80050c0:	462b      	mov	r3, r5
 80050c2:	f04f 0000 	mov.w	r0, #0
 80050c6:	f04f 0100 	mov.w	r1, #0
 80050ca:	0159      	lsls	r1, r3, #5
 80050cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050d0:	0150      	lsls	r0, r2, #5
 80050d2:	4602      	mov	r2, r0
 80050d4:	460b      	mov	r3, r1
 80050d6:	4621      	mov	r1, r4
 80050d8:	1a51      	subs	r1, r2, r1
 80050da:	6139      	str	r1, [r7, #16]
 80050dc:	4629      	mov	r1, r5
 80050de:	eb63 0301 	sbc.w	r3, r3, r1
 80050e2:	617b      	str	r3, [r7, #20]
 80050e4:	f04f 0200 	mov.w	r2, #0
 80050e8:	f04f 0300 	mov.w	r3, #0
 80050ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050f0:	4659      	mov	r1, fp
 80050f2:	018b      	lsls	r3, r1, #6
 80050f4:	4651      	mov	r1, sl
 80050f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80050fa:	4651      	mov	r1, sl
 80050fc:	018a      	lsls	r2, r1, #6
 80050fe:	4651      	mov	r1, sl
 8005100:	ebb2 0801 	subs.w	r8, r2, r1
 8005104:	4659      	mov	r1, fp
 8005106:	eb63 0901 	sbc.w	r9, r3, r1
 800510a:	f04f 0200 	mov.w	r2, #0
 800510e:	f04f 0300 	mov.w	r3, #0
 8005112:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005116:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800511a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800511e:	4690      	mov	r8, r2
 8005120:	4699      	mov	r9, r3
 8005122:	4623      	mov	r3, r4
 8005124:	eb18 0303 	adds.w	r3, r8, r3
 8005128:	60bb      	str	r3, [r7, #8]
 800512a:	462b      	mov	r3, r5
 800512c:	eb49 0303 	adc.w	r3, r9, r3
 8005130:	60fb      	str	r3, [r7, #12]
 8005132:	f04f 0200 	mov.w	r2, #0
 8005136:	f04f 0300 	mov.w	r3, #0
 800513a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800513e:	4629      	mov	r1, r5
 8005140:	024b      	lsls	r3, r1, #9
 8005142:	4621      	mov	r1, r4
 8005144:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005148:	4621      	mov	r1, r4
 800514a:	024a      	lsls	r2, r1, #9
 800514c:	4610      	mov	r0, r2
 800514e:	4619      	mov	r1, r3
 8005150:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005152:	2200      	movs	r2, #0
 8005154:	62bb      	str	r3, [r7, #40]	; 0x28
 8005156:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005158:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800515c:	f7fb f834 	bl	80001c8 <__aeabi_uldivmod>
 8005160:	4602      	mov	r2, r0
 8005162:	460b      	mov	r3, r1
 8005164:	4613      	mov	r3, r2
 8005166:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005168:	e058      	b.n	800521c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800516a:	4b38      	ldr	r3, [pc, #224]	; (800524c <HAL_RCC_GetSysClockFreq+0x200>)
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	099b      	lsrs	r3, r3, #6
 8005170:	2200      	movs	r2, #0
 8005172:	4618      	mov	r0, r3
 8005174:	4611      	mov	r1, r2
 8005176:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800517a:	623b      	str	r3, [r7, #32]
 800517c:	2300      	movs	r3, #0
 800517e:	627b      	str	r3, [r7, #36]	; 0x24
 8005180:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005184:	4642      	mov	r2, r8
 8005186:	464b      	mov	r3, r9
 8005188:	f04f 0000 	mov.w	r0, #0
 800518c:	f04f 0100 	mov.w	r1, #0
 8005190:	0159      	lsls	r1, r3, #5
 8005192:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005196:	0150      	lsls	r0, r2, #5
 8005198:	4602      	mov	r2, r0
 800519a:	460b      	mov	r3, r1
 800519c:	4641      	mov	r1, r8
 800519e:	ebb2 0a01 	subs.w	sl, r2, r1
 80051a2:	4649      	mov	r1, r9
 80051a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80051a8:	f04f 0200 	mov.w	r2, #0
 80051ac:	f04f 0300 	mov.w	r3, #0
 80051b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80051b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80051b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80051bc:	ebb2 040a 	subs.w	r4, r2, sl
 80051c0:	eb63 050b 	sbc.w	r5, r3, fp
 80051c4:	f04f 0200 	mov.w	r2, #0
 80051c8:	f04f 0300 	mov.w	r3, #0
 80051cc:	00eb      	lsls	r3, r5, #3
 80051ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051d2:	00e2      	lsls	r2, r4, #3
 80051d4:	4614      	mov	r4, r2
 80051d6:	461d      	mov	r5, r3
 80051d8:	4643      	mov	r3, r8
 80051da:	18e3      	adds	r3, r4, r3
 80051dc:	603b      	str	r3, [r7, #0]
 80051de:	464b      	mov	r3, r9
 80051e0:	eb45 0303 	adc.w	r3, r5, r3
 80051e4:	607b      	str	r3, [r7, #4]
 80051e6:	f04f 0200 	mov.w	r2, #0
 80051ea:	f04f 0300 	mov.w	r3, #0
 80051ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80051f2:	4629      	mov	r1, r5
 80051f4:	028b      	lsls	r3, r1, #10
 80051f6:	4621      	mov	r1, r4
 80051f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80051fc:	4621      	mov	r1, r4
 80051fe:	028a      	lsls	r2, r1, #10
 8005200:	4610      	mov	r0, r2
 8005202:	4619      	mov	r1, r3
 8005204:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005206:	2200      	movs	r2, #0
 8005208:	61bb      	str	r3, [r7, #24]
 800520a:	61fa      	str	r2, [r7, #28]
 800520c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005210:	f7fa ffda 	bl	80001c8 <__aeabi_uldivmod>
 8005214:	4602      	mov	r2, r0
 8005216:	460b      	mov	r3, r1
 8005218:	4613      	mov	r3, r2
 800521a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800521c:	4b0b      	ldr	r3, [pc, #44]	; (800524c <HAL_RCC_GetSysClockFreq+0x200>)
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	0c1b      	lsrs	r3, r3, #16
 8005222:	f003 0303 	and.w	r3, r3, #3
 8005226:	3301      	adds	r3, #1
 8005228:	005b      	lsls	r3, r3, #1
 800522a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800522c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800522e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005230:	fbb2 f3f3 	udiv	r3, r2, r3
 8005234:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005236:	e002      	b.n	800523e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005238:	4b05      	ldr	r3, [pc, #20]	; (8005250 <HAL_RCC_GetSysClockFreq+0x204>)
 800523a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800523c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800523e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005240:	4618      	mov	r0, r3
 8005242:	3750      	adds	r7, #80	; 0x50
 8005244:	46bd      	mov	sp, r7
 8005246:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800524a:	bf00      	nop
 800524c:	40023800 	.word	0x40023800
 8005250:	00f42400 	.word	0x00f42400
 8005254:	007a1200 	.word	0x007a1200

08005258 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005258:	b480      	push	{r7}
 800525a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800525c:	4b03      	ldr	r3, [pc, #12]	; (800526c <HAL_RCC_GetHCLKFreq+0x14>)
 800525e:	681b      	ldr	r3, [r3, #0]
}
 8005260:	4618      	mov	r0, r3
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	2000000c 	.word	0x2000000c

08005270 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005274:	f7ff fff0 	bl	8005258 <HAL_RCC_GetHCLKFreq>
 8005278:	4602      	mov	r2, r0
 800527a:	4b05      	ldr	r3, [pc, #20]	; (8005290 <HAL_RCC_GetPCLK1Freq+0x20>)
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	0a9b      	lsrs	r3, r3, #10
 8005280:	f003 0307 	and.w	r3, r3, #7
 8005284:	4903      	ldr	r1, [pc, #12]	; (8005294 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005286:	5ccb      	ldrb	r3, [r1, r3]
 8005288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800528c:	4618      	mov	r0, r3
 800528e:	bd80      	pop	{r7, pc}
 8005290:	40023800 	.word	0x40023800
 8005294:	0800538c 	.word	0x0800538c

08005298 <memset>:
 8005298:	4402      	add	r2, r0
 800529a:	4603      	mov	r3, r0
 800529c:	4293      	cmp	r3, r2
 800529e:	d100      	bne.n	80052a2 <memset+0xa>
 80052a0:	4770      	bx	lr
 80052a2:	f803 1b01 	strb.w	r1, [r3], #1
 80052a6:	e7f9      	b.n	800529c <memset+0x4>

080052a8 <__libc_init_array>:
 80052a8:	b570      	push	{r4, r5, r6, lr}
 80052aa:	4d0d      	ldr	r5, [pc, #52]	; (80052e0 <__libc_init_array+0x38>)
 80052ac:	4c0d      	ldr	r4, [pc, #52]	; (80052e4 <__libc_init_array+0x3c>)
 80052ae:	1b64      	subs	r4, r4, r5
 80052b0:	10a4      	asrs	r4, r4, #2
 80052b2:	2600      	movs	r6, #0
 80052b4:	42a6      	cmp	r6, r4
 80052b6:	d109      	bne.n	80052cc <__libc_init_array+0x24>
 80052b8:	4d0b      	ldr	r5, [pc, #44]	; (80052e8 <__libc_init_array+0x40>)
 80052ba:	4c0c      	ldr	r4, [pc, #48]	; (80052ec <__libc_init_array+0x44>)
 80052bc:	f000 f818 	bl	80052f0 <_init>
 80052c0:	1b64      	subs	r4, r4, r5
 80052c2:	10a4      	asrs	r4, r4, #2
 80052c4:	2600      	movs	r6, #0
 80052c6:	42a6      	cmp	r6, r4
 80052c8:	d105      	bne.n	80052d6 <__libc_init_array+0x2e>
 80052ca:	bd70      	pop	{r4, r5, r6, pc}
 80052cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80052d0:	4798      	blx	r3
 80052d2:	3601      	adds	r6, #1
 80052d4:	e7ee      	b.n	80052b4 <__libc_init_array+0xc>
 80052d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80052da:	4798      	blx	r3
 80052dc:	3601      	adds	r6, #1
 80052de:	e7f2      	b.n	80052c6 <__libc_init_array+0x1e>
 80052e0:	080053a4 	.word	0x080053a4
 80052e4:	080053a4 	.word	0x080053a4
 80052e8:	080053a4 	.word	0x080053a4
 80052ec:	080053a8 	.word	0x080053a8

080052f0 <_init>:
 80052f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052f2:	bf00      	nop
 80052f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052f6:	bc08      	pop	{r3}
 80052f8:	469e      	mov	lr, r3
 80052fa:	4770      	bx	lr

080052fc <_fini>:
 80052fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052fe:	bf00      	nop
 8005300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005302:	bc08      	pop	{r3}
 8005304:	469e      	mov	lr, r3
 8005306:	4770      	bx	lr
